{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21","program":"/home/ozz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","futures_sink","--edition=2018","/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=256fdf7aadeb2dc0","-C","extra-filename=-256fdf7aadeb2dc0","--out-dir","/home/ozz/Desktop/dev/rust/rufi/target/rls/debug/deps","-L","dependency=/home/ozz/Desktop/dev/rust/rufi/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/ozz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ozz/Desktop/dev/rust/rufi/target/rls/debug/deps/libfutures_sink-256fdf7aadeb2dc0.rmeta"},"prelude":{"crate_id":{"name":"futures_sink","disambiguator":[11806979643220771367,0]},"crate_root":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src","external_crates":[{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14026078687029744792,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5560808256873132085,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[135160560163186024,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5800521777261530329,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7095478770525139037,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17225897750877482818,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15613653607383163471,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12428323400248712701,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[11893279639181573711,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[13583305032161054644,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16609837797022023111,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[18098459435141129808,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[15244551393771456017,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[6576340271055396708,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[15284510821186066958,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12982807908830018159,0]}}],"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":0,"byte_end":9272,"line_start":1,"line_end":240,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":0,"byte_end":9272,"line_start":1,"line_end":240,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":24},{"krate":0,"index":32},{"krate":0,"index":40}],"decl_id":null,"docs":" Asynchronous sinks","sig":null,"attributes":[{"value":"/ Asynchronous sinks","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":23,"byte_end":26,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate contains the `Sink` trait which allows values to be sent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":27,"byte_end":98,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ asynchronously.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":99,"byte_end":118,"line_start":4,"line_end":4,"column_start":1,"column_end":20}},{"value":"warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":163,"byte_end":251,"line_start":7,"line_end":7,"column_start":1,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":17},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2018,"byte_end":2022,"line_start":52,"line_end":52,"column_start":11,"column_end":15},"name":"Sink","qualname":"::Sink","value":"Sink<Item>","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23}],"decl_id":null,"docs":" A `Sink` is a value into which other values can be sent, asynchronously.","sig":null,"attributes":[{"value":"/ A `Sink` is a value into which other values can be sent, asynchronously.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":727,"byte_end":803,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":804,"byte_end":807,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Basic examples of sinks include the sending side of:","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":808,"byte_end":864,"line_start":27,"line_end":27,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":865,"byte_end":868,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ - Channels","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":869,"byte_end":883,"line_start":29,"line_end":29,"column_start":1,"column_end":15}},{"value":"/ - Sockets","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":884,"byte_end":897,"line_start":30,"line_end":30,"column_start":1,"column_end":14}},{"value":"/ - Pipes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":898,"byte_end":909,"line_start":31,"line_end":31,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":910,"byte_end":913,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ In addition to such \"primitive\" sinks, it's typical to layer additional","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":914,"byte_end":989,"line_start":33,"line_end":33,"column_start":1,"column_end":76}},{"value":"/ functionality, such as buffering, on top of an existing sink.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":990,"byte_end":1055,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1056,"byte_end":1059,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Sending to a sink is \"asynchronous\" in the sense that the value may not be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1060,"byte_end":1138,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"/ sent in its entirety immediately. Instead, values are sent in a two-phase","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1139,"byte_end":1216,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ way: first by initiating a send, and then by polling for completion. This","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1217,"byte_end":1294,"line_start":38,"line_end":38,"column_start":1,"column_end":78}},{"value":"/ two-phase setup is analogous to buffered writing in synchronous code, where","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1295,"byte_end":1374,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ writes often succeed immediately, but internally are buffered and are","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1375,"byte_end":1448,"line_start":40,"line_end":40,"column_start":1,"column_end":74}},{"value":"/ *actually* written only upon flushing.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1449,"byte_end":1491,"line_start":41,"line_end":41,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1492,"byte_end":1495,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ In addition, the `Sink` may be *full*, in which case it is not even possible","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1496,"byte_end":1576,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/ to start the sending process.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1577,"byte_end":1610,"line_start":44,"line_end":44,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1611,"byte_end":1614,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ As with `Future` and `Stream`, the `Sink` trait is built from a few core","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1615,"byte_end":1691,"line_start":46,"line_end":46,"column_start":1,"column_end":77}},{"value":"/ required methods, and a host of default methods for working in a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1692,"byte_end":1760,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"/ higher-level way. The `Sink::send_all` combinator is of particular","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1761,"byte_end":1831,"line_start":48,"line_end":48,"column_start":1,"column_end":71}},{"value":"/ importance: you can use it to send an entire stream to a sink, which is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1832,"byte_end":1907,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ the simplest way to ultimately consume a stream.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1908,"byte_end":1960,"line_start":50,"line_end":50,"column_start":1,"column_end":53}},{"value":"must_use = \"sinks do nothing unless polled\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":1961,"byte_end":2007,"line_start":51,"line_end":51,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":19},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2109,"byte_end":2114,"line_start":54,"line_end":54,"column_start":10,"column_end":15},"name":"Error","qualname":"::Sink::Error","value":"type Error;","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" The type of value produced by the sink when an error occurs.\n","sig":null,"attributes":[{"value":"/ The type of value produced by the sink when an error occurs.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2035,"byte_end":2099,"line_start":53,"line_end":53,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2715,"byte_end":2725,"line_start":68,"line_end":68,"column_start":8,"column_end":18},"name":"poll_ready","qualname":"::Sink::poll_ready","value":"pub fn poll_ready(Pin<&mut Self>, &mut Context)\n-> Poll<Result<(), Self::Error>>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Attempts to prepare the `Sink` to receive a value.","sig":null,"attributes":[{"value":"/ Attempts to prepare the `Sink` to receive a value.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2121,"byte_end":2175,"line_start":56,"line_end":56,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2180,"byte_end":2183,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This method must be called and return `Poll::Ready(Ok(()))` prior to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2188,"byte_end":2260,"line_start":58,"line_end":58,"column_start":5,"column_end":77}},{"value":"/ each call to `start_send`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2265,"byte_end":2295,"line_start":59,"line_end":59,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2300,"byte_end":2303,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ This method returns `Poll::Ready` once the underlying sink is ready to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2308,"byte_end":2382,"line_start":61,"line_end":61,"column_start":5,"column_end":79}},{"value":"/ receive data. If this method returns `Poll::Pending`, the current task","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2387,"byte_end":2461,"line_start":62,"line_end":62,"column_start":5,"column_end":79}},{"value":"/ is registered to be notified (via `cx.waker().wake_by_ref()`) when `poll_ready`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2466,"byte_end":2549,"line_start":63,"line_end":63,"column_start":5,"column_end":88}},{"value":"/ should be called again.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2554,"byte_end":2581,"line_start":64,"line_end":64,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2586,"byte_end":2589,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ In most cases, if the sink encounters an error, the sink will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2594,"byte_end":2659,"line_start":66,"line_end":66,"column_start":5,"column_end":70}},{"value":"/ permanently be unable to receive items.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2664,"byte_end":2707,"line_start":67,"line_end":67,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3925,"byte_end":3935,"line_start":89,"line_end":89,"column_start":8,"column_end":18},"name":"start_send","qualname":"::Sink::start_send","value":"pub fn start_send(Pin<&mut Self>, Item) -> Result<(), Self::Error>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Begin the process of sending a value to the sink.\n Each call to this function must be preceded by a successful call to\n `poll_ready` which returned `Poll::Ready(Ok(()))`.","sig":null,"attributes":[{"value":"/ Begin the process of sending a value to the sink.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2809,"byte_end":2862,"line_start":70,"line_end":70,"column_start":5,"column_end":58}},{"value":"/ Each call to this function must be preceded by a successful call to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2867,"byte_end":2938,"line_start":71,"line_end":71,"column_start":5,"column_end":76}},{"value":"/ `poll_ready` which returned `Poll::Ready(Ok(()))`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":2943,"byte_end":2997,"line_start":72,"line_end":72,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3002,"byte_end":3005,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ As the name suggests, this method only *begins* the process of sending","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3010,"byte_end":3084,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ the item. If the sink employs buffering, the item isn't fully processed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3089,"byte_end":3164,"line_start":75,"line_end":75,"column_start":5,"column_end":80}},{"value":"/ until the buffer is fully flushed. Since sinks are designed to work with","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3169,"byte_end":3245,"line_start":76,"line_end":76,"column_start":5,"column_end":81}},{"value":"/ asynchronous I/O, the process of actually writing out the data to an","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3250,"byte_end":3322,"line_start":77,"line_end":77,"column_start":5,"column_end":77}},{"value":"/ underlying object takes place asynchronously. **You *must* use","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3327,"byte_end":3393,"line_start":78,"line_end":78,"column_start":5,"column_end":71}},{"value":"/ `poll_flush` or `poll_close` in order to guarantee completion of a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3398,"byte_end":3468,"line_start":79,"line_end":79,"column_start":5,"column_end":75}},{"value":"/ send**.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3473,"byte_end":3484,"line_start":80,"line_end":80,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3489,"byte_end":3492,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Implementations of `poll_ready` and `start_send` will usually involve","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3497,"byte_end":3570,"line_start":82,"line_end":82,"column_start":5,"column_end":78}},{"value":"/ flushing behind the scenes in order to make room for new messages.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3575,"byte_end":3645,"line_start":83,"line_end":83,"column_start":5,"column_end":75}},{"value":"/ It is only necessary to call `poll_flush` if you need to guarantee that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3650,"byte_end":3725,"line_start":84,"line_end":84,"column_start":5,"column_end":80}},{"value":"/ *all* of the items placed into the `Sink` have been sent.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3730,"byte_end":3791,"line_start":85,"line_end":85,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3796,"byte_end":3799,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ In most cases, if the sink encounters an error, the sink will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3804,"byte_end":3869,"line_start":87,"line_end":87,"column_start":5,"column_end":70}},{"value":"/ permanently be unable to receive items.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":3874,"byte_end":3917,"line_start":88,"line_end":88,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4610,"byte_end":4620,"line_start":103,"line_end":103,"column_start":8,"column_end":18},"name":"poll_flush","qualname":"::Sink::poll_flush","value":"pub fn poll_flush(Pin<&mut Self>, &mut Context)\n-> Poll<Result<(), Self::Error>>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Flush any remaining output from this sink.","sig":null,"attributes":[{"value":"/ Flush any remaining output from this sink.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4003,"byte_end":4049,"line_start":91,"line_end":91,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4054,"byte_end":4057,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ Returns `Poll::Ready(Ok(()))` when no buffered items remain. If this","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4062,"byte_end":4134,"line_start":93,"line_end":93,"column_start":5,"column_end":77}},{"value":"/ value is returned then it is guaranteed that all previous values sent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4139,"byte_end":4212,"line_start":94,"line_end":94,"column_start":5,"column_end":78}},{"value":"/ via `start_send` have been flushed.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4217,"byte_end":4256,"line_start":95,"line_end":95,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4261,"byte_end":4264,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Returns `Poll::Pending` if there is more work left to do, in which","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4269,"byte_end":4339,"line_start":97,"line_end":97,"column_start":5,"column_end":75}},{"value":"/ case the current task is scheduled (via `cx.waker().wake_by_ref()`) to wake up when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4344,"byte_end":4431,"line_start":98,"line_end":98,"column_start":5,"column_end":92}},{"value":"/ `poll_flush` should be called again.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4436,"byte_end":4476,"line_start":99,"line_end":99,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4481,"byte_end":4484,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ In most cases, if the sink encounters an error, the sink will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4489,"byte_end":4554,"line_start":101,"line_end":101,"column_start":5,"column_end":70}},{"value":"/ permanently be unable to receive items.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4559,"byte_end":4602,"line_start":102,"line_end":102,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":5289,"byte_end":5299,"line_start":116,"line_end":116,"column_start":8,"column_end":18},"name":"poll_close","qualname":"::Sink::poll_close","value":"pub fn poll_close(Pin<&mut Self>, &mut Context)\n-> Poll<Result<(), Self::Error>>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Flush any remaining output and close this sink, if necessary.","sig":null,"attributes":[{"value":"/ Flush any remaining output and close this sink, if necessary.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4704,"byte_end":4769,"line_start":105,"line_end":105,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4774,"byte_end":4777,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Returns `Poll::Ready(Ok(()))` when no buffered items remain and the sink","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4782,"byte_end":4858,"line_start":107,"line_end":107,"column_start":5,"column_end":81}},{"value":"/ has been successfully closed.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4863,"byte_end":4896,"line_start":108,"line_end":108,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4901,"byte_end":4904,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Returns `Poll::Pending` if there is more work left to do, in which","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4909,"byte_end":4979,"line_start":110,"line_end":110,"column_start":5,"column_end":75}},{"value":"/ case the current task is scheduled (via `cx.waker().wake_by_ref()`) to wake up when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":4984,"byte_end":5071,"line_start":111,"line_end":111,"column_start":5,"column_end":92}},{"value":"/ `poll_close` should be called again.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":5076,"byte_end":5116,"line_start":112,"line_end":112,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":5121,"byte_end":5124,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ If this function encounters an error, the sink should be considered to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":5129,"byte_end":5203,"line_start":114,"line_end":114,"column_start":5,"column_end":79}},{"value":"/ have failed permanently, and no more `Sink` methods should be called.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":5208,"byte_end":5281,"line_start":115,"line_end":115,"column_start":5,"column_end":78}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":6105,"byte_end":6108,"line_start":139,"line_end":139,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":6956,"byte_end":6959,"line_start":168,"line_end":168,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":7694,"byte_end":7702,"line_start":190,"line_end":190,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":8474,"byte_end":8477,"line_start":212,"line_end":212,"column_start":77,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":6105,"byte_end":6108,"line_start":139,"line_end":139,"column_start":30,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":2,"index":45210},"to":{"krate":0,"index":17}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":6956,"byte_end":6959,"line_start":168,"line_end":168,"column_start":37,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":5,"index":7080},"to":{"krate":0,"index":17}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":7694,"byte_end":7702,"line_start":190,"line_end":190,"column_start":45,"column_end":53},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":4173},"to":{"krate":0,"index":17}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-0.3.21/src/lib.rs","byte_start":8474,"byte_end":8477,"line_start":212,"line_end":212,"column_start":77,"column_end":80},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":315},"to":{"krate":0,"index":17}}]}