{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1","program":"/home/ozz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","tower_service","--edition=2018","/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=ac968396b52632eb","-C","extra-filename=-ac968396b52632eb","--out-dir","/home/ozz/Desktop/dev/rust/rufi/target/rls/debug/deps","-L","dependency=/home/ozz/Desktop/dev/rust/rufi/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/ozz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ozz/Desktop/dev/rust/rufi/target/rls/debug/deps/libtower_service-ac968396b52632eb.rmeta"},"prelude":{"crate_id":{"name":"tower_service","disambiguator":[9303431542951732763,0]},"crate_root":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src","external_crates":[{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14026078687029744792,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5560808256873132085,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[135160560163186024,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5800521777261530329,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7095478770525139037,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17225897750877482818,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15613653607383163471,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12428323400248712701,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[11893279639181573711,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[13583305032161054644,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16609837797022023111,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[18098459435141129808,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[15244551393771456017,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[6576340271055396708,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[15284510821186066958,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12982807908830018159,0]}}],"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":0,"byte_end":10719,"line_start":1,"line_end":306,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":0,"byte_end":10719,"line_start":1,"line_end":306,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":20},{"krate":0,"index":29}],"decl_id":null,"docs":" Definition of the core `Service` trait to Tower","sig":null,"attributes":[{"value":"warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":63,"byte_end":169,"line_start":2,"line_end":7,"column_start":1,"column_end":3}},{"value":"deny(broken_intra_doc_links)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":170,"byte_end":202,"line_start":8,"line_end":8,"column_start":1,"column_end":33}},{"value":"/ Definition of the core `Service` trait to Tower","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":204,"byte_end":255,"line_start":10,"line_end":10,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":256,"byte_end":259,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The [`Service`] trait provides the necessary abstractions for defining","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":260,"byte_end":334,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ request / response clients and servers. It is simple but powerful and is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":335,"byte_end":411,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ used as the foundation for the rest of Tower.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":412,"byte_end":461,"line_start":14,"line_end":14,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":13},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8234,"byte_end":8241,"line_start":234,"line_end":234,"column_start":11,"column_end":18},"name":"Service","qualname":"::Service","value":"Service<Request>","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19}],"decl_id":null,"docs":" An asynchronous function from a `Request` to a `Response`.","sig":null,"attributes":[{"value":"/ An asynchronous function from a `Request` to a `Response`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":521,"byte_end":583,"line_start":19,"line_end":19,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":584,"byte_end":587,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The `Service` trait is a simplified interface making it easy to write","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":588,"byte_end":661,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ network applications in a modular and reusable way, decoupled from the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":662,"byte_end":736,"line_start":22,"line_end":22,"column_start":1,"column_end":75}},{"value":"/ underlying protocol. It is one of Tower's fundamental abstractions.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":737,"byte_end":808,"line_start":23,"line_end":23,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":809,"byte_end":812,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Functional","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":813,"byte_end":829,"line_start":25,"line_end":25,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":830,"byte_end":833,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ A `Service` is a function of a `Request`. It immediately returns a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":834,"byte_end":904,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `Future` representing the eventual completion of processing the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":905,"byte_end":972,"line_start":28,"line_end":28,"column_start":1,"column_end":68}},{"value":"/ request. The actual request processing may happen at any time in the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":973,"byte_end":1045,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ future, on any thread or executor. The processing may depend on calling","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1046,"byte_end":1121,"line_start":30,"line_end":30,"column_start":1,"column_end":76}},{"value":"/ other services. At some point in the future, the processing will complete,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1122,"byte_end":1200,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ and the `Future` will resolve to a response or error.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1201,"byte_end":1258,"line_start":32,"line_end":32,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1259,"byte_end":1262,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ At a high level, the `Service::call` function represents an RPC request. The","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1263,"byte_end":1343,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/ `Service` value can be a server or a client.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1344,"byte_end":1392,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1393,"byte_end":1396,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # Server","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1397,"byte_end":1409,"line_start":37,"line_end":37,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1410,"byte_end":1413,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ An RPC server *implements* the `Service` trait. Requests received by the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1414,"byte_end":1490,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"/ server over the network are deserialized and then passed as an argument to the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1491,"byte_end":1573,"line_start":40,"line_end":40,"column_start":1,"column_end":83}},{"value":"/ server value. The returned response is sent back over the network.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1574,"byte_end":1644,"line_start":41,"line_end":41,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1645,"byte_end":1648,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ As an example, here is how an HTTP request is processed by a server:","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1649,"byte_end":1721,"line_start":43,"line_end":43,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1722,"byte_end":1725,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1726,"byte_end":1737,"line_start":45,"line_end":45,"column_start":1,"column_end":12}},{"value":"/ # use std::pin::Pin;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1738,"byte_end":1762,"line_start":46,"line_end":46,"column_start":1,"column_end":25}},{"value":"/ # use std::task::{Poll, Context};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1763,"byte_end":1800,"line_start":47,"line_end":47,"column_start":1,"column_end":38}},{"value":"/ # use std::future::Future;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1801,"byte_end":1831,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/ # use tower_service::Service;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1832,"byte_end":1865,"line_start":49,"line_end":49,"column_start":1,"column_end":34}},{"value":"/ use http::{Request, Response, StatusCode};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1866,"byte_end":1912,"line_start":50,"line_end":50,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1913,"byte_end":1916,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ struct HelloWorld;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1917,"byte_end":1939,"line_start":52,"line_end":52,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1940,"byte_end":1943,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ impl Service<Request<Vec<u8>>> for HelloWorld {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1944,"byte_end":1995,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/     type Response = Response<Vec<u8>>;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":1996,"byte_end":2038,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"/     type Error = http::Error;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2039,"byte_end":2072,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/     type Future = Pin<Box<dyn Future<Output = Result<Self::Response, Self::Error>>>>;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2073,"byte_end":2162,"line_start":57,"line_end":57,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2163,"byte_end":2166,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/     fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2167,"byte_end":2256,"line_start":59,"line_end":59,"column_start":1,"column_end":90}},{"value":"/         Poll::Ready(Ok(()))","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2257,"byte_end":2288,"line_start":60,"line_end":60,"column_start":1,"column_end":32}},{"value":"/     }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2289,"byte_end":2298,"line_start":61,"line_end":61,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2299,"byte_end":2302,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/     fn call(&mut self, req: Request<Vec<u8>>) -> Self::Future {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2303,"byte_end":2370,"line_start":63,"line_end":63,"column_start":1,"column_end":68}},{"value":"/         // create the body","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2371,"byte_end":2401,"line_start":64,"line_end":64,"column_start":1,"column_end":31}},{"value":"/         let body: Vec<u8> = \"hello, world!\\n\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2402,"byte_end":2451,"line_start":65,"line_end":65,"column_start":1,"column_end":50}},{"value":"/             .as_bytes()","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2452,"byte_end":2479,"line_start":66,"line_end":66,"column_start":1,"column_end":28}},{"value":"/             .to_owned();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2480,"byte_end":2508,"line_start":67,"line_end":67,"column_start":1,"column_end":29}},{"value":"/         // Create the HTTP response","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2509,"byte_end":2548,"line_start":68,"line_end":68,"column_start":1,"column_end":40}},{"value":"/         let resp = Response::builder()","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2549,"byte_end":2591,"line_start":69,"line_end":69,"column_start":1,"column_end":43}},{"value":"/             .status(StatusCode::OK)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2592,"byte_end":2631,"line_start":70,"line_end":70,"column_start":1,"column_end":40}},{"value":"/             .body(body)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2632,"byte_end":2659,"line_start":71,"line_end":71,"column_start":1,"column_end":28}},{"value":"/             .expect(\"Unable to create `http::Response`\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2660,"byte_end":2721,"line_start":72,"line_end":72,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2722,"byte_end":2725,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/         // create a response in a future.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2726,"byte_end":2771,"line_start":74,"line_end":74,"column_start":1,"column_end":46}},{"value":"/         let fut = async {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2772,"byte_end":2801,"line_start":75,"line_end":75,"column_start":1,"column_end":30}},{"value":"/             Ok(resp)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2802,"byte_end":2826,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/         };","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2827,"byte_end":2841,"line_start":77,"line_end":77,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2842,"byte_end":2845,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/         // Return the response as an immediate future","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2846,"byte_end":2903,"line_start":79,"line_end":79,"column_start":1,"column_end":58}},{"value":"/         Box::pin(fut)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2904,"byte_end":2929,"line_start":80,"line_end":80,"column_start":1,"column_end":26}},{"value":"/     }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2930,"byte_end":2939,"line_start":81,"line_end":81,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2940,"byte_end":2945,"line_start":82,"line_end":82,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2946,"byte_end":2953,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2954,"byte_end":2957,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ # Client","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2958,"byte_end":2970,"line_start":85,"line_end":85,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2971,"byte_end":2974,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ A client consumes a service by using a `Service` value. The client may","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":2975,"byte_end":3049,"line_start":87,"line_end":87,"column_start":1,"column_end":75}},{"value":"/ issue requests by invoking `call` and passing the request as an argument.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3050,"byte_end":3127,"line_start":88,"line_end":88,"column_start":1,"column_end":78}},{"value":"/ It then receives the response by waiting for the returned future.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3128,"byte_end":3197,"line_start":89,"line_end":89,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3198,"byte_end":3201,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ As an example, here is how a Redis request would be issued:","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3202,"byte_end":3265,"line_start":91,"line_end":91,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3266,"byte_end":3269,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3270,"byte_end":3288,"line_start":93,"line_end":93,"column_start":1,"column_end":19}},{"value":"/ let client = redis::Client::new()","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3289,"byte_end":3326,"line_start":94,"line_end":94,"column_start":1,"column_end":38}},{"value":"/     .connect(\"127.0.0.1:6379\".parse().unwrap())","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3327,"byte_end":3378,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/     .unwrap();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3379,"byte_end":3397,"line_start":96,"line_end":96,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3398,"byte_end":3401,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ let resp = client.call(Cmd::set(\"foo\", \"this is the value of foo\")).await?;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3402,"byte_end":3481,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3482,"byte_end":3485,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ // Wait for the future to resolve","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3486,"byte_end":3523,"line_start":100,"line_end":100,"column_start":1,"column_end":38}},{"value":"/ println!(\"Redis response: {:?}\", resp);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3524,"byte_end":3567,"line_start":101,"line_end":101,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3568,"byte_end":3575,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3576,"byte_end":3579,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ # Middleware / Layer","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3580,"byte_end":3604,"line_start":104,"line_end":104,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3605,"byte_end":3608,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ More often than not, all the pieces needed for writing robust, scalable","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3609,"byte_end":3684,"line_start":106,"line_end":106,"column_start":1,"column_end":76}},{"value":"/ network applications are the same no matter the underlying protocol. By","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3685,"byte_end":3760,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"/ unifying the API for both clients and servers in a protocol agnostic way,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3761,"byte_end":3838,"line_start":108,"line_end":108,"column_start":1,"column_end":78}},{"value":"/ it is possible to write middleware that provide these pieces in a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3839,"byte_end":3908,"line_start":109,"line_end":109,"column_start":1,"column_end":70}},{"value":"/ reusable way.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3909,"byte_end":3926,"line_start":110,"line_end":110,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3927,"byte_end":3930,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ Take timeouts as an example:","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3931,"byte_end":3963,"line_start":112,"line_end":112,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3964,"byte_end":3967,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3968,"byte_end":3979,"line_start":114,"line_end":114,"column_start":1,"column_end":12}},{"value":"/ use tower_service::Service;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":3980,"byte_end":4011,"line_start":115,"line_end":115,"column_start":1,"column_end":32}},{"value":"/ use tower_layer::Layer;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4012,"byte_end":4039,"line_start":116,"line_end":116,"column_start":1,"column_end":28}},{"value":"/ use futures::FutureExt;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4040,"byte_end":4067,"line_start":117,"line_end":117,"column_start":1,"column_end":28}},{"value":"/ use std::future::Future;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4068,"byte_end":4096,"line_start":118,"line_end":118,"column_start":1,"column_end":29}},{"value":"/ use std::task::{Context, Poll};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4097,"byte_end":4132,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4133,"byte_end":4161,"line_start":120,"line_end":120,"column_start":1,"column_end":29}},{"value":"/ use std::pin::Pin;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4162,"byte_end":4184,"line_start":121,"line_end":121,"column_start":1,"column_end":23}},{"value":"/ use std::fmt;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4185,"byte_end":4202,"line_start":122,"line_end":122,"column_start":1,"column_end":18}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4203,"byte_end":4229,"line_start":123,"line_end":123,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4230,"byte_end":4233,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ // Our timeout service, which wraps another service and","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4234,"byte_end":4293,"line_start":125,"line_end":125,"column_start":1,"column_end":60}},{"value":"/ // adds a timeout to its response future.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4294,"byte_end":4339,"line_start":126,"line_end":126,"column_start":1,"column_end":46}},{"value":"/ pub struct Timeout<T> {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4340,"byte_end":4367,"line_start":127,"line_end":127,"column_start":1,"column_end":28}},{"value":"/     inner: T,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4368,"byte_end":4385,"line_start":128,"line_end":128,"column_start":1,"column_end":18}},{"value":"/     timeout: Duration,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4386,"byte_end":4412,"line_start":129,"line_end":129,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4413,"byte_end":4418,"line_start":130,"line_end":130,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4419,"byte_end":4422,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ impl<T> Timeout<T> {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4423,"byte_end":4447,"line_start":132,"line_end":132,"column_start":1,"column_end":25}},{"value":"/     pub fn new(inner: T, timeout: Duration) -> Timeout<T> {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4448,"byte_end":4511,"line_start":133,"line_end":133,"column_start":1,"column_end":64}},{"value":"/         Timeout {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4512,"byte_end":4533,"line_start":134,"line_end":134,"column_start":1,"column_end":22}},{"value":"/             inner,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4534,"byte_end":4556,"line_start":135,"line_end":135,"column_start":1,"column_end":23}},{"value":"/             timeout","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4557,"byte_end":4580,"line_start":136,"line_end":136,"column_start":1,"column_end":24}},{"value":"/         }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4581,"byte_end":4594,"line_start":137,"line_end":137,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4595,"byte_end":4604,"line_start":138,"line_end":138,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4605,"byte_end":4610,"line_start":139,"line_end":139,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4611,"byte_end":4614,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ // The error returned if processing a request timed out","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4615,"byte_end":4674,"line_start":141,"line_end":141,"column_start":1,"column_end":60}},{"value":"/ #[derive(Debug)]","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4675,"byte_end":4695,"line_start":142,"line_end":142,"column_start":1,"column_end":21}},{"value":"/ pub struct Expired;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4696,"byte_end":4719,"line_start":143,"line_end":143,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4720,"byte_end":4723,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ impl fmt::Display for Expired {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4724,"byte_end":4759,"line_start":145,"line_end":145,"column_start":1,"column_end":36}},{"value":"/     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4760,"byte_end":4826,"line_start":146,"line_end":146,"column_start":1,"column_end":67}},{"value":"/         write!(f, \"expired\")","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4827,"byte_end":4859,"line_start":147,"line_end":147,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4860,"byte_end":4869,"line_start":148,"line_end":148,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4870,"byte_end":4875,"line_start":149,"line_end":149,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4876,"byte_end":4879,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ impl Error for Expired {}","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4880,"byte_end":4909,"line_start":151,"line_end":151,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4910,"byte_end":4913,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ // We can implement `Service` for `Timeout<T>` if `T` is a `Service`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4914,"byte_end":4986,"line_start":153,"line_end":153,"column_start":1,"column_end":73}},{"value":"/ impl<T, Request> Service<Request> for Timeout<T>","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":4987,"byte_end":5039,"line_start":154,"line_end":154,"column_start":1,"column_end":53}},{"value":"/ where","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5040,"byte_end":5049,"line_start":155,"line_end":155,"column_start":1,"column_end":10}},{"value":"/     T: Service<Request>,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5050,"byte_end":5078,"line_start":156,"line_end":156,"column_start":1,"column_end":29}},{"value":"/     T::Future: 'static,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5079,"byte_end":5106,"line_start":157,"line_end":157,"column_start":1,"column_end":28}},{"value":"/     T::Error: Into<Box<dyn Error + Send + Sync>> + 'static,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5107,"byte_end":5170,"line_start":158,"line_end":158,"column_start":1,"column_end":64}},{"value":"/     T::Response: 'static,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5171,"byte_end":5200,"line_start":159,"line_end":159,"column_start":1,"column_end":30}},{"value":"/ {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5201,"byte_end":5206,"line_start":160,"line_end":160,"column_start":1,"column_end":6}},{"value":"/     // `Timeout` doesn't modify the response type, so we use `T`'s response type","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5207,"byte_end":5291,"line_start":161,"line_end":161,"column_start":1,"column_end":85}},{"value":"/     type Response = T::Response;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5292,"byte_end":5328,"line_start":162,"line_end":162,"column_start":1,"column_end":37}},{"value":"/     // Errors may be either `Expired` if the timeout expired, or the inner service's","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5329,"byte_end":5417,"line_start":163,"line_end":163,"column_start":1,"column_end":89}},{"value":"/     // `Error` type. Therefore, we return a boxed `dyn Error + Send + Sync` trait object to erase","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5418,"byte_end":5519,"line_start":164,"line_end":164,"column_start":1,"column_end":102}},{"value":"/     // the error's type.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5520,"byte_end":5548,"line_start":165,"line_end":165,"column_start":1,"column_end":29}},{"value":"/     type Error = Box<dyn Error + Send + Sync>;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5549,"byte_end":5599,"line_start":166,"line_end":166,"column_start":1,"column_end":51}},{"value":"/     type Future = Pin<Box<dyn Future<Output = Result<Self::Response, Self::Error>>>>;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5600,"byte_end":5689,"line_start":167,"line_end":167,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5690,"byte_end":5693,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/     fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5694,"byte_end":5783,"line_start":169,"line_end":169,"column_start":1,"column_end":90}},{"value":"/         // Our timeout service is ready if the inner service is ready.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5784,"byte_end":5858,"line_start":170,"line_end":170,"column_start":1,"column_end":75}},{"value":"/         // This is how backpressure can be propagated through a tree of nested services.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5859,"byte_end":5951,"line_start":171,"line_end":171,"column_start":1,"column_end":93}},{"value":"/        self.inner.poll_ready(cx).map_err(Into::into)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":5952,"byte_end":6008,"line_start":172,"line_end":172,"column_start":1,"column_end":57}},{"value":"/     }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6009,"byte_end":6018,"line_start":173,"line_end":173,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6019,"byte_end":6022,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/     fn call(&mut self, req: Request) -> Self::Future {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6023,"byte_end":6081,"line_start":175,"line_end":175,"column_start":1,"column_end":59}},{"value":"/         // Create a future that completes after `self.timeout`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6082,"byte_end":6148,"line_start":176,"line_end":176,"column_start":1,"column_end":67}},{"value":"/         let timeout = tokio::time::sleep(self.timeout);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6149,"byte_end":6208,"line_start":177,"line_end":177,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6209,"byte_end":6212,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/         // Call the inner service and get a future that resolves to the response","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6213,"byte_end":6297,"line_start":179,"line_end":179,"column_start":1,"column_end":85}},{"value":"/         let fut = self.inner.call(req);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6298,"byte_end":6341,"line_start":180,"line_end":180,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6342,"byte_end":6345,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/         // Wrap those two futures in another future that completes when either one completes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6346,"byte_end":6442,"line_start":182,"line_end":182,"column_start":1,"column_end":97}},{"value":"/         //","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6443,"byte_end":6457,"line_start":183,"line_end":183,"column_start":1,"column_end":15}},{"value":"/         // If the inner service is too slow the `sleep` future will complete first","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6458,"byte_end":6544,"line_start":184,"line_end":184,"column_start":1,"column_end":87}},{"value":"/         // And an error will be returned and `fut` will be dropped and not polled again","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6545,"byte_end":6636,"line_start":185,"line_end":185,"column_start":1,"column_end":92}},{"value":"/         //","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6637,"byte_end":6651,"line_start":186,"line_end":186,"column_start":1,"column_end":15}},{"value":"/         // We have to box the errors so the types match","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6652,"byte_end":6711,"line_start":187,"line_end":187,"column_start":1,"column_end":60}},{"value":"/         let f = async move {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6712,"byte_end":6744,"line_start":188,"line_end":188,"column_start":1,"column_end":33}},{"value":"/             tokio::select! {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6745,"byte_end":6777,"line_start":189,"line_end":189,"column_start":1,"column_end":33}},{"value":"/                 res = fut => {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6778,"byte_end":6812,"line_start":190,"line_end":190,"column_start":1,"column_end":35}},{"value":"/                     res.map_err(|err| err.into())","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6813,"byte_end":6866,"line_start":191,"line_end":191,"column_start":1,"column_end":54}},{"value":"/                 },","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6867,"byte_end":6889,"line_start":192,"line_end":192,"column_start":1,"column_end":23}},{"value":"/                 _ = timeout => {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6890,"byte_end":6926,"line_start":193,"line_end":193,"column_start":1,"column_end":37}},{"value":"/                     Err(Box::new(Expired) as Box<dyn Error + Send + Sync>)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":6927,"byte_end":7005,"line_start":194,"line_end":194,"column_start":1,"column_end":79}},{"value":"/                 },","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7006,"byte_end":7028,"line_start":195,"line_end":195,"column_start":1,"column_end":23}},{"value":"/             }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7029,"byte_end":7046,"line_start":196,"line_end":196,"column_start":1,"column_end":18}},{"value":"/         };","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7047,"byte_end":7061,"line_start":197,"line_end":197,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7062,"byte_end":7065,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/         Box::pin(f)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7066,"byte_end":7089,"line_start":199,"line_end":199,"column_start":1,"column_end":24}},{"value":"/     }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7090,"byte_end":7099,"line_start":200,"line_end":200,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7100,"byte_end":7105,"line_start":201,"line_end":201,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7106,"byte_end":7109,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ // A layer for wrapping services in `Timeout`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7110,"byte_end":7159,"line_start":203,"line_end":203,"column_start":1,"column_end":50}},{"value":"/ pub struct TimeoutLayer(Duration);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7160,"byte_end":7198,"line_start":204,"line_end":204,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7199,"byte_end":7202,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ impl TimeoutLayer {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7203,"byte_end":7226,"line_start":206,"line_end":206,"column_start":1,"column_end":24}},{"value":"/     pub fn new(delay: Duration) -> Self {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7227,"byte_end":7272,"line_start":207,"line_end":207,"column_start":1,"column_end":46}},{"value":"/         TimeoutLayer(delay)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7273,"byte_end":7304,"line_start":208,"line_end":208,"column_start":1,"column_end":32}},{"value":"/     }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7305,"byte_end":7314,"line_start":209,"line_end":209,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7315,"byte_end":7320,"line_start":210,"line_end":210,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7321,"byte_end":7324,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ impl<S> Layer<S> for TimeoutLayer {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7325,"byte_end":7364,"line_start":212,"line_end":212,"column_start":1,"column_end":40}},{"value":"/     type Service = Timeout<S>;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7365,"byte_end":7399,"line_start":213,"line_end":213,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7400,"byte_end":7403,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/     fn layer(&self, service: S) -> Timeout<S> {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7404,"byte_end":7455,"line_start":215,"line_end":215,"column_start":1,"column_end":52}},{"value":"/         Timeout::new(service, self.0)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7456,"byte_end":7497,"line_start":216,"line_end":216,"column_start":1,"column_end":42}},{"value":"/     }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7498,"byte_end":7507,"line_start":217,"line_end":217,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7508,"byte_end":7513,"line_start":218,"line_end":218,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7514,"byte_end":7521,"line_start":219,"line_end":219,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7522,"byte_end":7525,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ The above timeout implementation is decoupled from the underlying protocol","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7526,"byte_end":7604,"line_start":221,"line_end":221,"column_start":1,"column_end":79}},{"value":"/ and is also decoupled from client or server concerns. In other words, the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7605,"byte_end":7682,"line_start":222,"line_end":222,"column_start":1,"column_end":78}},{"value":"/ same timeout middleware could be used in either a client or a server.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7683,"byte_end":7756,"line_start":223,"line_end":223,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7757,"byte_end":7760,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ # Backpressure","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7761,"byte_end":7779,"line_start":225,"line_end":225,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7780,"byte_end":7783,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ Calling a `Service` which is at capacity (i.e., it is temporarily unable to process a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7784,"byte_end":7873,"line_start":227,"line_end":227,"column_start":1,"column_end":90}},{"value":"/ request) should result in an error. The caller is responsible for ensuring","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7874,"byte_end":7952,"line_start":228,"line_end":228,"column_start":1,"column_end":79}},{"value":"/ that the service is ready to receive the request before calling it.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":7953,"byte_end":8024,"line_start":229,"line_end":229,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8025,"byte_end":8028,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ `Service` provides a mechanism by which the caller is able to coordinate","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8029,"byte_end":8105,"line_start":231,"line_end":231,"column_start":1,"column_end":77}},{"value":"/ readiness. `Service::poll_ready` returns `Ready` if the service expects that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8106,"byte_end":8186,"line_start":232,"line_end":232,"column_start":1,"column_end":81}},{"value":"/ it is able to process a request.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8187,"byte_end":8223,"line_start":233,"line_end":233,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":15},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8302,"byte_end":8310,"line_start":236,"line_end":236,"column_start":10,"column_end":18},"name":"Response","qualname":"::Service::Response","value":"type Response;","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Responses given by the service.\n","sig":null,"attributes":[{"value":"/ Responses given by the service.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8257,"byte_end":8292,"line_start":235,"line_end":235,"column_start":5,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":16},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8362,"byte_end":8367,"line_start":239,"line_end":239,"column_start":10,"column_end":15},"name":"Error","qualname":"::Service::Error","value":"type Error;","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Errors produced by the service.\n","sig":null,"attributes":[{"value":"/ Errors produced by the service.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8317,"byte_end":8352,"line_start":238,"line_end":238,"column_start":5,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":17},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8414,"byte_end":8420,"line_start":242,"line_end":242,"column_start":10,"column_end":16},"name":"Future","qualname":"::Service::Future","value":"type Future: Future<Output = Result<Self::Response, Self::Error>>;","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" The future response value.\n","sig":null,"attributes":[{"value":"/ The future response value.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8374,"byte_end":8404,"line_start":241,"line_end":241,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9297,"byte_end":9307,"line_start":257,"line_end":257,"column_start":8,"column_end":18},"name":"poll_ready","qualname":"::Service::poll_ready","value":"pub fn poll_ready(&mut Self, &mut Context) -> Poll<Result<(), Self::Error>>","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Returns `Poll::Ready(Ok(()))` when the service is able to process requests.","sig":null,"attributes":[{"value":"/ Returns `Poll::Ready(Ok(()))` when the service is able to process requests.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8481,"byte_end":8560,"line_start":244,"line_end":244,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8565,"byte_end":8568,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ If the service is at capacity, then `Poll::Pending` is returned and the task","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8573,"byte_end":8653,"line_start":246,"line_end":246,"column_start":5,"column_end":85}},{"value":"/ is notified when the service becomes ready again. This function is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8658,"byte_end":8728,"line_start":247,"line_end":247,"column_start":5,"column_end":75}},{"value":"/ expected to be called while on a task. Generally, this can be done with","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8733,"byte_end":8808,"line_start":248,"line_end":248,"column_start":5,"column_end":80}},{"value":"/ a simple `futures::future::poll_fn` call.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8813,"byte_end":8858,"line_start":249,"line_end":249,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8863,"byte_end":8866,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ If `Poll::Ready(Err(_))` is returned, the service is no longer able to service requests","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8871,"byte_end":8962,"line_start":251,"line_end":251,"column_start":5,"column_end":96}},{"value":"/ and the caller should discard the service instance.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":8967,"byte_end":9022,"line_start":252,"line_end":252,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9027,"byte_end":9030,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ Once `poll_ready` returns `Poll::Ready(Ok(()))`, a request may be dispatched to the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9035,"byte_end":9122,"line_start":254,"line_end":254,"column_start":5,"column_end":92}},{"value":"/ service using `call`. Until a request is dispatched, repeated calls to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9127,"byte_end":9201,"line_start":255,"line_end":255,"column_start":5,"column_end":79}},{"value":"/ `poll_ready` must return either `Poll::Ready(Ok(()))` or `Poll::Ready(Err(_))`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9206,"byte_end":9289,"line_start":256,"line_end":256,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9878,"byte_end":9882,"line_start":271,"line_end":271,"column_start":8,"column_end":12},"name":"call","qualname":"::Service::call","value":"pub fn call(&mut Self, Request) -> Self::Future","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Process the request and return the response asynchronously.","sig":null,"attributes":[{"value":"/ Process the request and return the response asynchronously.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9380,"byte_end":9443,"line_start":259,"line_end":259,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9448,"byte_end":9451,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ This function is expected to be callable off task. As such,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9456,"byte_end":9519,"line_start":261,"line_end":261,"column_start":5,"column_end":68}},{"value":"/ implementations should take care to not call `poll_ready`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9524,"byte_end":9586,"line_start":262,"line_end":262,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9591,"byte_end":9594,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ Before dispatching a request, `poll_ready` must be called and return","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9599,"byte_end":9671,"line_start":264,"line_end":264,"column_start":5,"column_end":77}},{"value":"/ `Poll::Ready(Ok(()))`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9676,"byte_end":9702,"line_start":265,"line_end":265,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9707,"byte_end":9710,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9715,"byte_end":9727,"line_start":267,"line_end":267,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9732,"byte_end":9735,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Implementations are permitted to panic if `call` is invoked without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9740,"byte_end":9811,"line_start":269,"line_end":269,"column_start":5,"column_end":76}},{"value":"/ obtaining `Poll::Ready(Ok(()))` from `poll_ready`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":9816,"byte_end":9870,"line_start":270,"line_end":270,"column_start":5,"column_end":59}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":10364,"byte_end":10367,"line_start":291,"line_end":291,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/tower-service-0.3.1/src/lib.rs","byte_start":10364,"byte_end":10367,"line_start":291,"line_end":291,"column_start":39,"column_end":42},"kind":{"Impl":{"id":0}},"from":{"krate":5,"index":315},"to":{"krate":0,"index":13}}]}