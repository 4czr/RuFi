{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0","program":"/home/ozz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bytes","--edition=2018","/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=1cc7c62e6b906e91","-C","extra-filename=-1cc7c62e6b906e91","--out-dir","/home/ozz/Desktop/dev/rust/rufi/target/rls/debug/deps","-L","dependency=/home/ozz/Desktop/dev/rust/rufi/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/ozz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ozz/Desktop/dev/rust/rufi/target/rls/debug/deps/libbytes-1cc7c62e6b906e91.rmeta"},"prelude":{"crate_id":{"name":"bytes","disambiguator":[7314794341678089032,0]},"crate_root":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src","external_crates":[{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[5560808256873132085,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[14026078687029744792,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[135160560163186024,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5800521777261530329,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7095478770525139037,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17225897750877482818,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15613653607383163471,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12428323400248712701,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[11893279639181573711,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[13583305032161054644,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16609837797022023111,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[18098459435141129808,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[15244551393771456017,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[6576340271055396708,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[15284510821186066958,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12982807908830018159,0]}}],"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":0,"byte_end":3480,"line_start":1,"line_end":116,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":42},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4417,"byte_end":4420,"line_start":32,"line_end":32,"column_start":25,"column_end":28},"alias_span":null,"name":"Buf","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":140},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4445,"byte_end":4451,"line_start":33,"line_end":33,"column_start":24,"column_end":30},"alias_span":null,"name":"BufMut","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":1233},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4474,"byte_end":4479,"line_start":34,"line_end":34,"column_start":22,"column_end":27},"alias_span":null,"name":"Chain","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":1242},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4501,"byte_end":4509,"line_start":35,"line_end":35,"column_start":21,"column_end":29},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":1248},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4532,"byte_end":4537,"line_start":36,"line_end":36,"column_start":22,"column_end":27},"alias_span":null,"name":"Limit","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":1261},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4559,"byte_end":4563,"line_start":37,"line_end":37,"column_start":21,"column_end":25},"alias_span":null,"name":"Take","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":374},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4593,"byte_end":4604,"line_start":38,"line_end":38,"column_start":29,"column_end":40},"alias_span":null,"name":"UninitSlice","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":1255},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4654,"byte_end":4660,"line_start":41,"line_end":41,"column_start":24,"column_end":30},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":1298},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4670,"byte_end":4676,"line_start":41,"line_end":41,"column_start":40,"column_end":46},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":42},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2945,"byte_end":2948,"line_start":84,"line_end":84,"column_start":22,"column_end":25},"alias_span":null,"name":"Buf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":140},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2950,"byte_end":2956,"line_start":84,"line_end":84,"column_start":27,"column_end":33},"alias_span":null,"name":"BufMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":526},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":3027,"byte_end":3032,"line_start":90,"line_end":90,"column_start":23,"column_end":28},"alias_span":null,"name":"Bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":786},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":3060,"byte_end":3068,"line_start":91,"line_end":91,"column_start":27,"column_end":35},"alias_span":null,"name":"BytesMut","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":0,"byte_end":3480,"line_start":1,"line_end":116,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":458},{"krate":0,"index":685},{"krate":0,"index":983},{"krate":0,"index":1044},{"krate":0,"index":1070},{"krate":0,"index":1073},{"krate":0,"index":1076}],"decl_id":null,"docs":" Provides abstractions for working with bytes.","sig":null,"attributes":[{"value":"warn(missing_docs, missing_debug_implementations, rust_2018_idioms)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":0,"byte_end":71,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"no_std","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":189,"byte_end":199,"line_start":6,"line_end":6,"column_start":1,"column_end":11}},{"value":"/ Provides abstractions for working with bytes.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":201,"byte_end":250,"line_start":8,"line_end":8,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":251,"byte_end":254,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The `bytes` crate provides an efficient byte buffer structure","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":255,"byte_end":320,"line_start":10,"line_end":10,"column_start":1,"column_end":66}},{"value":"/ ([`Bytes`](struct.Bytes.html)) and traits for working with buffer","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":321,"byte_end":390,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ implementations ([`Buf`], [`BufMut`]).","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":391,"byte_end":433,"line_start":12,"line_end":12,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":434,"byte_end":437,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`Buf`]: trait.Buf.html","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":438,"byte_end":465,"line_start":14,"line_end":14,"column_start":1,"column_end":28}},{"value":"/ [`BufMut`]: trait.BufMut.html","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":466,"byte_end":499,"line_start":15,"line_end":15,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":500,"byte_end":503,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # `Bytes`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":504,"byte_end":517,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":518,"byte_end":521,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ `Bytes` is an efficient container for storing and operating on contiguous","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":522,"byte_end":599,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ slices of memory. It is intended for use primarily in networking code, but","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":600,"byte_end":678,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ could have applications elsewhere as well.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":679,"byte_end":725,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":726,"byte_end":729,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ `Bytes` values facilitate zero-copy network programming by allowing multiple","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":730,"byte_end":810,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ `Bytes` objects to point to the same underlying memory. This is managed by","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":811,"byte_end":889,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ using a reference count to track when the memory is no longer needed and can","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":890,"byte_end":970,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ be freed.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":971,"byte_end":984,"line_start":26,"line_end":26,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":985,"byte_end":988,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ A `Bytes` handle can be created directly from an existing byte store (such as `&[u8]`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":989,"byte_end":1078,"line_start":28,"line_end":28,"column_start":1,"column_end":90}},{"value":"/ or `Vec<u8>`), but usually a `BytesMut` is used first and written to. For","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1079,"byte_end":1156,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ example:","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1157,"byte_end":1169,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1170,"byte_end":1173,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1174,"byte_end":1185,"line_start":32,"line_end":32,"column_start":1,"column_end":12}},{"value":"/ use bytes::{BytesMut, BufMut};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1186,"byte_end":1220,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1221,"byte_end":1224,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let mut buf = BytesMut::with_capacity(1024);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1225,"byte_end":1273,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/ buf.put(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1274,"byte_end":1307,"line_start":36,"line_end":36,"column_start":1,"column_end":34}},{"value":"/ buf.put_u16(1234);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1308,"byte_end":1330,"line_start":37,"line_end":37,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1331,"byte_end":1334,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let a = buf.split();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1335,"byte_end":1359,"line_start":39,"line_end":39,"column_start":1,"column_end":25}},{"value":"/ assert_eq!(a, b\"hello world\\x04\\xD2\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1360,"byte_end":1406,"line_start":40,"line_end":40,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1407,"byte_end":1410,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ buf.put(&b\"goodbye world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1411,"byte_end":1446,"line_start":42,"line_end":42,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1447,"byte_end":1450,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ let b = buf.split();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1451,"byte_end":1475,"line_start":44,"line_end":44,"column_start":1,"column_end":25}},{"value":"/ assert_eq!(b, b\"goodbye world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1476,"byte_end":1516,"line_start":45,"line_end":45,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1517,"byte_end":1520,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(buf.capacity(), 998);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1521,"byte_end":1557,"line_start":47,"line_end":47,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1558,"byte_end":1565,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1566,"byte_end":1569,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ In the above example, only a single buffer of 1024 is allocated. The handles","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1570,"byte_end":1650,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/ `a` and `b` will share the underlying buffer and maintain indices tracking","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1651,"byte_end":1729,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ the view into the buffer represented by the handle.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1730,"byte_end":1785,"line_start":52,"line_end":52,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1786,"byte_end":1789,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ See the [struct docs] for more details.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1790,"byte_end":1833,"line_start":54,"line_end":54,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1834,"byte_end":1837,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ [struct docs]: struct.Bytes.html","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1838,"byte_end":1874,"line_start":56,"line_end":56,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1875,"byte_end":1878,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ # `Buf`, `BufMut`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1879,"byte_end":1900,"line_start":58,"line_end":58,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1901,"byte_end":1904,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ These two traits provide read and write access to buffers. The underlying","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1905,"byte_end":1982,"line_start":60,"line_end":60,"column_start":1,"column_end":78}},{"value":"/ storage may or may not be in contiguous memory. For example, `Bytes` is a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":1983,"byte_end":2060,"line_start":61,"line_end":61,"column_start":1,"column_end":78}},{"value":"/ buffer that guarantees contiguous memory, but a [rope] stores the bytes in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2061,"byte_end":2139,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ disjoint chunks. `Buf` and `BufMut` maintain cursors tracking the current","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2140,"byte_end":2217,"line_start":63,"line_end":63,"column_start":1,"column_end":78}},{"value":"/ position in the underlying byte storage. When bytes are read or written, the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2218,"byte_end":2298,"line_start":64,"line_end":64,"column_start":1,"column_end":81}},{"value":"/ cursor is advanced.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2299,"byte_end":2322,"line_start":65,"line_end":65,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2323,"byte_end":2326,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ [rope]: https://en.wikipedia.org/wiki/Rope_(data_structure)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2327,"byte_end":2390,"line_start":67,"line_end":67,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2391,"byte_end":2394,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ## Relation with `Read` and `Write`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2395,"byte_end":2434,"line_start":69,"line_end":69,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2435,"byte_end":2438,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ At first glance, it may seem that `Buf` and `BufMut` overlap in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2439,"byte_end":2506,"line_start":71,"line_end":71,"column_start":1,"column_end":68}},{"value":"/ functionality with `std::io::Read` and `std::io::Write`. However, they","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2507,"byte_end":2581,"line_start":72,"line_end":72,"column_start":1,"column_end":75}},{"value":"/ serve different purposes. A buffer is the value that is provided as an","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2582,"byte_end":2656,"line_start":73,"line_end":73,"column_start":1,"column_end":75}},{"value":"/ argument to `Read::read` and `Write::write`. `Read` and `Write` may then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2657,"byte_end":2733,"line_start":74,"line_end":74,"column_start":1,"column_end":77}},{"value":"/ perform a syscall, which has the potential of failing. Operations on `Buf`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2734,"byte_end":2812,"line_start":75,"line_end":75,"column_start":1,"column_end":79}},{"value":"/ and `BufMut` are infallible.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2813,"byte_end":2845,"line_start":76,"line_end":76,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"buf","qualname":"::buf","value":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":99},{"krate":0,"index":199},{"krate":0,"index":250},{"krate":0,"index":267},{"krate":0,"index":291},{"krate":0,"index":316},{"krate":0,"index":342},{"krate":0,"index":390},{"krate":0,"index":401},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":448}],"decl_id":null,"docs":" Utilities for working with buffers.","sig":null,"attributes":[{"value":"/ Utilities for working with buffers.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":3482,"byte_end":3521,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":3522,"byte_end":3525,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A buffer is any structure that contains a sequence of bytes. The bytes may","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":3526,"byte_end":3604,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ or may not be stored in contiguous memory. This module contains traits used","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":3605,"byte_end":3684,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"/ to abstract over buffers as well as utilities for working with buffer types.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":3685,"byte_end":3765,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":3766,"byte_end":3769,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # `Buf`, `BufMut`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":3770,"byte_end":3791,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":3792,"byte_end":3795,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ These are the two foundational traits for abstractly working with buffers.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":3796,"byte_end":3874,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ They can be thought as iterators for byte structures. They offer additional","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":3875,"byte_end":3954,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ performance over `Iterator` by providing an API optimized for byte slices.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":3955,"byte_end":4033,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4034,"byte_end":4037,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ See [`Buf`] and [`BufMut`] for more details.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4038,"byte_end":4086,"line_start":13,"line_end":13,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4087,"byte_end":4090,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [rope]: https://en.wikipedia.org/wiki/Rope_(data_structure)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4091,"byte_end":4154,"line_start":15,"line_end":15,"column_start":1,"column_end":64}},{"value":"/ [`Buf`]: trait.Buf.html","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4155,"byte_end":4182,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/ [`BufMut`]: trait.BufMut.html","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/mod.rs","byte_start":4183,"byte_end":4216,"line_start":17,"line_end":17,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":42},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7226,"byte_end":7229,"line_start":76,"line_end":76,"column_start":11,"column_end":14},"name":"Buf","qualname":"::buf::buf_impl::Buf","value":"Buf","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":83}],"decl_id":null,"docs":" Read bytes from a buffer.","sig":null,"attributes":[{"value":"/ Read bytes from a buffer.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6509,"byte_end":6538,"line_start":52,"line_end":52,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6539,"byte_end":6542,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ A buffer stores bytes in memory such that read operations are infallible.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6543,"byte_end":6620,"line_start":54,"line_end":54,"column_start":1,"column_end":78}},{"value":"/ The underlying storage may or may not be in contiguous memory. A `Buf` value","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6621,"byte_end":6701,"line_start":55,"line_end":55,"column_start":1,"column_end":81}},{"value":"/ is a cursor into the buffer. Reading from `Buf` advances the cursor","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6702,"byte_end":6773,"line_start":56,"line_end":56,"column_start":1,"column_end":72}},{"value":"/ position. It can be thought of as an efficient `Iterator` for collections of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6774,"byte_end":6854,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/ bytes.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6855,"byte_end":6865,"line_start":58,"line_end":58,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6866,"byte_end":6869,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ The simplest `Buf` is a `&[u8]`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6870,"byte_end":6906,"line_start":60,"line_end":60,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6907,"byte_end":6910,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6911,"byte_end":6918,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6919,"byte_end":6938,"line_start":63,"line_end":63,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6939,"byte_end":6942,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ let mut buf = &b\"hello world\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6943,"byte_end":6981,"line_start":65,"line_end":65,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6982,"byte_end":6985,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(b'h', buf.get_u8());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":6986,"byte_end":7021,"line_start":67,"line_end":67,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(b'e', buf.get_u8());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7022,"byte_end":7057,"line_start":68,"line_end":68,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(b'l', buf.get_u8());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7058,"byte_end":7093,"line_start":69,"line_end":69,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7094,"byte_end":7097,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let mut rest = [0; 8];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7098,"byte_end":7124,"line_start":71,"line_end":71,"column_start":1,"column_end":27}},{"value":"/ buf.copy_to_slice(&mut rest);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7125,"byte_end":7158,"line_start":72,"line_end":72,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7159,"byte_end":7162,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(&rest[..], &b\"lo world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7163,"byte_end":7207,"line_start":74,"line_end":74,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7208,"byte_end":7215,"line_start":75,"line_end":75,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7978,"byte_end":7987,"line_start":102,"line_end":102,"column_start":8,"column_end":17},"name":"remaining","qualname":"::buf::buf_impl::Buf::remaining","value":"pub fn remaining(&Self) -> usize","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Returns the number of bytes between the current position and the end of\n the buffer.","sig":null,"attributes":[{"value":"/ Returns the number of bytes between the current position and the end of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7236,"byte_end":7311,"line_start":77,"line_end":77,"column_start":5,"column_end":80}},{"value":"/ the buffer.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7316,"byte_end":7331,"line_start":78,"line_end":78,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7336,"byte_end":7339,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ This value is greater than or equal to the length of the slice returned","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7344,"byte_end":7419,"line_start":80,"line_end":80,"column_start":5,"column_end":80}},{"value":"/ by `chunk()`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7424,"byte_end":7441,"line_start":81,"line_end":81,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7446,"byte_end":7449,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7454,"byte_end":7468,"line_start":83,"line_end":83,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7473,"byte_end":7476,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7481,"byte_end":7488,"line_start":85,"line_end":85,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7493,"byte_end":7512,"line_start":86,"line_end":86,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7517,"byte_end":7520,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"hello world\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7525,"byte_end":7563,"line_start":88,"line_end":88,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7568,"byte_end":7571,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.remaining(), 11);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7576,"byte_end":7612,"line_start":90,"line_end":90,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7617,"byte_end":7620,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ buf.get_u8();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7625,"byte_end":7642,"line_start":92,"line_end":92,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7647,"byte_end":7650,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.remaining(), 10);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7655,"byte_end":7691,"line_start":94,"line_end":94,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7696,"byte_end":7703,"line_start":95,"line_end":95,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7708,"byte_end":7711,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Implementer notes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7716,"byte_end":7739,"line_start":97,"line_end":97,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7744,"byte_end":7747,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Implementations of `remaining` should ensure that the return value does","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7752,"byte_end":7827,"line_start":99,"line_end":99,"column_start":5,"column_end":80}},{"value":"/ not change unless a call is made to `advance` or any other function that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7832,"byte_end":7908,"line_start":100,"line_end":100,"column_start":5,"column_end":81}},{"value":"/ is documented to change the `Buf`'s current position.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":7913,"byte_end":7970,"line_start":101,"line_end":101,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9005,"byte_end":9010,"line_start":133,"line_end":133,"column_start":8,"column_end":13},"name":"chunk","qualname":"::buf::buf_impl::Buf::chunk","value":"pub fn chunk(&Self) -> &[u8]","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Returns a slice starting at the current position and of length between 0\n and `Buf::remaining()`. Note that this *can* return shorter slice (this allows\n non-continuous internal representation).","sig":null,"attributes":[{"value":"/ Returns a slice starting at the current position and of length between 0","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8010,"byte_end":8086,"line_start":104,"line_end":104,"column_start":5,"column_end":81}},{"value":"/ and `Buf::remaining()`. Note that this *can* return shorter slice (this allows","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8091,"byte_end":8173,"line_start":105,"line_end":105,"column_start":5,"column_end":87}},{"value":"/ non-continuous internal representation).","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8178,"byte_end":8222,"line_start":106,"line_end":106,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8227,"byte_end":8230,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This is a lower level function. Most operations are done with other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8235,"byte_end":8306,"line_start":108,"line_end":108,"column_start":5,"column_end":76}},{"value":"/ functions.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8311,"byte_end":8325,"line_start":109,"line_end":109,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8330,"byte_end":8333,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8338,"byte_end":8352,"line_start":111,"line_end":111,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8357,"byte_end":8360,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8365,"byte_end":8372,"line_start":113,"line_end":113,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8377,"byte_end":8396,"line_start":114,"line_end":114,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8401,"byte_end":8404,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"hello world\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8409,"byte_end":8447,"line_start":116,"line_end":116,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8452,"byte_end":8455,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.chunk(), &b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8460,"byte_end":8509,"line_start":118,"line_end":118,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8514,"byte_end":8517,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ buf.advance(6);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8522,"byte_end":8541,"line_start":120,"line_end":120,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8546,"byte_end":8549,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.chunk(), &b\"world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8554,"byte_end":8597,"line_start":122,"line_end":122,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8602,"byte_end":8609,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8614,"byte_end":8617,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ # Implementer notes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8622,"byte_end":8645,"line_start":125,"line_end":125,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8650,"byte_end":8653,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This function should never panic. Once the end of the buffer is reached,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8658,"byte_end":8734,"line_start":127,"line_end":127,"column_start":5,"column_end":81}},{"value":"/ i.e., `Buf::remaining` returns 0, calls to `chunk()` should return an","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8739,"byte_end":8812,"line_start":128,"line_end":128,"column_start":5,"column_end":78}},{"value":"/ empty slice.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":8817,"byte_end":8833,"line_start":129,"line_end":129,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10381,"byte_end":10396,"line_start":163,"line_end":163,"column_start":8,"column_end":23},"name":"chunks_vectored","qualname":"::buf::buf_impl::Buf::chunks_vectored","value":"pub fn chunks_vectored<'a>(&'a Self, &mut [IoSlice]) -> usize","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Fills `dst` with potentially multiple slices starting at `self`'s\n current position.","sig":null,"attributes":[{"value":"/ Fills `dst` with potentially multiple slices starting at `self`'s","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9033,"byte_end":9102,"line_start":135,"line_end":135,"column_start":5,"column_end":74}},{"value":"/ current position.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9107,"byte_end":9128,"line_start":136,"line_end":136,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9133,"byte_end":9136,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ If the `Buf` is backed by disjoint slices of bytes, `chunk_vectored` enables","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9141,"byte_end":9221,"line_start":138,"line_end":138,"column_start":5,"column_end":85}},{"value":"/ fetching more than one slice at once. `dst` is a slice of `IoSlice`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9226,"byte_end":9297,"line_start":139,"line_end":139,"column_start":5,"column_end":76}},{"value":"/ references, enabling the slice to be directly used with [`writev`]","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9302,"byte_end":9372,"line_start":140,"line_end":140,"column_start":5,"column_end":75}},{"value":"/ without any further conversion. The sum of the lengths of all the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9377,"byte_end":9446,"line_start":141,"line_end":141,"column_start":5,"column_end":74}},{"value":"/ buffers in `dst` will be less than or equal to `Buf::remaining()`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9451,"byte_end":9521,"line_start":142,"line_end":142,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9526,"byte_end":9529,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ The entries in `dst` will be overwritten, but the data **contained** by","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9534,"byte_end":9609,"line_start":144,"line_end":144,"column_start":5,"column_end":80}},{"value":"/ the slices **will not** be modified. If `chunk_vectored` does not fill every","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9614,"byte_end":9694,"line_start":145,"line_end":145,"column_start":5,"column_end":85}},{"value":"/ entry in `dst`, then `dst` is guaranteed to contain all remaining slices","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9699,"byte_end":9775,"line_start":146,"line_end":146,"column_start":5,"column_end":81}},{"value":"/ in `self.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9780,"byte_end":9793,"line_start":147,"line_end":147,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9798,"byte_end":9801,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ This is a lower level function. Most operations are done with other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9806,"byte_end":9877,"line_start":149,"line_end":149,"column_start":5,"column_end":76}},{"value":"/ functions.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9882,"byte_end":9896,"line_start":150,"line_end":150,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9901,"byte_end":9904,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Implementer notes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9909,"byte_end":9932,"line_start":152,"line_end":152,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9937,"byte_end":9940,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ This function should never panic. Once the end of the buffer is reached,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":9945,"byte_end":10021,"line_start":154,"line_end":154,"column_start":5,"column_end":81}},{"value":"/ i.e., `Buf::remaining` returns 0, calls to `chunk_vectored` must return 0","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10026,"byte_end":10103,"line_start":155,"line_end":155,"column_start":5,"column_end":82}},{"value":"/ without mutating `dst`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10108,"byte_end":10135,"line_start":156,"line_end":156,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10140,"byte_end":10143,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Implementations should also take care to properly handle being called","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10148,"byte_end":10221,"line_start":158,"line_end":158,"column_start":5,"column_end":78}},{"value":"/ with `dst` being a zero length slice.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10226,"byte_end":10267,"line_start":159,"line_end":159,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10272,"byte_end":10275,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ [`writev`]: http://man7.org/linux/man-pages/man2/readv.2.html","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10280,"byte_end":10345,"line_start":161,"line_end":161,"column_start":5,"column_end":70}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10350,"byte_end":10373,"line_start":162,"line_end":162,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11540,"byte_end":11547,"line_start":206,"line_end":206,"column_start":8,"column_end":15},"name":"advance","qualname":"::buf::buf_impl::Buf::advance","value":"pub fn advance(&mut Self, usize)","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Advance the internal cursor of the Buf","sig":null,"attributes":[{"value":"/ Advance the internal cursor of the Buf","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10657,"byte_end":10699,"line_start":176,"line_end":176,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10704,"byte_end":10707,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ The next call to `chunk()` will return a slice starting `cnt` bytes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10712,"byte_end":10783,"line_start":178,"line_end":178,"column_start":5,"column_end":76}},{"value":"/ further into the underlying buffer.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10788,"byte_end":10827,"line_start":179,"line_end":179,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10832,"byte_end":10835,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10840,"byte_end":10854,"line_start":181,"line_end":181,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10859,"byte_end":10862,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10867,"byte_end":10874,"line_start":183,"line_end":183,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10879,"byte_end":10898,"line_start":184,"line_end":184,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10903,"byte_end":10906,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"hello world\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10911,"byte_end":10949,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10954,"byte_end":10957,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.chunk(), &b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":10962,"byte_end":11011,"line_start":188,"line_end":188,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11016,"byte_end":11019,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ buf.advance(6);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11024,"byte_end":11043,"line_start":190,"line_end":190,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11048,"byte_end":11051,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.chunk(), &b\"world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11056,"byte_end":11099,"line_start":192,"line_end":192,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11104,"byte_end":11111,"line_start":193,"line_end":193,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11116,"byte_end":11119,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11124,"byte_end":11136,"line_start":195,"line_end":195,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11141,"byte_end":11144,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ This function **may** panic if `cnt > self.remaining()`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11149,"byte_end":11209,"line_start":197,"line_end":197,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11214,"byte_end":11217,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Implementer notes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11222,"byte_end":11245,"line_start":199,"line_end":199,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11250,"byte_end":11253,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ It is recommended for implementations of `advance` to panic if `cnt >","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11258,"byte_end":11331,"line_start":201,"line_end":201,"column_start":5,"column_end":78}},{"value":"/ self.remaining()`. If the implementation does not panic, the call must","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11336,"byte_end":11410,"line_start":202,"line_end":202,"column_start":5,"column_end":79}},{"value":"/ behave as if `cnt == self.remaining()`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11415,"byte_end":11458,"line_start":203,"line_end":203,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11463,"byte_end":11466,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ A call with `cnt == 0` should never panic and be a no-op.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11471,"byte_end":11532,"line_start":205,"line_end":205,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11950,"byte_end":11963,"line_start":225,"line_end":225,"column_start":8,"column_end":21},"name":"has_remaining","qualname":"::buf::buf_impl::Buf::has_remaining","value":"pub fn has_remaining(&Self) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Returns true if there are any more bytes to consume","sig":null,"attributes":[{"value":"/ Returns true if there are any more bytes to consume","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11577,"byte_end":11632,"line_start":208,"line_end":208,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11637,"byte_end":11640,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `self.remaining() != 0`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11645,"byte_end":11695,"line_start":210,"line_end":210,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11700,"byte_end":11703,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11708,"byte_end":11722,"line_start":212,"line_end":212,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11727,"byte_end":11730,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11735,"byte_end":11742,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11747,"byte_end":11766,"line_start":215,"line_end":215,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11771,"byte_end":11774,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"a\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11779,"byte_end":11807,"line_start":217,"line_end":217,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11812,"byte_end":11815,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ assert!(buf.has_remaining());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11820,"byte_end":11853,"line_start":219,"line_end":219,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11858,"byte_end":11861,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ buf.get_u8();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11866,"byte_end":11883,"line_start":221,"line_end":221,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11888,"byte_end":11891,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ assert!(!buf.has_remaining());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11896,"byte_end":11930,"line_start":223,"line_end":223,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":11935,"byte_end":11942,"line_start":224,"line_end":224,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12588,"byte_end":12601,"line_start":250,"line_end":250,"column_start":8,"column_end":21},"name":"copy_to_slice","qualname":"::buf::buf_impl::Buf::copy_to_slice","value":"pub fn copy_to_slice(&mut Self, &mut [u8])","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Copies bytes from `self` into `dst`.","sig":null,"attributes":[{"value":"/ Copies bytes from `self` into `dst`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12021,"byte_end":12061,"line_start":229,"line_end":229,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12066,"byte_end":12069,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The cursor is advanced by the number of bytes copied. `self` must have","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12074,"byte_end":12148,"line_start":231,"line_end":231,"column_start":5,"column_end":79}},{"value":"/ enough remaining bytes to fill `dst`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12153,"byte_end":12194,"line_start":232,"line_end":232,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12199,"byte_end":12202,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12207,"byte_end":12221,"line_start":234,"line_end":234,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12226,"byte_end":12229,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12234,"byte_end":12241,"line_start":236,"line_end":236,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12246,"byte_end":12265,"line_start":237,"line_end":237,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12270,"byte_end":12273,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"hello world\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12278,"byte_end":12316,"line_start":239,"line_end":239,"column_start":5,"column_end":43}},{"value":"/ let mut dst = [0; 5];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12321,"byte_end":12346,"line_start":240,"line_end":240,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12351,"byte_end":12354,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ buf.copy_to_slice(&mut dst);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12359,"byte_end":12391,"line_start":242,"line_end":242,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(&b\"hello\"[..], &dst);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12396,"byte_end":12432,"line_start":243,"line_end":243,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(6, buf.remaining());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12437,"byte_end":12472,"line_start":244,"line_end":244,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12477,"byte_end":12484,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12489,"byte_end":12492,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12497,"byte_end":12509,"line_start":247,"line_end":247,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12514,"byte_end":12517,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ This function panics if `self.remaining() < dst.len()`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":12522,"byte_end":12580,"line_start":249,"line_end":249,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13452,"byte_end":13458,"line_start":287,"line_end":287,"column_start":8,"column_end":14},"name":"get_u8","qualname":"::buf::buf_impl::Buf::get_u8","value":"pub fn get_u8(&mut Self) -> u8","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an unsigned 8 bit integer from `self`.","sig":null,"attributes":[{"value":"/ Gets an unsigned 8 bit integer from `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13064,"byte_end":13111,"line_start":271,"line_end":271,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13116,"byte_end":13119,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 1.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13124,"byte_end":13166,"line_start":273,"line_end":273,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13171,"byte_end":13174,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13179,"byte_end":13193,"line_start":275,"line_end":275,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13198,"byte_end":13201,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13206,"byte_end":13213,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13218,"byte_end":13237,"line_start":278,"line_end":278,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13242,"byte_end":13245,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x08 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13250,"byte_end":13287,"line_start":280,"line_end":280,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(8, buf.get_u8());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13292,"byte_end":13324,"line_start":281,"line_end":281,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13329,"byte_end":13336,"line_start":282,"line_end":282,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13341,"byte_end":13344,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13349,"byte_end":13361,"line_start":284,"line_end":284,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13366,"byte_end":13369,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is no more remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13374,"byte_end":13444,"line_start":286,"line_end":286,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13986,"byte_end":13992,"line_start":310,"line_end":310,"column_start":8,"column_end":14},"name":"get_i8","qualname":"::buf::buf_impl::Buf::get_i8","value":"pub fn get_i8(&mut Self) -> i8","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets a signed 8 bit integer from `self`.","sig":null,"attributes":[{"value":"/ Gets a signed 8 bit integer from `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13601,"byte_end":13645,"line_start":294,"line_end":294,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13650,"byte_end":13653,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 1.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13658,"byte_end":13700,"line_start":296,"line_end":296,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13705,"byte_end":13708,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13713,"byte_end":13727,"line_start":298,"line_end":298,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13732,"byte_end":13735,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13740,"byte_end":13747,"line_start":300,"line_end":300,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13752,"byte_end":13771,"line_start":301,"line_end":301,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13776,"byte_end":13779,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x08 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13784,"byte_end":13821,"line_start":303,"line_end":303,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(8, buf.get_i8());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13826,"byte_end":13858,"line_start":304,"line_end":304,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13863,"byte_end":13870,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13875,"byte_end":13878,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13883,"byte_end":13895,"line_start":307,"line_end":307,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13900,"byte_end":13903,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is no more remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":13908,"byte_end":13978,"line_start":309,"line_end":309,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14568,"byte_end":14575,"line_start":333,"line_end":333,"column_start":8,"column_end":15},"name":"get_u16","qualname":"::buf::buf_impl::Buf::get_u16","value":"pub fn get_u16(&mut Self) -> u16","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an unsigned 16 bit integer from `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an unsigned 16 bit integer from `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14141,"byte_end":14214,"line_start":317,"line_end":317,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14219,"byte_end":14222,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 2.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14227,"byte_end":14269,"line_start":319,"line_end":319,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14274,"byte_end":14277,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14282,"byte_end":14296,"line_start":321,"line_end":321,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14301,"byte_end":14304,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14309,"byte_end":14316,"line_start":323,"line_end":323,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14321,"byte_end":14340,"line_start":324,"line_end":324,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14345,"byte_end":14348,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x08\\x09 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14353,"byte_end":14394,"line_start":326,"line_end":326,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(0x0809, buf.get_u16());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14399,"byte_end":14437,"line_start":327,"line_end":327,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14442,"byte_end":14449,"line_start":328,"line_end":328,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14454,"byte_end":14457,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14462,"byte_end":14474,"line_start":330,"line_end":330,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14479,"byte_end":14482,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14487,"byte_end":14560,"line_start":332,"line_end":332,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15089,"byte_end":15099,"line_start":353,"line_end":353,"column_start":8,"column_end":18},"name":"get_u16_le","qualname":"::buf::buf_impl::Buf::get_u16_le","value":"pub fn get_u16_le(&mut Self) -> u16","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an unsigned 16 bit integer from `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an unsigned 16 bit integer from `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14656,"byte_end":14732,"line_start":337,"line_end":337,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14737,"byte_end":14740,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 2.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14745,"byte_end":14787,"line_start":339,"line_end":339,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14792,"byte_end":14795,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14800,"byte_end":14814,"line_start":341,"line_end":341,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14819,"byte_end":14822,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14827,"byte_end":14834,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14839,"byte_end":14858,"line_start":344,"line_end":344,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14863,"byte_end":14866,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x09\\x08 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14871,"byte_end":14912,"line_start":346,"line_end":346,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(0x0809, buf.get_u16_le());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14917,"byte_end":14958,"line_start":347,"line_end":347,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14963,"byte_end":14970,"line_start":348,"line_end":348,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14975,"byte_end":14978,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":14983,"byte_end":14995,"line_start":350,"line_end":350,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15000,"byte_end":15003,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15008,"byte_end":15081,"line_start":352,"line_end":352,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15604,"byte_end":15611,"line_start":373,"line_end":373,"column_start":8,"column_end":15},"name":"get_i16","qualname":"::buf::buf_impl::Buf::get_i16","value":"pub fn get_i16(&mut Self) -> i16","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets a signed 16 bit integer from `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Gets a signed 16 bit integer from `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15180,"byte_end":15250,"line_start":357,"line_end":357,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15255,"byte_end":15258,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 2.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15263,"byte_end":15305,"line_start":359,"line_end":359,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15310,"byte_end":15313,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15318,"byte_end":15332,"line_start":361,"line_end":361,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15337,"byte_end":15340,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15345,"byte_end":15352,"line_start":363,"line_end":363,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15357,"byte_end":15376,"line_start":364,"line_end":364,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15381,"byte_end":15384,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x08\\x09 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15389,"byte_end":15430,"line_start":366,"line_end":366,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(0x0809, buf.get_i16());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15435,"byte_end":15473,"line_start":367,"line_end":367,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15478,"byte_end":15485,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15490,"byte_end":15493,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15498,"byte_end":15510,"line_start":370,"line_end":370,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15515,"byte_end":15518,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15523,"byte_end":15596,"line_start":372,"line_end":372,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16122,"byte_end":16132,"line_start":393,"line_end":393,"column_start":8,"column_end":18},"name":"get_i16_le","qualname":"::buf::buf_impl::Buf::get_i16_le","value":"pub fn get_i16_le(&mut Self) -> i16","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets a signed 16 bit integer from `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Gets a signed 16 bit integer from `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15692,"byte_end":15765,"line_start":377,"line_end":377,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15770,"byte_end":15773,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 2.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15778,"byte_end":15820,"line_start":379,"line_end":379,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15825,"byte_end":15828,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15833,"byte_end":15847,"line_start":381,"line_end":381,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15852,"byte_end":15855,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15860,"byte_end":15867,"line_start":383,"line_end":383,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15872,"byte_end":15891,"line_start":384,"line_end":384,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15896,"byte_end":15899,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x09\\x08 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15904,"byte_end":15945,"line_start":386,"line_end":386,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(0x0809, buf.get_i16_le());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15950,"byte_end":15991,"line_start":387,"line_end":387,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":15996,"byte_end":16003,"line_start":388,"line_end":388,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16008,"byte_end":16011,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16016,"byte_end":16028,"line_start":390,"line_end":390,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16033,"byte_end":16036,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16041,"byte_end":16114,"line_start":392,"line_end":392,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16656,"byte_end":16663,"line_start":413,"line_end":413,"column_start":8,"column_end":15},"name":"get_u32","qualname":"::buf::buf_impl::Buf::get_u32","value":"pub fn get_u32(&mut Self) -> u32","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an unsigned 32 bit integer from `self` in the big-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an unsigned 32 bit integer from `self` in the big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16213,"byte_end":16290,"line_start":397,"line_end":397,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16295,"byte_end":16298,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 4.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16303,"byte_end":16345,"line_start":399,"line_end":399,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16350,"byte_end":16353,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16358,"byte_end":16372,"line_start":401,"line_end":401,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16377,"byte_end":16380,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16385,"byte_end":16392,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16397,"byte_end":16416,"line_start":404,"line_end":404,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16421,"byte_end":16424,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16429,"byte_end":16478,"line_start":406,"line_end":406,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(0x0809A0A1, buf.get_u32());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16483,"byte_end":16525,"line_start":407,"line_end":407,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16530,"byte_end":16537,"line_start":408,"line_end":408,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16542,"byte_end":16545,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16550,"byte_end":16562,"line_start":410,"line_end":410,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16567,"byte_end":16570,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16575,"byte_end":16648,"line_start":412,"line_end":412,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17193,"byte_end":17203,"line_start":433,"line_end":433,"column_start":8,"column_end":18},"name":"get_u32_le","qualname":"::buf::buf_impl::Buf::get_u32_le","value":"pub fn get_u32_le(&mut Self) -> u32","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an unsigned 32 bit integer from `self` in the little-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an unsigned 32 bit integer from `self` in the little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16744,"byte_end":16824,"line_start":417,"line_end":417,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16829,"byte_end":16832,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 4.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16837,"byte_end":16879,"line_start":419,"line_end":419,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16884,"byte_end":16887,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16892,"byte_end":16906,"line_start":421,"line_end":421,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16911,"byte_end":16914,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16919,"byte_end":16926,"line_start":423,"line_end":423,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16931,"byte_end":16950,"line_start":424,"line_end":424,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16955,"byte_end":16958,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":16963,"byte_end":17012,"line_start":426,"line_end":426,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(0x0809A0A1, buf.get_u32_le());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17017,"byte_end":17062,"line_start":427,"line_end":427,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17067,"byte_end":17074,"line_start":428,"line_end":428,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17079,"byte_end":17082,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17087,"byte_end":17099,"line_start":430,"line_end":430,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17104,"byte_end":17107,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17112,"byte_end":17185,"line_start":432,"line_end":432,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17720,"byte_end":17727,"line_start":453,"line_end":453,"column_start":8,"column_end":15},"name":"get_i32","qualname":"::buf::buf_impl::Buf::get_i32","value":"pub fn get_i32(&mut Self) -> i32","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets a signed 32 bit integer from `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Gets a signed 32 bit integer from `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17284,"byte_end":17354,"line_start":437,"line_end":437,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17359,"byte_end":17362,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 4.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17367,"byte_end":17409,"line_start":439,"line_end":439,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17414,"byte_end":17417,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17422,"byte_end":17436,"line_start":441,"line_end":441,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17441,"byte_end":17444,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17449,"byte_end":17456,"line_start":443,"line_end":443,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17461,"byte_end":17480,"line_start":444,"line_end":444,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17485,"byte_end":17488,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17493,"byte_end":17542,"line_start":446,"line_end":446,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(0x0809A0A1, buf.get_i32());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17547,"byte_end":17589,"line_start":447,"line_end":447,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17594,"byte_end":17601,"line_start":448,"line_end":448,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17606,"byte_end":17609,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17614,"byte_end":17626,"line_start":450,"line_end":450,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17631,"byte_end":17634,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17639,"byte_end":17712,"line_start":452,"line_end":452,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18250,"byte_end":18260,"line_start":473,"line_end":473,"column_start":8,"column_end":18},"name":"get_i32_le","qualname":"::buf::buf_impl::Buf::get_i32_le","value":"pub fn get_i32_le(&mut Self) -> i32","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets a signed 32 bit integer from `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Gets a signed 32 bit integer from `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17808,"byte_end":17881,"line_start":457,"line_end":457,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17886,"byte_end":17889,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 4.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17894,"byte_end":17936,"line_start":459,"line_end":459,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17941,"byte_end":17944,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17949,"byte_end":17963,"line_start":461,"line_end":461,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17968,"byte_end":17971,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17976,"byte_end":17983,"line_start":463,"line_end":463,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":17988,"byte_end":18007,"line_start":464,"line_end":464,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18012,"byte_end":18015,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18020,"byte_end":18069,"line_start":466,"line_end":466,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(0x0809A0A1, buf.get_i32_le());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18074,"byte_end":18119,"line_start":467,"line_end":467,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18124,"byte_end":18131,"line_start":468,"line_end":468,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18136,"byte_end":18139,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18144,"byte_end":18156,"line_start":470,"line_end":470,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18161,"byte_end":18164,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18169,"byte_end":18242,"line_start":472,"line_end":472,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18804,"byte_end":18811,"line_start":493,"line_end":493,"column_start":8,"column_end":15},"name":"get_u64","qualname":"::buf::buf_impl::Buf::get_u64","value":"pub fn get_u64(&mut Self) -> u64","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an unsigned 64 bit integer from `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an unsigned 64 bit integer from `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18341,"byte_end":18414,"line_start":477,"line_end":477,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18419,"byte_end":18422,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18427,"byte_end":18469,"line_start":479,"line_end":479,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18474,"byte_end":18477,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18482,"byte_end":18496,"line_start":481,"line_end":481,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18501,"byte_end":18504,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18509,"byte_end":18516,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18521,"byte_end":18540,"line_start":484,"line_end":484,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18545,"byte_end":18548,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18553,"byte_end":18618,"line_start":486,"line_end":486,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(0x0102030405060708, buf.get_u64());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18623,"byte_end":18673,"line_start":487,"line_end":487,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18678,"byte_end":18685,"line_start":488,"line_end":488,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18690,"byte_end":18693,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18698,"byte_end":18710,"line_start":490,"line_end":490,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18715,"byte_end":18718,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18723,"byte_end":18796,"line_start":492,"line_end":492,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19361,"byte_end":19371,"line_start":513,"line_end":513,"column_start":8,"column_end":18},"name":"get_u64_le","qualname":"::buf::buf_impl::Buf::get_u64_le","value":"pub fn get_u64_le(&mut Self) -> u64","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an unsigned 64 bit integer from `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an unsigned 64 bit integer from `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18892,"byte_end":18968,"line_start":497,"line_end":497,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18973,"byte_end":18976,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":18981,"byte_end":19023,"line_start":499,"line_end":499,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19028,"byte_end":19031,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19036,"byte_end":19050,"line_start":501,"line_end":501,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19055,"byte_end":19058,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19063,"byte_end":19070,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19075,"byte_end":19094,"line_start":504,"line_end":504,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19099,"byte_end":19102,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19107,"byte_end":19172,"line_start":506,"line_end":506,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(0x0102030405060708, buf.get_u64_le());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19177,"byte_end":19230,"line_start":507,"line_end":507,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19235,"byte_end":19242,"line_start":508,"line_end":508,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19247,"byte_end":19250,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19255,"byte_end":19267,"line_start":510,"line_end":510,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19272,"byte_end":19275,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19280,"byte_end":19353,"line_start":512,"line_end":512,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19912,"byte_end":19919,"line_start":533,"line_end":533,"column_start":8,"column_end":15},"name":"get_i64","qualname":"::buf::buf_impl::Buf::get_i64","value":"pub fn get_i64(&mut Self) -> i64","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets a signed 64 bit integer from `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Gets a signed 64 bit integer from `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19452,"byte_end":19522,"line_start":517,"line_end":517,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19527,"byte_end":19530,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19535,"byte_end":19577,"line_start":519,"line_end":519,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19582,"byte_end":19585,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19590,"byte_end":19604,"line_start":521,"line_end":521,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19609,"byte_end":19612,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19617,"byte_end":19624,"line_start":523,"line_end":523,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19629,"byte_end":19648,"line_start":524,"line_end":524,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19653,"byte_end":19656,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19661,"byte_end":19726,"line_start":526,"line_end":526,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(0x0102030405060708, buf.get_i64());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19731,"byte_end":19781,"line_start":527,"line_end":527,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19786,"byte_end":19793,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19798,"byte_end":19801,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19806,"byte_end":19818,"line_start":530,"line_end":530,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19823,"byte_end":19826,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":19831,"byte_end":19904,"line_start":532,"line_end":532,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20466,"byte_end":20476,"line_start":553,"line_end":553,"column_start":8,"column_end":18},"name":"get_i64_le","qualname":"::buf::buf_impl::Buf::get_i64_le","value":"pub fn get_i64_le(&mut Self) -> i64","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets a signed 64 bit integer from `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Gets a signed 64 bit integer from `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20000,"byte_end":20073,"line_start":537,"line_end":537,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20078,"byte_end":20081,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20086,"byte_end":20128,"line_start":539,"line_end":539,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20133,"byte_end":20136,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20141,"byte_end":20155,"line_start":541,"line_end":541,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20160,"byte_end":20163,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20168,"byte_end":20175,"line_start":543,"line_end":543,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20180,"byte_end":20199,"line_start":544,"line_end":544,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20204,"byte_end":20207,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20212,"byte_end":20277,"line_start":546,"line_end":546,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(0x0102030405060708, buf.get_i64_le());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20282,"byte_end":20335,"line_start":547,"line_end":547,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20340,"byte_end":20347,"line_start":548,"line_end":548,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20352,"byte_end":20355,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20360,"byte_end":20372,"line_start":550,"line_end":550,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20377,"byte_end":20380,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20385,"byte_end":20458,"line_start":552,"line_end":552,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21071,"byte_end":21079,"line_start":573,"line_end":573,"column_start":8,"column_end":16},"name":"get_u128","qualname":"::buf::buf_impl::Buf::get_u128","value":"pub fn get_u128(&mut Self) -> u128","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an unsigned 128 bit integer from `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an unsigned 128 bit integer from `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20557,"byte_end":20631,"line_start":557,"line_end":557,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20636,"byte_end":20639,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 16.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20644,"byte_end":20687,"line_start":559,"line_end":559,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20692,"byte_end":20695,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20700,"byte_end":20714,"line_start":561,"line_end":561,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20719,"byte_end":20722,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20727,"byte_end":20734,"line_start":563,"line_end":563,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20739,"byte_end":20758,"line_start":564,"line_end":564,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20763,"byte_end":20766,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20771,"byte_end":20868,"line_start":566,"line_end":566,"column_start":5,"column_end":102}},{"value":"/ assert_eq!(0x01020304050607080910111213141516, buf.get_u128());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20873,"byte_end":20940,"line_start":567,"line_end":567,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20945,"byte_end":20952,"line_start":568,"line_end":568,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20957,"byte_end":20960,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20965,"byte_end":20977,"line_start":570,"line_end":570,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20982,"byte_end":20985,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":20990,"byte_end":21063,"line_start":572,"line_end":572,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21682,"byte_end":21693,"line_start":593,"line_end":593,"column_start":8,"column_end":19},"name":"get_u128_le","qualname":"::buf::buf_impl::Buf::get_u128_le","value":"pub fn get_u128_le(&mut Self) -> u128","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an unsigned 128 bit integer from `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an unsigned 128 bit integer from `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21162,"byte_end":21239,"line_start":577,"line_end":577,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21244,"byte_end":21247,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 16.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21252,"byte_end":21295,"line_start":579,"line_end":579,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21300,"byte_end":21303,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21308,"byte_end":21322,"line_start":581,"line_end":581,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21327,"byte_end":21330,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21335,"byte_end":21342,"line_start":583,"line_end":583,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21347,"byte_end":21366,"line_start":584,"line_end":584,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21371,"byte_end":21374,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21379,"byte_end":21476,"line_start":586,"line_end":586,"column_start":5,"column_end":102}},{"value":"/ assert_eq!(0x01020304050607080910111213141516, buf.get_u128_le());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21481,"byte_end":21551,"line_start":587,"line_end":587,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21556,"byte_end":21563,"line_start":588,"line_end":588,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21568,"byte_end":21571,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21576,"byte_end":21588,"line_start":590,"line_end":590,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21593,"byte_end":21596,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21601,"byte_end":21674,"line_start":592,"line_end":592,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22287,"byte_end":22295,"line_start":613,"line_end":613,"column_start":8,"column_end":16},"name":"get_i128","qualname":"::buf::buf_impl::Buf::get_i128","value":"pub fn get_i128(&mut Self) -> i128","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets a signed 128 bit integer from `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Gets a signed 128 bit integer from `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21776,"byte_end":21847,"line_start":597,"line_end":597,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21852,"byte_end":21855,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 16.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21860,"byte_end":21903,"line_start":599,"line_end":599,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21908,"byte_end":21911,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21916,"byte_end":21930,"line_start":601,"line_end":601,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21935,"byte_end":21938,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21943,"byte_end":21950,"line_start":603,"line_end":603,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21955,"byte_end":21974,"line_start":604,"line_end":604,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21979,"byte_end":21982,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":21987,"byte_end":22084,"line_start":606,"line_end":606,"column_start":5,"column_end":102}},{"value":"/ assert_eq!(0x01020304050607080910111213141516, buf.get_i128());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22089,"byte_end":22156,"line_start":607,"line_end":607,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22161,"byte_end":22168,"line_start":608,"line_end":608,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22173,"byte_end":22176,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22181,"byte_end":22193,"line_start":610,"line_end":610,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22198,"byte_end":22201,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22206,"byte_end":22279,"line_start":612,"line_end":612,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22895,"byte_end":22906,"line_start":633,"line_end":633,"column_start":8,"column_end":19},"name":"get_i128_le","qualname":"::buf::buf_impl::Buf::get_i128_le","value":"pub fn get_i128_le(&mut Self) -> i128","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets a signed 128 bit integer from `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Gets a signed 128 bit integer from `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22378,"byte_end":22452,"line_start":617,"line_end":617,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22457,"byte_end":22460,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 16.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22465,"byte_end":22508,"line_start":619,"line_end":619,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22513,"byte_end":22516,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22521,"byte_end":22535,"line_start":621,"line_end":621,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22540,"byte_end":22543,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22548,"byte_end":22555,"line_start":623,"line_end":623,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22560,"byte_end":22579,"line_start":624,"line_end":624,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22584,"byte_end":22587,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22592,"byte_end":22689,"line_start":626,"line_end":626,"column_start":5,"column_end":102}},{"value":"/ assert_eq!(0x01020304050607080910111213141516, buf.get_i128_le());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22694,"byte_end":22764,"line_start":627,"line_end":627,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22769,"byte_end":22776,"line_start":628,"line_end":628,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22781,"byte_end":22784,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22789,"byte_end":22801,"line_start":630,"line_end":630,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22806,"byte_end":22809,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22814,"byte_end":22887,"line_start":632,"line_end":632,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23431,"byte_end":23439,"line_start":653,"line_end":653,"column_start":8,"column_end":16},"name":"get_uint","qualname":"::buf::buf_impl::Buf::get_uint","value":"pub fn get_uint(&mut Self, usize) -> u64","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an unsigned n-byte integer from `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an unsigned n-byte integer from `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":22989,"byte_end":23062,"line_start":637,"line_end":637,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23067,"byte_end":23070,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by `nbytes`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23075,"byte_end":23124,"line_start":639,"line_end":639,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23129,"byte_end":23132,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23137,"byte_end":23151,"line_start":641,"line_end":641,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23156,"byte_end":23159,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23164,"byte_end":23171,"line_start":643,"line_end":643,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23176,"byte_end":23195,"line_start":644,"line_end":644,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23200,"byte_end":23203,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x01\\x02\\x03 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23208,"byte_end":23253,"line_start":646,"line_end":646,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(0x010203, buf.get_uint(3));","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23258,"byte_end":23300,"line_start":647,"line_end":647,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23305,"byte_end":23312,"line_start":648,"line_end":648,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23317,"byte_end":23320,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23325,"byte_end":23337,"line_start":650,"line_end":650,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23342,"byte_end":23345,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23350,"byte_end":23423,"line_start":652,"line_end":652,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23982,"byte_end":23993,"line_start":673,"line_end":673,"column_start":8,"column_end":19},"name":"get_uint_le","qualname":"::buf::buf_impl::Buf::get_uint_le","value":"pub fn get_uint_le(&mut Self, usize) -> u64","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an unsigned n-byte integer from `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an unsigned n-byte integer from `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23534,"byte_end":23610,"line_start":657,"line_end":657,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23615,"byte_end":23618,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by `nbytes`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23623,"byte_end":23672,"line_start":659,"line_end":659,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23677,"byte_end":23680,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23685,"byte_end":23699,"line_start":661,"line_end":661,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23704,"byte_end":23707,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23712,"byte_end":23719,"line_start":663,"line_end":663,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23724,"byte_end":23743,"line_start":664,"line_end":664,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23748,"byte_end":23751,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x03\\x02\\x01 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23756,"byte_end":23801,"line_start":666,"line_end":666,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(0x010203, buf.get_uint_le(3));","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23806,"byte_end":23851,"line_start":667,"line_end":667,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23856,"byte_end":23863,"line_start":668,"line_end":668,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23868,"byte_end":23871,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23876,"byte_end":23888,"line_start":670,"line_end":670,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23893,"byte_end":23896,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":23901,"byte_end":23974,"line_start":672,"line_end":672,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24526,"byte_end":24533,"line_start":693,"line_end":693,"column_start":8,"column_end":15},"name":"get_int","qualname":"::buf::buf_impl::Buf::get_int","value":"pub fn get_int(&mut Self, usize) -> i64","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets a signed n-byte integer from `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Gets a signed n-byte integer from `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24088,"byte_end":24158,"line_start":677,"line_end":677,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24163,"byte_end":24166,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by `nbytes`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24171,"byte_end":24220,"line_start":679,"line_end":679,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24225,"byte_end":24228,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24233,"byte_end":24247,"line_start":681,"line_end":681,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24252,"byte_end":24255,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24260,"byte_end":24267,"line_start":683,"line_end":683,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24272,"byte_end":24291,"line_start":684,"line_end":684,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24296,"byte_end":24299,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x01\\x02\\x03 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24304,"byte_end":24349,"line_start":686,"line_end":686,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(0x010203, buf.get_int(3));","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24354,"byte_end":24395,"line_start":687,"line_end":687,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24400,"byte_end":24407,"line_start":688,"line_end":688,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24412,"byte_end":24415,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24420,"byte_end":24432,"line_start":690,"line_end":690,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24437,"byte_end":24440,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24445,"byte_end":24518,"line_start":692,"line_end":692,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25072,"byte_end":25082,"line_start":713,"line_end":713,"column_start":8,"column_end":18},"name":"get_int_le","qualname":"::buf::buf_impl::Buf::get_int_le","value":"pub fn get_int_le(&mut Self, usize) -> i64","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets a signed n-byte integer from `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Gets a signed n-byte integer from `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24628,"byte_end":24701,"line_start":697,"line_end":697,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24706,"byte_end":24709,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by `nbytes`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24714,"byte_end":24763,"line_start":699,"line_end":699,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24768,"byte_end":24771,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24776,"byte_end":24790,"line_start":701,"line_end":701,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24795,"byte_end":24798,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24803,"byte_end":24810,"line_start":703,"line_end":703,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24815,"byte_end":24834,"line_start":704,"line_end":704,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24839,"byte_end":24842,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x03\\x02\\x01 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24847,"byte_end":24892,"line_start":706,"line_end":706,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(0x010203, buf.get_int_le(3));","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24897,"byte_end":24941,"line_start":707,"line_end":707,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24946,"byte_end":24953,"line_start":708,"line_end":708,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24958,"byte_end":24961,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24966,"byte_end":24978,"line_start":710,"line_end":710,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24983,"byte_end":24986,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":24991,"byte_end":25064,"line_start":712,"line_end":712,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25653,"byte_end":25660,"line_start":734,"line_end":734,"column_start":8,"column_end":15},"name":"get_f32","qualname":"::buf::buf_impl::Buf::get_f32","value":"pub fn get_f32(&mut Self) -> f32","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an IEEE754 single-precision (4 bytes) floating point number from\n `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an IEEE754 single-precision (4 bytes) floating point number from","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25177,"byte_end":25250,"line_start":717,"line_end":717,"column_start":5,"column_end":78}},{"value":"/ `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25255,"byte_end":25291,"line_start":718,"line_end":718,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25296,"byte_end":25299,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 4.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25304,"byte_end":25346,"line_start":720,"line_end":720,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25351,"byte_end":25354,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25359,"byte_end":25373,"line_start":722,"line_end":722,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25378,"byte_end":25381,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25386,"byte_end":25393,"line_start":724,"line_end":724,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25398,"byte_end":25417,"line_start":725,"line_end":725,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25422,"byte_end":25425,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x3F\\x99\\x99\\x9A hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25430,"byte_end":25479,"line_start":727,"line_end":727,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1.2f32, buf.get_f32());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25484,"byte_end":25522,"line_start":728,"line_end":728,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25527,"byte_end":25534,"line_start":729,"line_end":729,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25539,"byte_end":25542,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25547,"byte_end":25559,"line_start":731,"line_end":731,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25564,"byte_end":25567,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25572,"byte_end":25645,"line_start":733,"line_end":733,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26218,"byte_end":26228,"line_start":755,"line_end":755,"column_start":8,"column_end":18},"name":"get_f32_le","qualname":"::buf::buf_impl::Buf::get_f32_le","value":"pub fn get_f32_le(&mut Self) -> f32","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an IEEE754 single-precision (4 bytes) floating point number from\n `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an IEEE754 single-precision (4 bytes) floating point number from","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25736,"byte_end":25809,"line_start":738,"line_end":738,"column_start":5,"column_end":78}},{"value":"/ `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25814,"byte_end":25853,"line_start":739,"line_end":739,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25858,"byte_end":25861,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 4.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25866,"byte_end":25908,"line_start":741,"line_end":741,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25913,"byte_end":25916,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25921,"byte_end":25935,"line_start":743,"line_end":743,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25940,"byte_end":25943,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25948,"byte_end":25955,"line_start":745,"line_end":745,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25960,"byte_end":25979,"line_start":746,"line_end":746,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25984,"byte_end":25987,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x9A\\x99\\x99\\x3F hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":25992,"byte_end":26041,"line_start":748,"line_end":748,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1.2f32, buf.get_f32_le());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26046,"byte_end":26087,"line_start":749,"line_end":749,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26092,"byte_end":26099,"line_start":750,"line_end":750,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26104,"byte_end":26107,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26112,"byte_end":26124,"line_start":752,"line_end":752,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26129,"byte_end":26132,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26137,"byte_end":26210,"line_start":754,"line_end":754,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26799,"byte_end":26806,"line_start":776,"line_end":776,"column_start":8,"column_end":15},"name":"get_f64","qualname":"::buf::buf_impl::Buf::get_f64","value":"pub fn get_f64(&mut Self) -> f64","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an IEEE754 double-precision (8 bytes) floating point number from\n `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an IEEE754 double-precision (8 bytes) floating point number from","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26307,"byte_end":26380,"line_start":759,"line_end":759,"column_start":5,"column_end":78}},{"value":"/ `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26385,"byte_end":26421,"line_start":760,"line_end":760,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26426,"byte_end":26429,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26434,"byte_end":26476,"line_start":762,"line_end":762,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26481,"byte_end":26484,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26489,"byte_end":26503,"line_start":764,"line_end":764,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26508,"byte_end":26511,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26516,"byte_end":26523,"line_start":766,"line_end":766,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26528,"byte_end":26547,"line_start":767,"line_end":767,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26552,"byte_end":26555,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33 hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26560,"byte_end":26625,"line_start":769,"line_end":769,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(1.2f64, buf.get_f64());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26630,"byte_end":26668,"line_start":770,"line_end":770,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26673,"byte_end":26680,"line_start":771,"line_end":771,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26685,"byte_end":26688,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26693,"byte_end":26705,"line_start":773,"line_end":773,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26710,"byte_end":26713,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26718,"byte_end":26791,"line_start":775,"line_end":775,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27380,"byte_end":27390,"line_start":797,"line_end":797,"column_start":8,"column_end":18},"name":"get_f64_le","qualname":"::buf::buf_impl::Buf::get_f64_le","value":"pub fn get_f64_le(&mut Self) -> f64","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Gets an IEEE754 double-precision (8 bytes) floating point number from\n `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Gets an IEEE754 double-precision (8 bytes) floating point number from","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26882,"byte_end":26955,"line_start":780,"line_end":780,"column_start":5,"column_end":78}},{"value":"/ `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":26960,"byte_end":26999,"line_start":781,"line_end":781,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27004,"byte_end":27007,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27012,"byte_end":27054,"line_start":783,"line_end":783,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27059,"byte_end":27062,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27067,"byte_end":27081,"line_start":785,"line_end":785,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27086,"byte_end":27089,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27094,"byte_end":27101,"line_start":787,"line_end":787,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27106,"byte_end":27125,"line_start":788,"line_end":788,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27130,"byte_end":27133,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ let mut buf = &b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F hello\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27138,"byte_end":27203,"line_start":790,"line_end":790,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(1.2f64, buf.get_f64_le());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27208,"byte_end":27249,"line_start":791,"line_end":791,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27254,"byte_end":27261,"line_start":792,"line_end":792,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27266,"byte_end":27269,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27274,"byte_end":27286,"line_start":794,"line_end":794,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27291,"byte_end":27294,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining data in `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27299,"byte_end":27372,"line_start":796,"line_end":796,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27963,"byte_end":27976,"line_start":816,"line_end":816,"column_start":8,"column_end":21},"name":"copy_to_bytes","qualname":"::buf::buf_impl::Buf::copy_to_bytes","value":"pub fn copy_to_bytes(&mut Self, usize) -> crate::Bytes","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Consumes `len` bytes inside self and returns new instance of `Bytes`\n with this data.","sig":null,"attributes":[{"value":"/ Consumes `len` bytes inside self and returns new instance of `Bytes`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27469,"byte_end":27541,"line_start":801,"line_end":801,"column_start":5,"column_end":77}},{"value":"/ with this data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27546,"byte_end":27565,"line_start":802,"line_end":802,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27570,"byte_end":27573,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ This function may be optimized by the underlying type to avoid actual","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27578,"byte_end":27651,"line_start":804,"line_end":804,"column_start":5,"column_end":78}},{"value":"/ copies. For example, `Bytes` implementation will do a shallow copy","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27656,"byte_end":27726,"line_start":805,"line_end":805,"column_start":5,"column_end":75}},{"value":"/ (ref-count increment).","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27731,"byte_end":27757,"line_start":806,"line_end":806,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27762,"byte_end":27765,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27770,"byte_end":27784,"line_start":808,"line_end":808,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27789,"byte_end":27792,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27797,"byte_end":27804,"line_start":810,"line_end":810,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27809,"byte_end":27828,"line_start":811,"line_end":811,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27833,"byte_end":27836,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ let bytes = (&b\"hello world\"[..]).copy_to_bytes(5);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27841,"byte_end":27896,"line_start":813,"line_end":813,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(&bytes[..], &b\"hello\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27901,"byte_end":27943,"line_start":814,"line_end":814,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":27948,"byte_end":27955,"line_start":815,"line_end":815,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28818,"byte_end":28822,"line_start":847,"line_end":847,"column_start":8,"column_end":12},"name":"take","qualname":"::buf::buf_impl::Buf::take","value":"pub fn take(Self, usize) -> Take<Self> where Self: Sized","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Creates an adaptor which will read at most `limit` bytes from `self`.","sig":null,"attributes":[{"value":"/ Creates an adaptor which will read at most `limit` bytes from `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28245,"byte_end":28318,"line_start":826,"line_end":826,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28323,"byte_end":28326,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ This function returns a new instance of `Buf` which will read at most","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28331,"byte_end":28404,"line_start":828,"line_end":828,"column_start":5,"column_end":78}},{"value":"/ `limit` bytes.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28409,"byte_end":28427,"line_start":829,"line_end":829,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28432,"byte_end":28435,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28440,"byte_end":28454,"line_start":831,"line_end":831,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28459,"byte_end":28462,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28467,"byte_end":28474,"line_start":833,"line_end":833,"column_start":5,"column_end":12}},{"value":"/ use bytes::{Buf, BufMut};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28479,"byte_end":28508,"line_start":834,"line_end":834,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28513,"byte_end":28516,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ let mut buf = b\"hello world\"[..].take(5);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28521,"byte_end":28566,"line_start":836,"line_end":836,"column_start":5,"column_end":50}},{"value":"/ let mut dst = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28571,"byte_end":28596,"line_start":837,"line_end":837,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28601,"byte_end":28604,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ dst.put(&mut buf);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28609,"byte_end":28631,"line_start":839,"line_end":839,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(dst, b\"hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28636,"byte_end":28666,"line_start":840,"line_end":840,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28671,"byte_end":28674,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ let mut buf = buf.into_inner();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28679,"byte_end":28714,"line_start":842,"line_end":842,"column_start":5,"column_end":40}},{"value":"/ dst.clear();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28719,"byte_end":28735,"line_start":843,"line_end":843,"column_start":5,"column_end":21}},{"value":"/ dst.put(&mut buf);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28740,"byte_end":28762,"line_start":844,"line_end":844,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(dst, b\" world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28767,"byte_end":28798,"line_start":845,"line_end":845,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28803,"byte_end":28810,"line_start":846,"line_end":846,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29415,"byte_end":29420,"line_start":869,"line_end":869,"column_start":8,"column_end":13},"name":"chain","qualname":"::buf::buf_impl::Buf::chain","value":"pub fn chain<U: Buf>(Self, U) -> Chain<Self, U> where Self: Sized","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Creates an adaptor which will chain this buffer with another.","sig":null,"attributes":[{"value":"/ Creates an adaptor which will chain this buffer with another.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":28936,"byte_end":29001,"line_start":854,"line_end":854,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29006,"byte_end":29009,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ The returned `Buf` instance will first consume all bytes from `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29014,"byte_end":29087,"line_start":856,"line_end":856,"column_start":5,"column_end":78}},{"value":"/ Afterwards the output is equivalent to the output of next.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29092,"byte_end":29154,"line_start":857,"line_end":857,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29159,"byte_end":29162,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29167,"byte_end":29181,"line_start":859,"line_end":859,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29186,"byte_end":29189,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29194,"byte_end":29201,"line_start":861,"line_end":861,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29206,"byte_end":29225,"line_start":862,"line_end":862,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29230,"byte_end":29233,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ let mut chain = b\"hello \"[..].chain(&b\"world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29238,"byte_end":29293,"line_start":864,"line_end":864,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29298,"byte_end":29301,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ let full = chain.copy_to_bytes(11);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29306,"byte_end":29345,"line_start":866,"line_end":866,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(full.chunk(), b\"hello world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29350,"byte_end":29395,"line_start":867,"line_end":867,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29400,"byte_end":29407,"line_start":868,"line_end":868,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":30310,"byte_end":30316,"line_start":900,"line_end":900,"column_start":8,"column_end":14},"name":"reader","qualname":"::buf::buf_impl::Buf::reader","value":"pub fn reader(Self) -> Reader<Self> where Self: Sized","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Creates an adaptor which implements the `Read` trait for `self`.","sig":null,"attributes":[{"value":"/ Creates an adaptor which implements the `Read` trait for `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29541,"byte_end":29609,"line_start":876,"line_end":876,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29614,"byte_end":29617,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ This function returns a new value which implements `Read` by adapting","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29622,"byte_end":29695,"line_start":878,"line_end":878,"column_start":5,"column_end":78}},{"value":"/ the `Read` trait functions to the `Buf` trait functions. Given that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29700,"byte_end":29771,"line_start":879,"line_end":879,"column_start":5,"column_end":76}},{"value":"/ `Buf` operations are infallible, none of the `Read` functions will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29776,"byte_end":29846,"line_start":880,"line_end":880,"column_start":5,"column_end":75}},{"value":"/ return with `Err`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29851,"byte_end":29873,"line_start":881,"line_end":881,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29878,"byte_end":29881,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29886,"byte_end":29900,"line_start":883,"line_end":883,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29905,"byte_end":29908,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29913,"byte_end":29920,"line_start":885,"line_end":885,"column_start":5,"column_end":12}},{"value":"/ use bytes::{Bytes, Buf};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29925,"byte_end":29953,"line_start":886,"line_end":886,"column_start":5,"column_end":33}},{"value":"/ use std::io::Read;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29958,"byte_end":29980,"line_start":887,"line_end":887,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29985,"byte_end":29988,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ let buf = Bytes::from(\"hello world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":29993,"byte_end":30034,"line_start":889,"line_end":889,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":30039,"byte_end":30042,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ let mut reader = buf.reader();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":30047,"byte_end":30081,"line_start":891,"line_end":891,"column_start":5,"column_end":39}},{"value":"/ let mut dst = [0; 1024];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":30086,"byte_end":30114,"line_start":892,"line_end":892,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":30119,"byte_end":30122,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ let num = reader.read(&mut dst).unwrap();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":30127,"byte_end":30172,"line_start":894,"line_end":894,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":30177,"byte_end":30180,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(11, num);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":30185,"byte_end":30209,"line_start":896,"line_end":896,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(&dst[..11], &b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":30214,"byte_end":30262,"line_start":897,"line_end":897,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":30267,"byte_end":30274,"line_start":898,"line_end":898,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":30279,"byte_end":30302,"line_start":899,"line_end":899,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":140},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34845,"byte_end":34851,"line_start":29,"line_end":29,"column_start":18,"column_end":24},"name":"BufMut","qualname":"::buf::buf_mut::BufMut","value":"BufMut","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177}],"decl_id":null,"docs":" A trait for values that provide sequential write access to bytes.","sig":null,"attributes":[{"value":"/ A trait for values that provide sequential write access to bytes.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34274,"byte_end":34343,"line_start":9,"line_end":9,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34344,"byte_end":34347,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Write bytes to a buffer","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34348,"byte_end":34375,"line_start":11,"line_end":11,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34376,"byte_end":34379,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ A buffer stores bytes in memory such that write operations are infallible.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34380,"byte_end":34458,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ The underlying storage may or may not be in contiguous memory. A `BufMut`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34459,"byte_end":34536,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ value is a cursor into the buffer. Writing to `BufMut` advances the cursor","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34537,"byte_end":34615,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ position.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34616,"byte_end":34629,"line_start":16,"line_end":16,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34630,"byte_end":34633,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The simplest `BufMut` is a `Vec<u8>`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34634,"byte_end":34675,"line_start":18,"line_end":18,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34676,"byte_end":34679,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34680,"byte_end":34687,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34688,"byte_end":34710,"line_start":21,"line_end":21,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34711,"byte_end":34714,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34715,"byte_end":34740,"line_start":23,"line_end":23,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34741,"byte_end":34744,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ buf.put(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34745,"byte_end":34778,"line_start":25,"line_end":25,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34779,"byte_end":34782,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(buf, b\"hello world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34783,"byte_end":34819,"line_start":27,"line_end":27,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34820,"byte_end":34827,"line_start":28,"line_end":28,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35939,"byte_end":35952,"line_start":59,"line_end":59,"column_start":8,"column_end":21},"name":"remaining_mut","qualname":"::buf::buf_mut::BufMut::remaining_mut","value":"pub fn remaining_mut(&Self) -> usize","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns the number of bytes that can be written from the current\n position until the end of the buffer is reached.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that can be written from the current","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34858,"byte_end":34926,"line_start":30,"line_end":30,"column_start":5,"column_end":73}},{"value":"/ position until the end of the buffer is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34931,"byte_end":34983,"line_start":31,"line_end":31,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34988,"byte_end":34991,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ This value is greater than or equal to the length of the slice returned","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":34996,"byte_end":35071,"line_start":33,"line_end":33,"column_start":5,"column_end":80}},{"value":"/ by `chunk_mut()`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35076,"byte_end":35097,"line_start":34,"line_end":34,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35102,"byte_end":35105,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Writing to a `BufMut` may involve allocating more memory on the fly.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35110,"byte_end":35182,"line_start":36,"line_end":36,"column_start":5,"column_end":77}},{"value":"/ Implementations may fail before reaching the number of bytes indicated","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35187,"byte_end":35261,"line_start":37,"line_end":37,"column_start":5,"column_end":79}},{"value":"/ by this method if they encounter an allocation failure.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35266,"byte_end":35325,"line_start":38,"line_end":38,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35330,"byte_end":35333,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35338,"byte_end":35352,"line_start":40,"line_end":40,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35357,"byte_end":35360,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35365,"byte_end":35372,"line_start":42,"line_end":42,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35377,"byte_end":35399,"line_start":43,"line_end":43,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35404,"byte_end":35407,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ let mut dst = [0; 10];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35412,"byte_end":35438,"line_start":45,"line_end":45,"column_start":5,"column_end":31}},{"value":"/ let mut buf = &mut dst[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35443,"byte_end":35474,"line_start":46,"line_end":46,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35479,"byte_end":35482,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ let original_remaining = buf.remaining_mut();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35487,"byte_end":35536,"line_start":48,"line_end":48,"column_start":5,"column_end":54}},{"value":"/ buf.put(&b\"hello\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35541,"byte_end":35568,"line_start":49,"line_end":49,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35573,"byte_end":35576,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(original_remaining - 5, buf.remaining_mut());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35581,"byte_end":35641,"line_start":51,"line_end":51,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35646,"byte_end":35653,"line_start":52,"line_end":52,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35658,"byte_end":35661,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ # Implementer notes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35666,"byte_end":35689,"line_start":54,"line_end":54,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35694,"byte_end":35697,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Implementations of `remaining_mut` should ensure that the return value","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35702,"byte_end":35776,"line_start":56,"line_end":56,"column_start":5,"column_end":79}},{"value":"/ does not change unless a call is made to `advance_mut` or any other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35781,"byte_end":35852,"line_start":57,"line_end":57,"column_start":5,"column_end":76}},{"value":"/ function that is documented to change the `BufMut`'s current position.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35857,"byte_end":35931,"line_start":58,"line_end":58,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37221,"byte_end":37232,"line_start":100,"line_end":100,"column_start":15,"column_end":26},"name":"advance_mut","qualname":"::buf::buf_mut::BufMut::advance_mut","value":"pub unsafe fn advance_mut(&mut Self, usize)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Advance the internal cursor of the BufMut","sig":null,"attributes":[{"value":"/ Advance the internal cursor of the BufMut","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":35975,"byte_end":36020,"line_start":61,"line_end":61,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36025,"byte_end":36028,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ The next call to `chunk_mut` will return a slice starting `cnt` bytes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36033,"byte_end":36106,"line_start":63,"line_end":63,"column_start":5,"column_end":78}},{"value":"/ further into the underlying buffer.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36111,"byte_end":36150,"line_start":64,"line_end":64,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36155,"byte_end":36158,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because there is no guarantee that the bytes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36163,"byte_end":36235,"line_start":66,"line_end":66,"column_start":5,"column_end":77}},{"value":"/ being advanced past have been initialized.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36240,"byte_end":36286,"line_start":67,"line_end":67,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36291,"byte_end":36294,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36299,"byte_end":36313,"line_start":69,"line_end":69,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36318,"byte_end":36321,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36326,"byte_end":36333,"line_start":71,"line_end":71,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36338,"byte_end":36360,"line_start":72,"line_end":72,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36365,"byte_end":36368,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ let mut buf = Vec::with_capacity(16);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36373,"byte_end":36414,"line_start":74,"line_end":74,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36419,"byte_end":36422,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ // Write some data","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36427,"byte_end":36449,"line_start":76,"line_end":76,"column_start":5,"column_end":27}},{"value":"/ buf.chunk_mut()[0..2].copy_from_slice(b\"he\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36454,"byte_end":36503,"line_start":77,"line_end":77,"column_start":5,"column_end":54}},{"value":"/ unsafe { buf.advance_mut(2) };","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36508,"byte_end":36542,"line_start":78,"line_end":78,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36547,"byte_end":36550,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ // write more bytes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36555,"byte_end":36578,"line_start":80,"line_end":80,"column_start":5,"column_end":28}},{"value":"/ buf.chunk_mut()[0..3].copy_from_slice(b\"llo\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36583,"byte_end":36633,"line_start":81,"line_end":81,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36638,"byte_end":36641,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ unsafe { buf.advance_mut(3); }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36646,"byte_end":36680,"line_start":83,"line_end":83,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36685,"byte_end":36688,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(5, buf.len());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36693,"byte_end":36722,"line_start":85,"line_end":85,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(buf, b\"hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36727,"byte_end":36757,"line_start":86,"line_end":86,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36762,"byte_end":36769,"line_start":87,"line_end":87,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36774,"byte_end":36777,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36782,"byte_end":36794,"line_start":89,"line_end":89,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36799,"byte_end":36802,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ This function **may** panic if `cnt > self.remaining_mut()`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36807,"byte_end":36871,"line_start":91,"line_end":91,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36876,"byte_end":36879,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Implementer notes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36884,"byte_end":36907,"line_start":93,"line_end":93,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36912,"byte_end":36915,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ It is recommended for implementations of `advance_mut` to panic if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36920,"byte_end":36990,"line_start":95,"line_end":95,"column_start":5,"column_end":75}},{"value":"/ `cnt > self.remaining_mut()`. If the implementation does not panic,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":36995,"byte_end":37066,"line_start":96,"line_end":96,"column_start":5,"column_end":76}},{"value":"/ the call must behave as if `cnt == self.remaining_mut()`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37071,"byte_end":37132,"line_start":97,"line_end":97,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37137,"byte_end":37140,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ A call with `cnt == 0` should never panic and be a no-op.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37145,"byte_end":37206,"line_start":99,"line_end":99,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37698,"byte_end":37715,"line_start":120,"line_end":120,"column_start":8,"column_end":25},"name":"has_remaining_mut","qualname":"::buf::buf_mut::BufMut::has_remaining_mut","value":"pub fn has_remaining_mut(&Self) -> bool","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns true if there is space in `self` for more bytes.","sig":null,"attributes":[{"value":"/ Returns true if there is space in `self` for more bytes.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37262,"byte_end":37322,"line_start":102,"line_end":102,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37327,"byte_end":37330,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `self.remaining_mut() != 0`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37335,"byte_end":37389,"line_start":104,"line_end":104,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37394,"byte_end":37397,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37402,"byte_end":37416,"line_start":106,"line_end":106,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37421,"byte_end":37424,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37429,"byte_end":37436,"line_start":108,"line_end":108,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37441,"byte_end":37463,"line_start":109,"line_end":109,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37468,"byte_end":37471,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ let mut dst = [0; 5];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37476,"byte_end":37501,"line_start":111,"line_end":111,"column_start":5,"column_end":30}},{"value":"/ let mut buf = &mut dst[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37506,"byte_end":37537,"line_start":112,"line_end":112,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37542,"byte_end":37545,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ assert!(buf.has_remaining_mut());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37550,"byte_end":37587,"line_start":114,"line_end":114,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37592,"byte_end":37595,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ buf.put(&b\"hello\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37600,"byte_end":37627,"line_start":116,"line_end":116,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37632,"byte_end":37635,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ assert!(!buf.has_remaining_mut());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37640,"byte_end":37678,"line_start":118,"line_end":118,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37683,"byte_end":37690,"line_start":119,"line_end":119,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39588,"byte_end":39597,"line_start":171,"line_end":171,"column_start":8,"column_end":17},"name":"chunk_mut","qualname":"::buf::buf_mut::BufMut::chunk_mut","value":"pub fn chunk_mut(&mut Self) -> &mut UninitSlice","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns a mutable slice starting at the current BufMut position and of\n length between 0 and `BufMut::remaining_mut()`. Note that this *can* be shorter than the\n whole remainder of the buffer (this allows non-continuous implementation).","sig":null,"attributes":[{"value":"/ Returns a mutable slice starting at the current BufMut position and of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37777,"byte_end":37851,"line_start":124,"line_end":124,"column_start":5,"column_end":79}},{"value":"/ length between 0 and `BufMut::remaining_mut()`. Note that this *can* be shorter than the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37856,"byte_end":37948,"line_start":125,"line_end":125,"column_start":5,"column_end":97}},{"value":"/ whole remainder of the buffer (this allows non-continuous implementation).","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":37953,"byte_end":38031,"line_start":126,"line_end":126,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38036,"byte_end":38039,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ This is a lower level function. Most operations are done with other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38044,"byte_end":38115,"line_start":128,"line_end":128,"column_start":5,"column_end":76}},{"value":"/ functions.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38120,"byte_end":38134,"line_start":129,"line_end":129,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38139,"byte_end":38142,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ The returned byte slice may represent uninitialized memory.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38147,"byte_end":38210,"line_start":131,"line_end":131,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38215,"byte_end":38218,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38223,"byte_end":38237,"line_start":133,"line_end":133,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38242,"byte_end":38245,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38250,"byte_end":38257,"line_start":135,"line_end":135,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38262,"byte_end":38284,"line_start":136,"line_end":136,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38289,"byte_end":38292,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ let mut buf = Vec::with_capacity(16);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38297,"byte_end":38338,"line_start":138,"line_end":138,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38343,"byte_end":38346,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38351,"byte_end":38363,"line_start":140,"line_end":140,"column_start":5,"column_end":17}},{"value":"/     // MaybeUninit::as_mut_ptr","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38368,"byte_end":38402,"line_start":141,"line_end":141,"column_start":5,"column_end":39}},{"value":"/     buf.chunk_mut()[0..].as_mut_ptr().write(b'h');","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38407,"byte_end":38461,"line_start":142,"line_end":142,"column_start":5,"column_end":59}},{"value":"/     buf.chunk_mut()[1..].as_mut_ptr().write(b'e');","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38466,"byte_end":38520,"line_start":143,"line_end":143,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38525,"byte_end":38528,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/     buf.advance_mut(2);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38533,"byte_end":38560,"line_start":145,"line_end":145,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38565,"byte_end":38568,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/     buf.chunk_mut()[0..].as_mut_ptr().write(b'l');","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38573,"byte_end":38627,"line_start":147,"line_end":147,"column_start":5,"column_end":59}},{"value":"/     buf.chunk_mut()[1..].as_mut_ptr().write(b'l');","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38632,"byte_end":38686,"line_start":148,"line_end":148,"column_start":5,"column_end":59}},{"value":"/     buf.chunk_mut()[2..].as_mut_ptr().write(b'o');","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38691,"byte_end":38745,"line_start":149,"line_end":149,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38750,"byte_end":38753,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/     buf.advance_mut(3);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38758,"byte_end":38785,"line_start":151,"line_end":151,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38790,"byte_end":38795,"line_start":152,"line_end":152,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38800,"byte_end":38803,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(5, buf.len());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38808,"byte_end":38837,"line_start":154,"line_end":154,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(buf, b\"hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38842,"byte_end":38872,"line_start":155,"line_end":155,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38877,"byte_end":38884,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38889,"byte_end":38892,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ # Implementer notes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38897,"byte_end":38920,"line_start":158,"line_end":158,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38925,"byte_end":38928,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This function should never panic. `chunk_mut` should return an empty","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":38933,"byte_end":39005,"line_start":160,"line_end":160,"column_start":5,"column_end":77}},{"value":"/ slice **if and only if** `remaining_mut()` returns 0. In other words,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39010,"byte_end":39083,"line_start":161,"line_end":161,"column_start":5,"column_end":78}},{"value":"/ `chunk_mut()` returning an empty slice implies that `remaining_mut()` will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39088,"byte_end":39166,"line_start":162,"line_end":162,"column_start":5,"column_end":83}},{"value":"/ return 0 and `remaining_mut()` returning 0 implies that `chunk_mut()` will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39171,"byte_end":39249,"line_start":163,"line_end":163,"column_start":5,"column_end":83}},{"value":"/ return an empty slice.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39254,"byte_end":39280,"line_start":164,"line_end":164,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39285,"byte_end":39288,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ This function may trigger an out-of-memory abort if it tries to allocate","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39293,"byte_end":39369,"line_start":166,"line_end":166,"column_start":5,"column_end":81}},{"value":"/ memory and fails to do so.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39374,"byte_end":39404,"line_start":167,"line_end":167,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40124,"byte_end":40127,"line_start":193,"line_end":193,"column_start":8,"column_end":11},"name":"put","qualname":"::buf::buf_mut::BufMut::put","value":"pub fn put<T: super::Buf>(&mut Self, T) where Self: Sized","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Transfer bytes into `self` from `src` and advance the cursor by the\n number of bytes written.","sig":null,"attributes":[{"value":"/ Transfer bytes into `self` from `src` and advance the cursor by the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39635,"byte_end":39706,"line_start":173,"line_end":173,"column_start":5,"column_end":76}},{"value":"/ number of bytes written.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39711,"byte_end":39739,"line_start":174,"line_end":174,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39744,"byte_end":39747,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39752,"byte_end":39766,"line_start":176,"line_end":176,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39771,"byte_end":39774,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39779,"byte_end":39786,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39791,"byte_end":39813,"line_start":179,"line_end":179,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39818,"byte_end":39821,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39826,"byte_end":39851,"line_start":181,"line_end":181,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39856,"byte_end":39859,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ buf.put_u8(b'h');","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39864,"byte_end":39885,"line_start":183,"line_end":183,"column_start":5,"column_end":26}},{"value":"/ buf.put(&b\"ello\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39890,"byte_end":39916,"line_start":184,"line_end":184,"column_start":5,"column_end":31}},{"value":"/ buf.put(&b\" world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39921,"byte_end":39949,"line_start":185,"line_end":185,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39954,"byte_end":39957,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf, b\"hello world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":39962,"byte_end":39998,"line_start":187,"line_end":187,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40003,"byte_end":40010,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40015,"byte_end":40018,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40023,"byte_end":40035,"line_start":190,"line_end":190,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40040,"byte_end":40043,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ Panics if `self` does not have enough capacity to contain `src`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40048,"byte_end":40116,"line_start":192,"line_end":192,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":41187,"byte_end":41196,"line_start":236,"line_end":236,"column_start":8,"column_end":17},"name":"put_slice","qualname":"::buf::buf_mut::BufMut::put_slice","value":"pub fn put_slice(&mut Self, &[u8])","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Transfer bytes into `self` from `src` and advance the cursor by the\n number of bytes written.","sig":null,"attributes":[{"value":"/ Transfer bytes into `self` from `src` and advance the cursor by the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40687,"byte_end":40758,"line_start":217,"line_end":217,"column_start":5,"column_end":76}},{"value":"/ number of bytes written.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40763,"byte_end":40791,"line_start":218,"line_end":218,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40796,"byte_end":40799,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ `self` must have enough remaining capacity to contain all of `src`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40804,"byte_end":40875,"line_start":220,"line_end":220,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40880,"byte_end":40883,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40888,"byte_end":40895,"line_start":222,"line_end":222,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40900,"byte_end":40922,"line_start":223,"line_end":223,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40927,"byte_end":40930,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ let mut dst = [0; 6];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40935,"byte_end":40960,"line_start":225,"line_end":225,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40965,"byte_end":40968,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40973,"byte_end":40978,"line_start":227,"line_end":227,"column_start":5,"column_end":10}},{"value":"/     let mut buf = &mut dst[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":40983,"byte_end":41018,"line_start":228,"line_end":228,"column_start":5,"column_end":40}},{"value":"/     buf.put_slice(b\"hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":41023,"byte_end":41055,"line_start":229,"line_end":229,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":41060,"byte_end":41063,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(1, buf.remaining_mut());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":41068,"byte_end":41111,"line_start":231,"line_end":231,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":41116,"byte_end":41121,"line_start":232,"line_end":232,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":41126,"byte_end":41129,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"hello\\0\", &dst);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":41134,"byte_end":41167,"line_start":234,"line_end":234,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":41172,"byte_end":41179,"line_start":235,"line_end":235,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42495,"byte_end":42504,"line_start":289,"line_end":289,"column_start":8,"column_end":17},"name":"put_bytes","qualname":"::buf::buf_mut::BufMut::put_bytes","value":"pub fn put_bytes(&mut Self, u8, usize)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Put `cnt` bytes `val` into `self`.","sig":null,"attributes":[{"value":"/ Put `cnt` bytes `val` into `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":41853,"byte_end":41891,"line_start":264,"line_end":264,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":41896,"byte_end":41899,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ Logically equivalent to calling `self.put_u8(val)` `cnt` times, but may work faster.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":41904,"byte_end":41992,"line_start":266,"line_end":266,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":41997,"byte_end":42000,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ `self` must have at least `cnt` remaining capacity.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42005,"byte_end":42060,"line_start":268,"line_end":268,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42065,"byte_end":42068,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42073,"byte_end":42080,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42085,"byte_end":42107,"line_start":271,"line_end":271,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42112,"byte_end":42115,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ let mut dst = [0; 6];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42120,"byte_end":42145,"line_start":273,"line_end":273,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42150,"byte_end":42153,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42158,"byte_end":42163,"line_start":275,"line_end":275,"column_start":5,"column_end":10}},{"value":"/     let mut buf = &mut dst[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42168,"byte_end":42203,"line_start":276,"line_end":276,"column_start":5,"column_end":40}},{"value":"/     buf.put_bytes(b'a', 4);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42208,"byte_end":42239,"line_start":277,"line_end":277,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42244,"byte_end":42247,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(2, buf.remaining_mut());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42252,"byte_end":42295,"line_start":279,"line_end":279,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42300,"byte_end":42305,"line_start":280,"line_end":280,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42310,"byte_end":42313,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"aaaa\\0\\0\", &dst);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42318,"byte_end":42352,"line_start":282,"line_end":282,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42357,"byte_end":42364,"line_start":283,"line_end":283,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42369,"byte_end":42372,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42377,"byte_end":42389,"line_start":285,"line_end":285,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42394,"byte_end":42397,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42402,"byte_end":42471,"line_start":287,"line_end":287,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42476,"byte_end":42487,"line_start":288,"line_end":288,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43033,"byte_end":43039,"line_start":313,"line_end":313,"column_start":8,"column_end":14},"name":"put_u8","qualname":"::buf::buf_mut::BufMut::put_u8","value":"pub fn put_u8(&mut Self, u8)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes an unsigned 8 bit integer to `self`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 8 bit integer to `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42616,"byte_end":42663,"line_start":295,"line_end":295,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42668,"byte_end":42671,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 1.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42676,"byte_end":42718,"line_start":297,"line_end":297,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42723,"byte_end":42726,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42731,"byte_end":42745,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42750,"byte_end":42753,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42758,"byte_end":42765,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42770,"byte_end":42792,"line_start":302,"line_end":302,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42797,"byte_end":42800,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42805,"byte_end":42830,"line_start":304,"line_end":304,"column_start":5,"column_end":30}},{"value":"/ buf.put_u8(0x01);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42835,"byte_end":42856,"line_start":305,"line_end":305,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf, b\"\\x01\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42861,"byte_end":42890,"line_start":306,"line_end":306,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42895,"byte_end":42902,"line_start":307,"line_end":307,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42907,"byte_end":42910,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42915,"byte_end":42927,"line_start":309,"line_end":309,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42932,"byte_end":42935,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":42940,"byte_end":43009,"line_start":311,"line_end":311,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43014,"byte_end":43025,"line_start":312,"line_end":312,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43538,"byte_end":43544,"line_start":336,"line_end":336,"column_start":8,"column_end":14},"name":"put_i8","qualname":"::buf::buf_mut::BufMut::put_i8","value":"pub fn put_i8(&mut Self, i8)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes a signed 8 bit integer to `self`.","sig":null,"attributes":[{"value":"/ Writes a signed 8 bit integer to `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43124,"byte_end":43168,"line_start":318,"line_end":318,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43173,"byte_end":43176,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 1.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43181,"byte_end":43223,"line_start":320,"line_end":320,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43228,"byte_end":43231,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43236,"byte_end":43250,"line_start":322,"line_end":322,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43255,"byte_end":43258,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43263,"byte_end":43270,"line_start":324,"line_end":324,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43275,"byte_end":43297,"line_start":325,"line_end":325,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43302,"byte_end":43305,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43310,"byte_end":43335,"line_start":327,"line_end":327,"column_start":5,"column_end":30}},{"value":"/ buf.put_i8(0x01);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43340,"byte_end":43361,"line_start":328,"line_end":328,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf, b\"\\x01\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43366,"byte_end":43395,"line_start":329,"line_end":329,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43400,"byte_end":43407,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43412,"byte_end":43415,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43420,"byte_end":43432,"line_start":332,"line_end":332,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43437,"byte_end":43440,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43445,"byte_end":43514,"line_start":334,"line_end":334,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43519,"byte_end":43530,"line_start":335,"line_end":335,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44084,"byte_end":44091,"line_start":359,"line_end":359,"column_start":8,"column_end":15},"name":"put_u16","qualname":"::buf::buf_mut::BufMut::put_u16","value":"pub fn put_u16(&mut Self, u16)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer to `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer to `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43634,"byte_end":43707,"line_start":341,"line_end":341,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43712,"byte_end":43715,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 2.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43720,"byte_end":43762,"line_start":343,"line_end":343,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43767,"byte_end":43770,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43775,"byte_end":43789,"line_start":345,"line_end":345,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43794,"byte_end":43797,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43802,"byte_end":43809,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43814,"byte_end":43836,"line_start":348,"line_end":348,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43841,"byte_end":43844,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43849,"byte_end":43874,"line_start":350,"line_end":350,"column_start":5,"column_end":30}},{"value":"/ buf.put_u16(0x0809);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43879,"byte_end":43903,"line_start":351,"line_end":351,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(buf, b\"\\x08\\x09\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43908,"byte_end":43941,"line_start":352,"line_end":352,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43946,"byte_end":43953,"line_start":353,"line_end":353,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43958,"byte_end":43961,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43966,"byte_end":43978,"line_start":355,"line_end":355,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43983,"byte_end":43986,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":43991,"byte_end":44060,"line_start":357,"line_end":357,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44065,"byte_end":44076,"line_start":358,"line_end":358,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44621,"byte_end":44631,"line_start":381,"line_end":381,"column_start":8,"column_end":18},"name":"put_u16_le","qualname":"::buf::buf_mut::BufMut::put_u16_le","value":"pub fn put_u16_le(&mut Self, u16)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer to `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer to `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44165,"byte_end":44241,"line_start":363,"line_end":363,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44246,"byte_end":44249,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 2.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44254,"byte_end":44296,"line_start":365,"line_end":365,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44301,"byte_end":44304,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44309,"byte_end":44323,"line_start":367,"line_end":367,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44328,"byte_end":44331,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44336,"byte_end":44343,"line_start":369,"line_end":369,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44348,"byte_end":44370,"line_start":370,"line_end":370,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44375,"byte_end":44378,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44383,"byte_end":44408,"line_start":372,"line_end":372,"column_start":5,"column_end":30}},{"value":"/ buf.put_u16_le(0x0809);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44413,"byte_end":44440,"line_start":373,"line_end":373,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(buf, b\"\\x09\\x08\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44445,"byte_end":44478,"line_start":374,"line_end":374,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44483,"byte_end":44490,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44495,"byte_end":44498,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44503,"byte_end":44515,"line_start":377,"line_end":377,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44520,"byte_end":44523,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44528,"byte_end":44597,"line_start":379,"line_end":379,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44602,"byte_end":44613,"line_start":380,"line_end":380,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45152,"byte_end":45159,"line_start":403,"line_end":403,"column_start":8,"column_end":15},"name":"put_i16","qualname":"::buf::buf_mut::BufMut::put_i16","value":"pub fn put_i16(&mut Self, i16)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer to `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer to `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44705,"byte_end":44775,"line_start":385,"line_end":385,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44780,"byte_end":44783,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 2.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44788,"byte_end":44830,"line_start":387,"line_end":387,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44835,"byte_end":44838,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44843,"byte_end":44857,"line_start":389,"line_end":389,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44862,"byte_end":44865,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44870,"byte_end":44877,"line_start":391,"line_end":391,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44882,"byte_end":44904,"line_start":392,"line_end":392,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44909,"byte_end":44912,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44917,"byte_end":44942,"line_start":394,"line_end":394,"column_start":5,"column_end":30}},{"value":"/ buf.put_i16(0x0809);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44947,"byte_end":44971,"line_start":395,"line_end":395,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(buf, b\"\\x08\\x09\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":44976,"byte_end":45009,"line_start":396,"line_end":396,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45014,"byte_end":45021,"line_start":397,"line_end":397,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45026,"byte_end":45029,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45034,"byte_end":45046,"line_start":399,"line_end":399,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45051,"byte_end":45054,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45059,"byte_end":45128,"line_start":401,"line_end":401,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45133,"byte_end":45144,"line_start":402,"line_end":402,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45686,"byte_end":45696,"line_start":425,"line_end":425,"column_start":8,"column_end":18},"name":"put_i16_le","qualname":"::buf::buf_mut::BufMut::put_i16_le","value":"pub fn put_i16_le(&mut Self, i16)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer to `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer to `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45233,"byte_end":45306,"line_start":407,"line_end":407,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45311,"byte_end":45314,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 2.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45319,"byte_end":45361,"line_start":409,"line_end":409,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45366,"byte_end":45369,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45374,"byte_end":45388,"line_start":411,"line_end":411,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45393,"byte_end":45396,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45401,"byte_end":45408,"line_start":413,"line_end":413,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45413,"byte_end":45435,"line_start":414,"line_end":414,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45440,"byte_end":45443,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45448,"byte_end":45473,"line_start":416,"line_end":416,"column_start":5,"column_end":30}},{"value":"/ buf.put_i16_le(0x0809);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45478,"byte_end":45505,"line_start":417,"line_end":417,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(buf, b\"\\x09\\x08\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45510,"byte_end":45543,"line_start":418,"line_end":418,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45548,"byte_end":45555,"line_start":419,"line_end":419,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45560,"byte_end":45563,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45568,"byte_end":45580,"line_start":421,"line_end":421,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45585,"byte_end":45588,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45593,"byte_end":45662,"line_start":423,"line_end":423,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45667,"byte_end":45678,"line_start":424,"line_end":424,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46232,"byte_end":46239,"line_start":447,"line_end":447,"column_start":8,"column_end":15},"name":"put_u32","qualname":"::buf::buf_mut::BufMut::put_u32","value":"pub fn put_u32(&mut Self, u32)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer to `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer to `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45770,"byte_end":45843,"line_start":429,"line_end":429,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45848,"byte_end":45851,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 4.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45856,"byte_end":45898,"line_start":431,"line_end":431,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45903,"byte_end":45906,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45911,"byte_end":45925,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45930,"byte_end":45933,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45938,"byte_end":45945,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45950,"byte_end":45972,"line_start":436,"line_end":436,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45977,"byte_end":45980,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":45985,"byte_end":46010,"line_start":438,"line_end":438,"column_start":5,"column_end":30}},{"value":"/ buf.put_u32(0x0809A0A1);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46015,"byte_end":46043,"line_start":439,"line_end":439,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(buf, b\"\\x08\\x09\\xA0\\xA1\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46048,"byte_end":46089,"line_start":440,"line_end":440,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46094,"byte_end":46101,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46106,"byte_end":46109,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46114,"byte_end":46126,"line_start":443,"line_end":443,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46131,"byte_end":46134,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46139,"byte_end":46208,"line_start":445,"line_end":445,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46213,"byte_end":46224,"line_start":446,"line_end":446,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46781,"byte_end":46791,"line_start":469,"line_end":469,"column_start":8,"column_end":18},"name":"put_u32_le","qualname":"::buf::buf_mut::BufMut::put_u32_le","value":"pub fn put_u32_le(&mut Self, u32)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer to `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer to `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46313,"byte_end":46389,"line_start":451,"line_end":451,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46394,"byte_end":46397,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 4.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46402,"byte_end":46444,"line_start":453,"line_end":453,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46449,"byte_end":46452,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46457,"byte_end":46471,"line_start":455,"line_end":455,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46476,"byte_end":46479,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46484,"byte_end":46491,"line_start":457,"line_end":457,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46496,"byte_end":46518,"line_start":458,"line_end":458,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46523,"byte_end":46526,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46531,"byte_end":46556,"line_start":460,"line_end":460,"column_start":5,"column_end":30}},{"value":"/ buf.put_u32_le(0x0809A0A1);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46561,"byte_end":46592,"line_start":461,"line_end":461,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(buf, b\"\\xA1\\xA0\\x09\\x08\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46597,"byte_end":46638,"line_start":462,"line_end":462,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46643,"byte_end":46650,"line_start":463,"line_end":463,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46655,"byte_end":46658,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46663,"byte_end":46675,"line_start":465,"line_end":465,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46680,"byte_end":46683,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46688,"byte_end":46757,"line_start":467,"line_end":467,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46762,"byte_end":46773,"line_start":468,"line_end":468,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47324,"byte_end":47331,"line_start":491,"line_end":491,"column_start":8,"column_end":15},"name":"put_i32","qualname":"::buf::buf_mut::BufMut::put_i32","value":"pub fn put_i32(&mut Self, i32)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer to `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer to `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46865,"byte_end":46935,"line_start":473,"line_end":473,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46940,"byte_end":46943,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 4.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46948,"byte_end":46990,"line_start":475,"line_end":475,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":46995,"byte_end":46998,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47003,"byte_end":47017,"line_start":477,"line_end":477,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47022,"byte_end":47025,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47030,"byte_end":47037,"line_start":479,"line_end":479,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47042,"byte_end":47064,"line_start":480,"line_end":480,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47069,"byte_end":47072,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47077,"byte_end":47102,"line_start":482,"line_end":482,"column_start":5,"column_end":30}},{"value":"/ buf.put_i32(0x0809A0A1);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47107,"byte_end":47135,"line_start":483,"line_end":483,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(buf, b\"\\x08\\x09\\xA0\\xA1\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47140,"byte_end":47181,"line_start":484,"line_end":484,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47186,"byte_end":47193,"line_start":485,"line_end":485,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47198,"byte_end":47201,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47206,"byte_end":47218,"line_start":487,"line_end":487,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47223,"byte_end":47226,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47231,"byte_end":47300,"line_start":489,"line_end":489,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47305,"byte_end":47316,"line_start":490,"line_end":490,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47870,"byte_end":47880,"line_start":513,"line_end":513,"column_start":8,"column_end":18},"name":"put_i32_le","qualname":"::buf::buf_mut::BufMut::put_i32_le","value":"pub fn put_i32_le(&mut Self, i32)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer to `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer to `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47405,"byte_end":47478,"line_start":495,"line_end":495,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47483,"byte_end":47486,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 4.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47491,"byte_end":47533,"line_start":497,"line_end":497,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47538,"byte_end":47541,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47546,"byte_end":47560,"line_start":499,"line_end":499,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47565,"byte_end":47568,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47573,"byte_end":47580,"line_start":501,"line_end":501,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47585,"byte_end":47607,"line_start":502,"line_end":502,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47612,"byte_end":47615,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47620,"byte_end":47645,"line_start":504,"line_end":504,"column_start":5,"column_end":30}},{"value":"/ buf.put_i32_le(0x0809A0A1);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47650,"byte_end":47681,"line_start":505,"line_end":505,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(buf, b\"\\xA1\\xA0\\x09\\x08\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47686,"byte_end":47727,"line_start":506,"line_end":506,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47732,"byte_end":47739,"line_start":507,"line_end":507,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47744,"byte_end":47747,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47752,"byte_end":47764,"line_start":509,"line_end":509,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47769,"byte_end":47772,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47777,"byte_end":47846,"line_start":511,"line_end":511,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47851,"byte_end":47862,"line_start":512,"line_end":512,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48444,"byte_end":48451,"line_start":535,"line_end":535,"column_start":8,"column_end":15},"name":"put_u64","qualname":"::buf::buf_mut::BufMut::put_u64","value":"pub fn put_u64(&mut Self, u64)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer to `self` in the big-endian byte order.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer to `self` in the big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":47954,"byte_end":48031,"line_start":517,"line_end":517,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48036,"byte_end":48039,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48044,"byte_end":48086,"line_start":519,"line_end":519,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48091,"byte_end":48094,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48099,"byte_end":48113,"line_start":521,"line_end":521,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48118,"byte_end":48121,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48126,"byte_end":48133,"line_start":523,"line_end":523,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48138,"byte_end":48160,"line_start":524,"line_end":524,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48165,"byte_end":48168,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48173,"byte_end":48198,"line_start":526,"line_end":526,"column_start":5,"column_end":30}},{"value":"/ buf.put_u64(0x0102030405060708);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48203,"byte_end":48239,"line_start":527,"line_end":527,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48244,"byte_end":48301,"line_start":528,"line_end":528,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48306,"byte_end":48313,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48318,"byte_end":48321,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48326,"byte_end":48338,"line_start":531,"line_end":531,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48343,"byte_end":48346,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48351,"byte_end":48420,"line_start":533,"line_end":533,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48425,"byte_end":48436,"line_start":534,"line_end":534,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49017,"byte_end":49027,"line_start":557,"line_end":557,"column_start":8,"column_end":18},"name":"put_u64_le","qualname":"::buf::buf_mut::BufMut::put_u64_le","value":"pub fn put_u64_le(&mut Self, u64)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer to `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer to `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48525,"byte_end":48601,"line_start":539,"line_end":539,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48606,"byte_end":48609,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48614,"byte_end":48656,"line_start":541,"line_end":541,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48661,"byte_end":48664,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48669,"byte_end":48683,"line_start":543,"line_end":543,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48688,"byte_end":48691,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48696,"byte_end":48703,"line_start":545,"line_end":545,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48708,"byte_end":48730,"line_start":546,"line_end":546,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48735,"byte_end":48738,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48743,"byte_end":48768,"line_start":548,"line_end":548,"column_start":5,"column_end":30}},{"value":"/ buf.put_u64_le(0x0102030405060708);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48773,"byte_end":48812,"line_start":549,"line_end":549,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(buf, b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48817,"byte_end":48874,"line_start":550,"line_end":550,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48879,"byte_end":48886,"line_start":551,"line_end":551,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48891,"byte_end":48894,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48899,"byte_end":48911,"line_start":553,"line_end":553,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48916,"byte_end":48919,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48924,"byte_end":48993,"line_start":555,"line_end":555,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":48998,"byte_end":49009,"line_start":556,"line_end":556,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49588,"byte_end":49595,"line_start":579,"line_end":579,"column_start":8,"column_end":15},"name":"put_i64","qualname":"::buf::buf_mut::BufMut::put_i64","value":"pub fn put_i64(&mut Self, i64)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer to `self` in the big-endian byte order.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer to `self` in the big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49101,"byte_end":49175,"line_start":561,"line_end":561,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49180,"byte_end":49183,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49188,"byte_end":49230,"line_start":563,"line_end":563,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49235,"byte_end":49238,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49243,"byte_end":49257,"line_start":565,"line_end":565,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49262,"byte_end":49265,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49270,"byte_end":49277,"line_start":567,"line_end":567,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49282,"byte_end":49304,"line_start":568,"line_end":568,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49309,"byte_end":49312,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49317,"byte_end":49342,"line_start":570,"line_end":570,"column_start":5,"column_end":30}},{"value":"/ buf.put_i64(0x0102030405060708);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49347,"byte_end":49383,"line_start":571,"line_end":571,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49388,"byte_end":49445,"line_start":572,"line_end":572,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49450,"byte_end":49457,"line_start":573,"line_end":573,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49462,"byte_end":49465,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49470,"byte_end":49482,"line_start":575,"line_end":575,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49487,"byte_end":49490,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49495,"byte_end":49564,"line_start":577,"line_end":577,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49569,"byte_end":49580,"line_start":578,"line_end":578,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50158,"byte_end":50168,"line_start":601,"line_end":601,"column_start":8,"column_end":18},"name":"put_i64_le","qualname":"::buf::buf_mut::BufMut::put_i64_le","value":"pub fn put_i64_le(&mut Self, i64)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer to `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer to `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49669,"byte_end":49742,"line_start":583,"line_end":583,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49747,"byte_end":49750,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49755,"byte_end":49797,"line_start":585,"line_end":585,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49802,"byte_end":49805,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49810,"byte_end":49824,"line_start":587,"line_end":587,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49829,"byte_end":49832,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49837,"byte_end":49844,"line_start":589,"line_end":589,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49849,"byte_end":49871,"line_start":590,"line_end":590,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49876,"byte_end":49879,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49884,"byte_end":49909,"line_start":592,"line_end":592,"column_start":5,"column_end":30}},{"value":"/ buf.put_i64_le(0x0102030405060708);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49914,"byte_end":49953,"line_start":593,"line_end":593,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(buf, b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":49958,"byte_end":50015,"line_start":594,"line_end":594,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50020,"byte_end":50027,"line_start":595,"line_end":595,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50032,"byte_end":50035,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50040,"byte_end":50052,"line_start":597,"line_end":597,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50057,"byte_end":50060,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50065,"byte_end":50134,"line_start":599,"line_end":599,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50139,"byte_end":50150,"line_start":600,"line_end":600,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50783,"byte_end":50791,"line_start":623,"line_end":623,"column_start":8,"column_end":16},"name":"put_u128","qualname":"::buf::buf_mut::BufMut::put_u128","value":"pub fn put_u128(&mut Self, u128)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes an unsigned 128 bit integer to `self` in the big-endian byte order.","sig":null,"attributes":[{"value":"/ Writes an unsigned 128 bit integer to `self` in the big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50242,"byte_end":50320,"line_start":605,"line_end":605,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50325,"byte_end":50328,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 16.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50333,"byte_end":50376,"line_start":607,"line_end":607,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50381,"byte_end":50384,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50389,"byte_end":50403,"line_start":609,"line_end":609,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50408,"byte_end":50411,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50416,"byte_end":50423,"line_start":611,"line_end":611,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50428,"byte_end":50450,"line_start":612,"line_end":612,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50455,"byte_end":50458,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50463,"byte_end":50488,"line_start":614,"line_end":614,"column_start":5,"column_end":30}},{"value":"/ buf.put_u128(0x01020304050607080910111213141516);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50493,"byte_end":50546,"line_start":615,"line_end":615,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50551,"byte_end":50640,"line_start":616,"line_end":616,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50645,"byte_end":50652,"line_start":617,"line_end":617,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50657,"byte_end":50660,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50665,"byte_end":50677,"line_start":619,"line_end":619,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50682,"byte_end":50685,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50690,"byte_end":50759,"line_start":621,"line_end":621,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50764,"byte_end":50775,"line_start":622,"line_end":622,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51409,"byte_end":51420,"line_start":645,"line_end":645,"column_start":8,"column_end":19},"name":"put_u128_le","qualname":"::buf::buf_mut::BufMut::put_u128_le","value":"pub fn put_u128_le(&mut Self, u128)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes an unsigned 128 bit integer to `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Writes an unsigned 128 bit integer to `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50866,"byte_end":50943,"line_start":627,"line_end":627,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50948,"byte_end":50951,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 16.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":50956,"byte_end":50999,"line_start":629,"line_end":629,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51004,"byte_end":51007,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51012,"byte_end":51026,"line_start":631,"line_end":631,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51031,"byte_end":51034,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51039,"byte_end":51046,"line_start":633,"line_end":633,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51051,"byte_end":51073,"line_start":634,"line_end":634,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51078,"byte_end":51081,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51086,"byte_end":51111,"line_start":636,"line_end":636,"column_start":5,"column_end":30}},{"value":"/ buf.put_u128_le(0x01020304050607080910111213141516);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51116,"byte_end":51172,"line_start":637,"line_end":637,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(buf, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51177,"byte_end":51266,"line_start":638,"line_end":638,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51271,"byte_end":51278,"line_start":639,"line_end":639,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51283,"byte_end":51286,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51291,"byte_end":51303,"line_start":641,"line_end":641,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51308,"byte_end":51311,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51316,"byte_end":51385,"line_start":643,"line_end":643,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51390,"byte_end":51401,"line_start":644,"line_end":644,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52033,"byte_end":52041,"line_start":667,"line_end":667,"column_start":8,"column_end":16},"name":"put_i128","qualname":"::buf::buf_mut::BufMut::put_i128","value":"pub fn put_i128(&mut Self, i128)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes a signed 128 bit integer to `self` in the big-endian byte order.","sig":null,"attributes":[{"value":"/ Writes a signed 128 bit integer to `self` in the big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51495,"byte_end":51570,"line_start":649,"line_end":649,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51575,"byte_end":51578,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 16.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51583,"byte_end":51626,"line_start":651,"line_end":651,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51631,"byte_end":51634,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51639,"byte_end":51653,"line_start":653,"line_end":653,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51658,"byte_end":51661,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51666,"byte_end":51673,"line_start":655,"line_end":655,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51678,"byte_end":51700,"line_start":656,"line_end":656,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51705,"byte_end":51708,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51713,"byte_end":51738,"line_start":658,"line_end":658,"column_start":5,"column_end":30}},{"value":"/ buf.put_i128(0x01020304050607080910111213141516);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51743,"byte_end":51796,"line_start":659,"line_end":659,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(buf, b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51801,"byte_end":51890,"line_start":660,"line_end":660,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51895,"byte_end":51902,"line_start":661,"line_end":661,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51907,"byte_end":51910,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51915,"byte_end":51927,"line_start":663,"line_end":663,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51932,"byte_end":51935,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":51940,"byte_end":52009,"line_start":665,"line_end":665,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52014,"byte_end":52025,"line_start":666,"line_end":666,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52656,"byte_end":52667,"line_start":689,"line_end":689,"column_start":8,"column_end":19},"name":"put_i128_le","qualname":"::buf::buf_mut::BufMut::put_i128_le","value":"pub fn put_i128_le(&mut Self, i128)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes a signed 128 bit integer to `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Writes a signed 128 bit integer to `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52116,"byte_end":52190,"line_start":671,"line_end":671,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52195,"byte_end":52198,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 16.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52203,"byte_end":52246,"line_start":673,"line_end":673,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52251,"byte_end":52254,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52259,"byte_end":52273,"line_start":675,"line_end":675,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52278,"byte_end":52281,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52286,"byte_end":52293,"line_start":677,"line_end":677,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52298,"byte_end":52320,"line_start":678,"line_end":678,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52325,"byte_end":52328,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52333,"byte_end":52358,"line_start":680,"line_end":680,"column_start":5,"column_end":30}},{"value":"/ buf.put_i128_le(0x01020304050607080910111213141516);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52363,"byte_end":52419,"line_start":681,"line_end":681,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(buf, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52424,"byte_end":52513,"line_start":682,"line_end":682,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52518,"byte_end":52525,"line_start":683,"line_end":683,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52530,"byte_end":52533,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52538,"byte_end":52550,"line_start":685,"line_end":685,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52555,"byte_end":52558,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52563,"byte_end":52632,"line_start":687,"line_end":687,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52637,"byte_end":52648,"line_start":688,"line_end":688,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53209,"byte_end":53217,"line_start":711,"line_end":711,"column_start":8,"column_end":16},"name":"put_uint","qualname":"::buf::buf_mut::BufMut::put_uint","value":"pub fn put_uint(&mut Self, u64, usize)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes an unsigned n-byte integer to `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Writes an unsigned n-byte integer to `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52742,"byte_end":52815,"line_start":693,"line_end":693,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52820,"byte_end":52823,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by `nbytes`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52828,"byte_end":52877,"line_start":695,"line_end":695,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52882,"byte_end":52885,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52890,"byte_end":52904,"line_start":697,"line_end":697,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52909,"byte_end":52912,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52917,"byte_end":52924,"line_start":699,"line_end":699,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52929,"byte_end":52951,"line_start":700,"line_end":700,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52956,"byte_end":52959,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52964,"byte_end":52989,"line_start":702,"line_end":702,"column_start":5,"column_end":30}},{"value":"/ buf.put_uint(0x010203, 3);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":52994,"byte_end":53024,"line_start":703,"line_end":703,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(buf, b\"\\x01\\x02\\x03\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53029,"byte_end":53066,"line_start":704,"line_end":704,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53071,"byte_end":53078,"line_start":705,"line_end":705,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53083,"byte_end":53086,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53091,"byte_end":53103,"line_start":707,"line_end":707,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53108,"byte_end":53111,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53116,"byte_end":53185,"line_start":709,"line_end":709,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53190,"byte_end":53201,"line_start":710,"line_end":710,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53817,"byte_end":53828,"line_start":733,"line_end":733,"column_start":8,"column_end":19},"name":"put_uint_le","qualname":"::buf::buf_mut::BufMut::put_uint_le","value":"pub fn put_uint_le(&mut Self, u64, usize)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes an unsigned n-byte integer to `self` in the little-endian byte order.","sig":null,"attributes":[{"value":"/ Writes an unsigned n-byte integer to `self` in the little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53340,"byte_end":53420,"line_start":715,"line_end":715,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53425,"byte_end":53428,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by `nbytes`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53433,"byte_end":53482,"line_start":717,"line_end":717,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53487,"byte_end":53490,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53495,"byte_end":53509,"line_start":719,"line_end":719,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53514,"byte_end":53517,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53522,"byte_end":53529,"line_start":721,"line_end":721,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53534,"byte_end":53556,"line_start":722,"line_end":722,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53561,"byte_end":53564,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53569,"byte_end":53594,"line_start":724,"line_end":724,"column_start":5,"column_end":30}},{"value":"/ buf.put_uint_le(0x010203, 3);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53599,"byte_end":53632,"line_start":725,"line_end":725,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(buf, b\"\\x03\\x02\\x01\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53637,"byte_end":53674,"line_start":726,"line_end":726,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53679,"byte_end":53686,"line_start":727,"line_end":727,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53691,"byte_end":53694,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53699,"byte_end":53711,"line_start":729,"line_end":729,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53716,"byte_end":53719,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53724,"byte_end":53793,"line_start":731,"line_end":731,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53798,"byte_end":53809,"line_start":732,"line_end":732,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54438,"byte_end":54445,"line_start":755,"line_end":755,"column_start":8,"column_end":15},"name":"put_int","qualname":"::buf::buf_mut::BufMut::put_int","value":"pub fn put_int(&mut Self, i64, usize)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes low `nbytes` of a signed integer to `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Writes low `nbytes` of a signed integer to `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":53929,"byte_end":54008,"line_start":737,"line_end":737,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54013,"byte_end":54016,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by `nbytes`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54021,"byte_end":54070,"line_start":739,"line_end":739,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54075,"byte_end":54078,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54083,"byte_end":54097,"line_start":741,"line_end":741,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54102,"byte_end":54105,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54110,"byte_end":54117,"line_start":743,"line_end":743,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54122,"byte_end":54144,"line_start":744,"line_end":744,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54149,"byte_end":54152,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54157,"byte_end":54182,"line_start":746,"line_end":746,"column_start":5,"column_end":30}},{"value":"/ buf.put_int(0x0504010203, 3);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54187,"byte_end":54220,"line_start":747,"line_end":747,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(buf, b\"\\x01\\x02\\x03\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54225,"byte_end":54262,"line_start":748,"line_end":748,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54267,"byte_end":54274,"line_start":749,"line_end":749,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54279,"byte_end":54282,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54287,"byte_end":54299,"line_start":751,"line_end":751,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54304,"byte_end":54307,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54312,"byte_end":54381,"line_start":753,"line_end":753,"column_start":5,"column_end":74}},{"value":"/ `self` or if `nbytes` is greater than 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54386,"byte_end":54430,"line_start":754,"line_end":754,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55083,"byte_end":55093,"line_start":777,"line_end":777,"column_start":8,"column_end":18},"name":"put_int_le","qualname":"::buf::buf_mut::BufMut::put_int_le","value":"pub fn put_int_le(&mut Self, i64, usize)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes low `nbytes` of a signed integer to `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Writes low `nbytes` of a signed integer to `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54568,"byte_end":54650,"line_start":759,"line_end":759,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54655,"byte_end":54658,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by `nbytes`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54663,"byte_end":54712,"line_start":761,"line_end":761,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54717,"byte_end":54720,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54725,"byte_end":54739,"line_start":763,"line_end":763,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54744,"byte_end":54747,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54752,"byte_end":54759,"line_start":765,"line_end":765,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54764,"byte_end":54786,"line_start":766,"line_end":766,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54791,"byte_end":54794,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54799,"byte_end":54824,"line_start":768,"line_end":768,"column_start":5,"column_end":30}},{"value":"/ buf.put_int_le(0x0504010203, 3);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54829,"byte_end":54865,"line_start":769,"line_end":769,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(buf, b\"\\x03\\x02\\x01\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54870,"byte_end":54907,"line_start":770,"line_end":770,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54912,"byte_end":54919,"line_start":771,"line_end":771,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54924,"byte_end":54927,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54932,"byte_end":54944,"line_start":773,"line_end":773,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54949,"byte_end":54952,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":54957,"byte_end":55026,"line_start":775,"line_end":775,"column_start":5,"column_end":74}},{"value":"/ `self` or if `nbytes` is greater than 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55031,"byte_end":55075,"line_start":776,"line_end":776,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55694,"byte_end":55701,"line_start":800,"line_end":800,"column_start":8,"column_end":15},"name":"put_f32","qualname":"::buf::buf_mut::BufMut::put_f32","value":"pub fn put_f32(&mut Self, f32)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes  an IEEE754 single-precision (4 bytes) floating point number to\n `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Writes  an IEEE754 single-precision (4 bytes) floating point number to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55194,"byte_end":55268,"line_start":781,"line_end":781,"column_start":5,"column_end":79}},{"value":"/ `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55273,"byte_end":55309,"line_start":782,"line_end":782,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55314,"byte_end":55317,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 4.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55322,"byte_end":55364,"line_start":784,"line_end":784,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55369,"byte_end":55372,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55377,"byte_end":55391,"line_start":786,"line_end":786,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55396,"byte_end":55399,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55404,"byte_end":55411,"line_start":788,"line_end":788,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55416,"byte_end":55438,"line_start":789,"line_end":789,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55443,"byte_end":55446,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55451,"byte_end":55476,"line_start":791,"line_end":791,"column_start":5,"column_end":30}},{"value":"/ buf.put_f32(1.2f32);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55481,"byte_end":55505,"line_start":792,"line_end":792,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(buf, b\"\\x3F\\x99\\x99\\x9A\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55510,"byte_end":55551,"line_start":793,"line_end":793,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55556,"byte_end":55563,"line_start":794,"line_end":794,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55568,"byte_end":55571,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55576,"byte_end":55588,"line_start":796,"line_end":796,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55593,"byte_end":55596,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55601,"byte_end":55670,"line_start":798,"line_end":798,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55675,"byte_end":55686,"line_start":799,"line_end":799,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56275,"byte_end":56285,"line_start":823,"line_end":823,"column_start":8,"column_end":18},"name":"put_f32_le","qualname":"::buf::buf_mut::BufMut::put_f32_le","value":"pub fn put_f32_le(&mut Self, f32)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes  an IEEE754 single-precision (4 bytes) floating point number to\n `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Writes  an IEEE754 single-precision (4 bytes) floating point number to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55769,"byte_end":55843,"line_start":804,"line_end":804,"column_start":5,"column_end":79}},{"value":"/ `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55848,"byte_end":55887,"line_start":805,"line_end":805,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55892,"byte_end":55895,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 4.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55900,"byte_end":55942,"line_start":807,"line_end":807,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55947,"byte_end":55950,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55955,"byte_end":55969,"line_start":809,"line_end":809,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55974,"byte_end":55977,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55982,"byte_end":55989,"line_start":811,"line_end":811,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":55994,"byte_end":56016,"line_start":812,"line_end":812,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56021,"byte_end":56024,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56029,"byte_end":56054,"line_start":814,"line_end":814,"column_start":5,"column_end":30}},{"value":"/ buf.put_f32_le(1.2f32);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56059,"byte_end":56086,"line_start":815,"line_end":815,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(buf, b\"\\x9A\\x99\\x99\\x3F\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56091,"byte_end":56132,"line_start":816,"line_end":816,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56137,"byte_end":56144,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56149,"byte_end":56152,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56157,"byte_end":56169,"line_start":819,"line_end":819,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56174,"byte_end":56177,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56182,"byte_end":56251,"line_start":821,"line_end":821,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56256,"byte_end":56267,"line_start":822,"line_end":822,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56872,"byte_end":56879,"line_start":846,"line_end":846,"column_start":8,"column_end":15},"name":"put_f64","qualname":"::buf::buf_mut::BufMut::put_f64","value":"pub fn put_f64(&mut Self, f64)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes  an IEEE754 double-precision (8 bytes) floating point number to\n `self` in big-endian byte order.","sig":null,"attributes":[{"value":"/ Writes  an IEEE754 double-precision (8 bytes) floating point number to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56356,"byte_end":56430,"line_start":827,"line_end":827,"column_start":5,"column_end":79}},{"value":"/ `self` in big-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56435,"byte_end":56471,"line_start":828,"line_end":828,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56476,"byte_end":56479,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56484,"byte_end":56526,"line_start":830,"line_end":830,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56531,"byte_end":56534,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56539,"byte_end":56553,"line_start":832,"line_end":832,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56558,"byte_end":56561,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56566,"byte_end":56573,"line_start":834,"line_end":834,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56578,"byte_end":56600,"line_start":835,"line_end":835,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56605,"byte_end":56608,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56613,"byte_end":56638,"line_start":837,"line_end":837,"column_start":5,"column_end":30}},{"value":"/ buf.put_f64(1.2f64);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56643,"byte_end":56667,"line_start":838,"line_end":838,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(buf, b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56672,"byte_end":56729,"line_start":839,"line_end":839,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56734,"byte_end":56741,"line_start":840,"line_end":840,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56746,"byte_end":56749,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56754,"byte_end":56766,"line_start":842,"line_end":842,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56771,"byte_end":56774,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56779,"byte_end":56848,"line_start":844,"line_end":844,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56853,"byte_end":56864,"line_start":845,"line_end":845,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57469,"byte_end":57479,"line_start":869,"line_end":869,"column_start":8,"column_end":18},"name":"put_f64_le","qualname":"::buf::buf_mut::BufMut::put_f64_le","value":"pub fn put_f64_le(&mut Self, f64)","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Writes  an IEEE754 double-precision (8 bytes) floating point number to\n `self` in little-endian byte order.","sig":null,"attributes":[{"value":"/ Writes  an IEEE754 double-precision (8 bytes) floating point number to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":56947,"byte_end":57021,"line_start":850,"line_end":850,"column_start":5,"column_end":79}},{"value":"/ `self` in little-endian byte order.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57026,"byte_end":57065,"line_start":851,"line_end":851,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57070,"byte_end":57073,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ The current position is advanced by 8.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57078,"byte_end":57120,"line_start":853,"line_end":853,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57125,"byte_end":57128,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57133,"byte_end":57147,"line_start":855,"line_end":855,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57152,"byte_end":57155,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57160,"byte_end":57167,"line_start":857,"line_end":857,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57172,"byte_end":57194,"line_start":858,"line_end":858,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57199,"byte_end":57202,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57207,"byte_end":57232,"line_start":860,"line_end":860,"column_start":5,"column_end":30}},{"value":"/ buf.put_f64_le(1.2f64);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57237,"byte_end":57264,"line_start":861,"line_end":861,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(buf, b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57269,"byte_end":57326,"line_start":862,"line_end":862,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57331,"byte_end":57338,"line_start":863,"line_end":863,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57343,"byte_end":57346,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57351,"byte_end":57363,"line_start":865,"line_end":865,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57368,"byte_end":57371,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ This function panics if there is not enough remaining capacity in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57376,"byte_end":57445,"line_start":867,"line_end":867,"column_start":5,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57450,"byte_end":57461,"line_start":868,"line_end":868,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57894,"byte_end":57899,"line_start":886,"line_end":886,"column_start":8,"column_end":13},"name":"limit","qualname":"::buf::buf_mut::BufMut::limit","value":"pub fn limit(Self, usize) -> Limit<Self> where Self: Sized","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Creates an adaptor which can write at most `limit` bytes to `self`.","sig":null,"attributes":[{"value":"/ Creates an adaptor which can write at most `limit` bytes to `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57550,"byte_end":57621,"line_start":873,"line_end":873,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57626,"byte_end":57629,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57634,"byte_end":57648,"line_start":875,"line_end":875,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57653,"byte_end":57656,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57661,"byte_end":57668,"line_start":877,"line_end":877,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57673,"byte_end":57695,"line_start":878,"line_end":878,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57700,"byte_end":57703,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ let arr = &mut [0u8; 128][..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57708,"byte_end":57742,"line_start":880,"line_end":880,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(arr.remaining_mut(), 128);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57747,"byte_end":57788,"line_start":881,"line_end":881,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57793,"byte_end":57796,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ let dst = arr.limit(10);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57801,"byte_end":57829,"line_start":883,"line_end":883,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(dst.remaining_mut(), 10);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57834,"byte_end":57874,"line_start":884,"line_end":884,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":57879,"byte_end":57886,"line_start":885,"line_end":885,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58748,"byte_end":58754,"line_start":916,"line_end":916,"column_start":8,"column_end":14},"name":"writer","qualname":"::buf::buf_mut::BufMut::writer","value":"pub fn writer(Self) -> Writer<Self> where Self: Sized","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Creates an adaptor which implements the `Write` trait for `self`.","sig":null,"attributes":[{"value":"/ Creates an adaptor which implements the `Write` trait for `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58015,"byte_end":58084,"line_start":893,"line_end":893,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58089,"byte_end":58092,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ This function returns a new value which implements `Write` by adapting","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58097,"byte_end":58171,"line_start":895,"line_end":895,"column_start":5,"column_end":79}},{"value":"/ the `Write` trait functions to the `BufMut` trait functions. Given that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58176,"byte_end":58251,"line_start":896,"line_end":896,"column_start":5,"column_end":80}},{"value":"/ `BufMut` operations are infallible, none of the `Write` functions will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58256,"byte_end":58330,"line_start":897,"line_end":897,"column_start":5,"column_end":79}},{"value":"/ return with `Err`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58335,"byte_end":58357,"line_start":898,"line_end":898,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58362,"byte_end":58365,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58370,"byte_end":58384,"line_start":900,"line_end":900,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58389,"byte_end":58392,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58397,"byte_end":58404,"line_start":902,"line_end":902,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58409,"byte_end":58431,"line_start":903,"line_end":903,"column_start":5,"column_end":27}},{"value":"/ use std::io::Write;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58436,"byte_end":58459,"line_start":904,"line_end":904,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58464,"byte_end":58467,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![].writer();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58472,"byte_end":58506,"line_start":906,"line_end":906,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58511,"byte_end":58514,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ let num = buf.write(&b\"hello world\"[..]).unwrap();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58519,"byte_end":58573,"line_start":908,"line_end":908,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(11, num);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58578,"byte_end":58602,"line_start":909,"line_end":909,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58607,"byte_end":58610,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ let buf = buf.into_inner();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58615,"byte_end":58646,"line_start":911,"line_end":911,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58651,"byte_end":58654,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*buf, b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58659,"byte_end":58700,"line_start":913,"line_end":913,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58705,"byte_end":58712,"line_start":914,"line_end":914,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58717,"byte_end":58740,"line_start":915,"line_end":915,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59415,"byte_end":59424,"line_start":943,"line_end":943,"column_start":8,"column_end":17},"name":"chain_mut","qualname":"::buf::buf_mut::BufMut::chain_mut","value":"pub fn chain_mut<U: BufMut>(Self, U) -> Chain<Self, U> where Self: Sized","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Creates an adapter which will chain this buffer with another.","sig":null,"attributes":[{"value":"/ Creates an adapter which will chain this buffer with another.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58851,"byte_end":58916,"line_start":923,"line_end":923,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58921,"byte_end":58924,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ The returned `BufMut` instance will first write to all bytes from","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":58929,"byte_end":58998,"line_start":925,"line_end":925,"column_start":5,"column_end":74}},{"value":"/ `self`. Afterwards, it will write to `next`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59003,"byte_end":59051,"line_start":926,"line_end":926,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59056,"byte_end":59059,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59064,"byte_end":59078,"line_start":928,"line_end":928,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59083,"byte_end":59086,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59091,"byte_end":59098,"line_start":930,"line_end":930,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59103,"byte_end":59125,"line_start":931,"line_end":931,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59130,"byte_end":59133,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ let mut a = [0u8; 5];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59138,"byte_end":59163,"line_start":933,"line_end":933,"column_start":5,"column_end":30}},{"value":"/ let mut b = [0u8; 6];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59168,"byte_end":59193,"line_start":934,"line_end":934,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59198,"byte_end":59201,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ let mut chain = (&mut a[..]).chain_mut(&mut b[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59206,"byte_end":59261,"line_start":936,"line_end":936,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59266,"byte_end":59269,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ chain.put_slice(b\"hello world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59274,"byte_end":59310,"line_start":938,"line_end":938,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59315,"byte_end":59318,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&a[..], b\"hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59323,"byte_end":59356,"line_start":940,"line_end":940,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(&b[..], b\" world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59361,"byte_end":59395,"line_start":941,"line_end":941,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":59400,"byte_end":59407,"line_start":942,"line_end":942,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1233},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65070,"byte_end":65075,"line_start":32,"line_end":32,"column_start":12,"column_end":17},"name":"Chain","qualname":"::buf::chain::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1237}],"decl_id":null,"docs":" A `Chain` sequences two buffers.","sig":null,"attributes":[{"value":"/ A `Chain` sequences two buffers.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64299,"byte_end":64335,"line_start":7,"line_end":7,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64336,"byte_end":64339,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ `Chain` is an adapter that links two underlying buffers and provides a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64340,"byte_end":64414,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/ continuous view across both buffers. It is able to sequence either immutable","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64415,"byte_end":64495,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ buffers ([`Buf`] values) or mutable buffers ([`BufMut`] values).","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64496,"byte_end":64564,"line_start":11,"line_end":11,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64565,"byte_end":64568,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This struct is generally created by calling [`Buf::chain`]. Please see that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64569,"byte_end":64648,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ function's documentation for more detail.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64649,"byte_end":64694,"line_start":14,"line_end":14,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64695,"byte_end":64698,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64699,"byte_end":64713,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64714,"byte_end":64717,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64718,"byte_end":64725,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ use bytes::{Bytes, Buf};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64726,"byte_end":64754,"line_start":19,"line_end":19,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64755,"byte_end":64758,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ let mut buf = (&b\"hello \"[..])","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64759,"byte_end":64793,"line_start":21,"line_end":21,"column_start":1,"column_end":35}},{"value":"/     .chain(&b\"world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64794,"byte_end":64824,"line_start":22,"line_end":22,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64825,"byte_end":64828,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let full: Bytes = buf.copy_to_bytes(11);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64829,"byte_end":64873,"line_start":24,"line_end":24,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(full[..], b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64874,"byte_end":64919,"line_start":25,"line_end":25,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64920,"byte_end":64927,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64928,"byte_end":64931,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`Buf::chain`]: trait.Buf.html#method.chain","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64932,"byte_end":64979,"line_start":28,"line_end":28,"column_start":1,"column_end":48}},{"value":"/ [`Buf`]: trait.Buf.html","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":64980,"byte_end":65007,"line_start":29,"line_end":29,"column_start":1,"column_end":28}},{"value":"/ [`BufMut`]: trait.BufMut.html","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65008,"byte_end":65041,"line_start":30,"line_end":30,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65565,"byte_end":65574,"line_start":55,"line_end":55,"column_start":12,"column_end":21},"name":"first_ref","qualname":"<Chain<T, U>>::first_ref","value":"pub fn first_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the first underlying `Buf`.","sig":null,"attributes":[{"value":"/ Gets a reference to the first underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65279,"byte_end":65330,"line_start":43,"line_end":43,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65335,"byte_end":65338,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65343,"byte_end":65357,"line_start":45,"line_end":45,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65362,"byte_end":65365,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65370,"byte_end":65377,"line_start":47,"line_end":47,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65382,"byte_end":65401,"line_start":48,"line_end":48,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65406,"byte_end":65409,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ let buf = (&b\"hello\"[..])","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65414,"byte_end":65443,"line_start":50,"line_end":50,"column_start":5,"column_end":34}},{"value":"/     .chain(&b\"world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65448,"byte_end":65478,"line_start":51,"line_end":51,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65483,"byte_end":65486,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.first_ref()[..], b\"hello\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65491,"byte_end":65541,"line_start":53,"line_end":53,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65546,"byte_end":65553,"line_start":54,"line_end":54,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65989,"byte_end":65998,"line_start":74,"line_end":74,"column_start":12,"column_end":21},"name":"first_mut","qualname":"<Chain<T, U>>::first_mut","value":"pub fn first_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the first underlying `Buf`.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the first underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65617,"byte_end":65676,"line_start":59,"line_end":59,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65681,"byte_end":65684,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65689,"byte_end":65703,"line_start":61,"line_end":61,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65708,"byte_end":65711,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65716,"byte_end":65723,"line_start":63,"line_end":63,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65728,"byte_end":65747,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65752,"byte_end":65755,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ let mut buf = (&b\"hello\"[..])","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65760,"byte_end":65793,"line_start":66,"line_end":66,"column_start":5,"column_end":38}},{"value":"/     .chain(&b\"world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65798,"byte_end":65828,"line_start":67,"line_end":67,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65833,"byte_end":65836,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ buf.first_mut().advance(1);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65841,"byte_end":65872,"line_start":69,"line_end":69,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65877,"byte_end":65880,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ let full = buf.copy_to_bytes(9);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65885,"byte_end":65921,"line_start":71,"line_end":71,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(full, b\"elloworld\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65926,"byte_end":65965,"line_start":72,"line_end":72,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65970,"byte_end":65977,"line_start":73,"line_end":73,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66337,"byte_end":66345,"line_start":90,"line_end":90,"column_start":12,"column_end":20},"name":"last_ref","qualname":"<Chain<T, U>>::last_ref","value":"pub fn last_ref(&Self) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the last underlying `Buf`.","sig":null,"attributes":[{"value":"/ Gets a reference to the last underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66053,"byte_end":66103,"line_start":78,"line_end":78,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66108,"byte_end":66111,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66116,"byte_end":66130,"line_start":80,"line_end":80,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66135,"byte_end":66138,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66143,"byte_end":66150,"line_start":82,"line_end":82,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66155,"byte_end":66174,"line_start":83,"line_end":83,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66179,"byte_end":66182,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ let buf = (&b\"hello\"[..])","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66187,"byte_end":66216,"line_start":85,"line_end":85,"column_start":5,"column_end":34}},{"value":"/     .chain(&b\"world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66221,"byte_end":66251,"line_start":86,"line_end":86,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66256,"byte_end":66259,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.last_ref()[..], b\"world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66264,"byte_end":66313,"line_start":88,"line_end":88,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66318,"byte_end":66325,"line_start":89,"line_end":89,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66761,"byte_end":66769,"line_start":109,"line_end":109,"column_start":12,"column_end":20},"name":"last_mut","qualname":"<Chain<T, U>>::last_mut","value":"pub fn last_mut(&mut Self) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the last underlying `Buf`.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the last underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66388,"byte_end":66446,"line_start":94,"line_end":94,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66451,"byte_end":66454,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66459,"byte_end":66473,"line_start":96,"line_end":96,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66478,"byte_end":66481,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66486,"byte_end":66493,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66498,"byte_end":66517,"line_start":99,"line_end":99,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66522,"byte_end":66525,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ let mut buf = (&b\"hello \"[..])","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66530,"byte_end":66564,"line_start":101,"line_end":101,"column_start":5,"column_end":39}},{"value":"/     .chain(&b\"world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66569,"byte_end":66599,"line_start":102,"line_end":102,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66604,"byte_end":66607,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ buf.last_mut().advance(1);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66612,"byte_end":66642,"line_start":104,"line_end":104,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66647,"byte_end":66650,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ let full = buf.copy_to_bytes(10);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66655,"byte_end":66692,"line_start":106,"line_end":106,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(full, b\"hello orld\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66697,"byte_end":66737,"line_start":107,"line_end":107,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66742,"byte_end":66749,"line_start":108,"line_end":108,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":67202,"byte_end":67212,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Chain<T, U>>::into_inner","value":"pub fn into_inner(Self) -> (T, U)","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `Chain`, returning the underlying values.","sig":null,"attributes":[{"value":"/ Consumes this `Chain`, returning the underlying values.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66824,"byte_end":66883,"line_start":113,"line_end":113,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66888,"byte_end":66891,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66896,"byte_end":66910,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66915,"byte_end":66918,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66923,"byte_end":66930,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66935,"byte_end":66954,"line_start":118,"line_end":118,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66959,"byte_end":66962,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ let chain = (&b\"hello\"[..])","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":66967,"byte_end":66998,"line_start":120,"line_end":120,"column_start":5,"column_end":36}},{"value":"/     .chain(&b\"world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":67003,"byte_end":67033,"line_start":121,"line_end":121,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":67038,"byte_end":67041,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ let (first, last) = chain.into_inner();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":67046,"byte_end":67089,"line_start":123,"line_end":123,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(first[..], b\"hello\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":67094,"byte_end":67134,"line_start":124,"line_end":124,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(last[..], b\"world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":67139,"byte_end":67178,"line_start":125,"line_end":125,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":67183,"byte_end":67190,"line_start":126,"line_end":126,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1242},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70348,"byte_end":70356,"line_start":26,"line_end":26,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::buf::iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1244}],"decl_id":null,"docs":" Iterator over the bytes contained by the buffer.","sig":null,"attributes":[{"value":"/ Iterator over the bytes contained by the buffer.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":69804,"byte_end":69856,"line_start":3,"line_end":3,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":69857,"byte_end":69860,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`iter`] method on [`Buf`].","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":69861,"byte_end":69922,"line_start":5,"line_end":5,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":69923,"byte_end":69926,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":69927,"byte_end":69941,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":69942,"byte_end":69945,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":69946,"byte_end":69962,"line_start":9,"line_end":9,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":69963,"byte_end":69966,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":69967,"byte_end":69974,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use bytes::Bytes;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":69975,"byte_end":69996,"line_start":12,"line_end":12,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":69997,"byte_end":70000,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ let buf = Bytes::from(&b\"abc\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70001,"byte_end":70040,"line_start":14,"line_end":14,"column_start":1,"column_end":40}},{"value":"/ let mut iter = buf.into_iter();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70041,"byte_end":70076,"line_start":15,"line_end":15,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70077,"byte_end":70080,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(iter.next(), Some(b'a'));","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70081,"byte_end":70121,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(iter.next(), Some(b'b'));","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70122,"byte_end":70162,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(iter.next(), Some(b'c'));","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70163,"byte_end":70203,"line_start":19,"line_end":19,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70204,"byte_end":70238,"line_start":20,"line_end":20,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70239,"byte_end":70246,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70247,"byte_end":70250,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: trait.Buf.html#method.iter","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70251,"byte_end":70291,"line_start":23,"line_end":23,"column_start":1,"column_end":41}},{"value":"/ [`Buf`]: trait.Buf.html","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70292,"byte_end":70319,"line_start":24,"line_end":24,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71316,"byte_end":71326,"line_start":65,"line_end":65,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<IntoIter<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `IntoIter`, returning the underlying value.","sig":null,"attributes":[{"value":"/ Consumes this `IntoIter`, returning the underlying value.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70917,"byte_end":70978,"line_start":50,"line_end":50,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70983,"byte_end":70986,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70991,"byte_end":71005,"line_start":52,"line_end":52,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71010,"byte_end":71013,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71018,"byte_end":71029,"line_start":54,"line_end":54,"column_start":5,"column_end":16}},{"value":"/ use bytes::{Buf, Bytes};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71034,"byte_end":71062,"line_start":55,"line_end":55,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71067,"byte_end":71070,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ let buf = Bytes::from(&b\"abc\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71075,"byte_end":71114,"line_start":57,"line_end":57,"column_start":5,"column_end":44}},{"value":"/ let mut iter = buf.into_iter();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71119,"byte_end":71154,"line_start":58,"line_end":58,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71159,"byte_end":71162,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(iter.next(), Some(b'a'));","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71167,"byte_end":71207,"line_start":60,"line_end":60,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71212,"byte_end":71215,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ let buf = iter.into_inner();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71220,"byte_end":71252,"line_start":62,"line_end":62,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(2, buf.remaining());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71257,"byte_end":71292,"line_start":63,"line_end":63,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71297,"byte_end":71304,"line_start":64,"line_end":64,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71805,"byte_end":71812,"line_start":85,"line_end":85,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<IntoIter<T>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying `Buf`.","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71370,"byte_end":71415,"line_start":69,"line_end":69,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71420,"byte_end":71423,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly read from the underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71428,"byte_end":71493,"line_start":71,"line_end":71,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71498,"byte_end":71501,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71506,"byte_end":71520,"line_start":73,"line_end":73,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71525,"byte_end":71528,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71533,"byte_end":71544,"line_start":75,"line_end":75,"column_start":5,"column_end":16}},{"value":"/ use bytes::{Buf, Bytes};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71549,"byte_end":71577,"line_start":76,"line_end":76,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71582,"byte_end":71585,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ let buf = Bytes::from(&b\"abc\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71590,"byte_end":71629,"line_start":78,"line_end":78,"column_start":5,"column_end":44}},{"value":"/ let mut iter = buf.into_iter();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71634,"byte_end":71669,"line_start":79,"line_end":79,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71674,"byte_end":71677,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(iter.next(), Some(b'a'));","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71682,"byte_end":71722,"line_start":81,"line_end":81,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71727,"byte_end":71730,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(2, iter.get_ref().remaining());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71735,"byte_end":71781,"line_start":83,"line_end":83,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71786,"byte_end":71793,"line_start":84,"line_end":84,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72345,"byte_end":72352,"line_start":107,"line_end":107,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IntoIter<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying `Buf`.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71859,"byte_end":71912,"line_start":89,"line_end":89,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71917,"byte_end":71920,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly read from the underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71925,"byte_end":71990,"line_start":91,"line_end":91,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":71995,"byte_end":71998,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72003,"byte_end":72017,"line_start":93,"line_end":93,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72022,"byte_end":72025,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72030,"byte_end":72041,"line_start":95,"line_end":95,"column_start":5,"column_end":16}},{"value":"/ use bytes::{Buf, BytesMut};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72046,"byte_end":72077,"line_start":96,"line_end":96,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72082,"byte_end":72085,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ let buf = BytesMut::from(&b\"abc\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72090,"byte_end":72132,"line_start":98,"line_end":98,"column_start":5,"column_end":47}},{"value":"/ let mut iter = buf.into_iter();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72137,"byte_end":72172,"line_start":99,"line_end":99,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72177,"byte_end":72180,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(iter.next(), Some(b'a'));","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72185,"byte_end":72225,"line_start":101,"line_end":101,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72230,"byte_end":72233,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ iter.get_mut().advance(1);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72238,"byte_end":72268,"line_start":103,"line_end":103,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72273,"byte_end":72276,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(iter.next(), Some(b'c'));","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72281,"byte_end":72321,"line_start":105,"line_end":105,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72326,"byte_end":72333,"line_start":106,"line_end":106,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1248},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73057,"byte_end":73062,"line_start":9,"line_end":9,"column_start":12,"column_end":17},"name":"Limit","qualname":"::buf::limit::Limit","value":"Limit {  }","parent":null,"children":[{"krate":0,"index":1250},{"krate":0,"index":1251}],"decl_id":null,"docs":" A `BufMut` adapter which limits the amount of bytes that can be written\n to an underlying buffer.\n","sig":null,"attributes":[{"value":"/ A `BufMut` adapter which limits the amount of bytes that can be written","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":72924,"byte_end":72999,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ to an underlying buffer.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73000,"byte_end":73028,"line_start":7,"line_end":7,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73285,"byte_end":73295,"line_start":20,"line_end":20,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Limit<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `Limit`, returning the underlying value.\n","sig":null,"attributes":[{"value":"/ Consumes this `Limit`, returning the underlying value.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73215,"byte_end":73273,"line_start":19,"line_end":19,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73479,"byte_end":73486,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Limit<T>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying `BufMut`.","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying `BufMut`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73339,"byte_end":73387,"line_start":24,"line_end":24,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73392,"byte_end":73395,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly write to the underlying `BufMut`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73400,"byte_end":73467,"line_start":26,"line_end":26,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73681,"byte_end":73688,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Limit<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying `BufMut`.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying `BufMut`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73533,"byte_end":73589,"line_start":31,"line_end":31,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73594,"byte_end":73597,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly write to the underlying `BufMut`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73602,"byte_end":73669,"line_start":33,"line_end":33,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73984,"byte_end":73989,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"name":"limit","qualname":"<Limit<T>>::limit","value":"pub fn limit(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of bytes that can be written","sig":null,"attributes":[{"value":"/ Returns the maximum number of bytes that can be written","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73747,"byte_end":73806,"line_start":38,"line_end":38,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73811,"byte_end":73814,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73819,"byte_end":73829,"line_start":40,"line_end":40,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73834,"byte_end":73837,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ If the inner `BufMut` has fewer bytes than indicated by this method then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73842,"byte_end":73918,"line_start":42,"line_end":42,"column_start":5,"column_end":81}},{"value":"/ that is the actual number of available bytes.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73923,"byte_end":73972,"line_start":43,"line_end":43,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":74254,"byte_end":74263,"line_start":54,"line_end":54,"column_start":12,"column_end":21},"name":"set_limit","qualname":"<Limit<T>>::set_limit","value":"pub fn set_limit(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Sets the maximum number of bytes that can be written.","sig":null,"attributes":[{"value":"/ Sets the maximum number of bytes that can be written.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":74038,"byte_end":74095,"line_start":48,"line_end":48,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":74100,"byte_end":74103,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":74108,"byte_end":74118,"line_start":50,"line_end":50,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":74123,"byte_end":74126,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ If the inner `BufMut` has fewer bytes than `lim` then that is the actual","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":74131,"byte_end":74207,"line_start":52,"line_end":52,"column_start":5,"column_end":81}},{"value":"/ number of available bytes.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":74212,"byte_end":74242,"line_start":53,"line_end":53,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":1255},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75109,"byte_end":75115,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"Reader","qualname":"::buf::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":1257}],"decl_id":null,"docs":" A `Buf` adapter which implements `io::Read` for the inner value.","sig":null,"attributes":[{"value":"/ A `Buf` adapter which implements `io::Read` for the inner value.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":74849,"byte_end":74917,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":74918,"byte_end":74921,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This struct is generally created by calling `reader()` on `Buf`. See","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":74922,"byte_end":74994,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ documentation of [`reader()`](trait.Buf.html#method.reader) for more","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":74995,"byte_end":75067,"line_start":8,"line_end":8,"column_start":1,"column_end":73}},{"value":"/ details.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75068,"byte_end":75080,"line_start":9,"line_end":9,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75556,"byte_end":75563,"line_start":33,"line_end":33,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Reader<B>>::get_ref","value":"pub fn get_ref(&Self) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying `Buf`.","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75224,"byte_end":75269,"line_start":20,"line_end":20,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75274,"byte_end":75277,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly read from the underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75282,"byte_end":75347,"line_start":22,"line_end":22,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75352,"byte_end":75355,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75360,"byte_end":75374,"line_start":24,"line_end":24,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75379,"byte_end":75382,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75387,"byte_end":75398,"line_start":26,"line_end":26,"column_start":5,"column_end":16}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75403,"byte_end":75422,"line_start":27,"line_end":27,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75427,"byte_end":75430,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ let buf = b\"hello world\".reader();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75435,"byte_end":75473,"line_start":29,"line_end":29,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75478,"byte_end":75481,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"hello world\", buf.get_ref());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75486,"byte_end":75532,"line_start":31,"line_end":31,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75537,"byte_end":75544,"line_start":32,"line_end":32,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75751,"byte_end":75758,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Reader<B>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying `Buf`.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75608,"byte_end":75661,"line_start":37,"line_end":37,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75666,"byte_end":75669,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly read from the underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75674,"byte_end":75739,"line_start":39,"line_end":39,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":76218,"byte_end":76228,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<B>>::into_inner","value":"pub fn into_inner(Self) -> B","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `Reader`, returning the underlying value.","sig":null,"attributes":[{"value":"/ Consumes this `Reader`, returning the underlying value.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75815,"byte_end":75874,"line_start":44,"line_end":44,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75879,"byte_end":75882,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75887,"byte_end":75901,"line_start":46,"line_end":46,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75906,"byte_end":75909,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75914,"byte_end":75925,"line_start":48,"line_end":48,"column_start":5,"column_end":16}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75930,"byte_end":75949,"line_start":49,"line_end":49,"column_start":5,"column_end":24}},{"value":"/ use std::io;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75954,"byte_end":75970,"line_start":50,"line_end":50,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75975,"byte_end":75978,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ let mut buf = b\"hello world\".reader();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75983,"byte_end":76025,"line_start":52,"line_end":52,"column_start":5,"column_end":47}},{"value":"/ let mut dst = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":76030,"byte_end":76055,"line_start":53,"line_end":53,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":76060,"byte_end":76063,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ io::copy(&mut buf, &mut dst).unwrap();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":76068,"byte_end":76110,"line_start":55,"line_end":55,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":76115,"byte_end":76118,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ let buf = buf.into_inner();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":76123,"byte_end":76154,"line_start":57,"line_end":57,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(0, buf.remaining());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":76159,"byte_end":76194,"line_start":58,"line_end":58,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":76199,"byte_end":76206,"line_start":59,"line_end":59,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1261},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77035,"byte_end":77039,"line_start":10,"line_end":10,"column_start":12,"column_end":16},"name":"Take","qualname":"::buf::take::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264}],"decl_id":null,"docs":" A `Buf` adapter which limits the bytes read from an underlying buffer.","sig":null,"attributes":[{"value":"/ A `Buf` adapter which limits the bytes read from an underlying buffer.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":76779,"byte_end":76853,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":76854,"byte_end":76857,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This struct is generally created by calling `take()` on `Buf`. See","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":76858,"byte_end":76928,"line_start":7,"line_end":7,"column_start":1,"column_end":71}},{"value":"/ documentation of [`take()`](trait.Buf.html#method.take) for more details.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":76929,"byte_end":77006,"line_start":8,"line_end":8,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77652,"byte_end":77662,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Take<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `Take`, returning the underlying value.","sig":null,"attributes":[{"value":"/ Consumes this `Take`, returning the underlying value.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77182,"byte_end":77239,"line_start":20,"line_end":20,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77244,"byte_end":77247,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77252,"byte_end":77266,"line_start":22,"line_end":22,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77271,"byte_end":77274,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77279,"byte_end":77290,"line_start":24,"line_end":24,"column_start":5,"column_end":16}},{"value":"/ use bytes::{Buf, BufMut};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77295,"byte_end":77324,"line_start":25,"line_end":25,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77329,"byte_end":77332,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ let mut buf = b\"hello world\".take(2);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77337,"byte_end":77378,"line_start":27,"line_end":27,"column_start":5,"column_end":46}},{"value":"/ let mut dst = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77383,"byte_end":77408,"line_start":28,"line_end":28,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77413,"byte_end":77416,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ dst.put(&mut buf);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77421,"byte_end":77443,"line_start":30,"line_end":30,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(*dst, b\"he\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77448,"byte_end":77480,"line_start":31,"line_end":31,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77485,"byte_end":77488,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ let mut buf = buf.into_inner();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77493,"byte_end":77528,"line_start":33,"line_end":33,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77533,"byte_end":77536,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ dst.clear();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77541,"byte_end":77557,"line_start":35,"line_end":35,"column_start":5,"column_end":21}},{"value":"/ dst.put(&mut buf);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77562,"byte_end":77584,"line_start":36,"line_end":36,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(*dst, b\"llo world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77589,"byte_end":77628,"line_start":37,"line_end":37,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77633,"byte_end":77640,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78037,"byte_end":78044,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Take<T>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying `Buf`.","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77706,"byte_end":77751,"line_start":43,"line_end":43,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77756,"byte_end":77759,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly read from the underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77764,"byte_end":77829,"line_start":45,"line_end":45,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77834,"byte_end":77837,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77842,"byte_end":77856,"line_start":47,"line_end":47,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77861,"byte_end":77864,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77869,"byte_end":77880,"line_start":49,"line_end":49,"column_start":5,"column_end":16}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77885,"byte_end":77904,"line_start":50,"line_end":50,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77909,"byte_end":77912,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ let buf = b\"hello world\".take(2);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77917,"byte_end":77954,"line_start":52,"line_end":52,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77959,"byte_end":77962,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(11, buf.get_ref().remaining());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77967,"byte_end":78013,"line_start":54,"line_end":54,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78018,"byte_end":78025,"line_start":55,"line_end":55,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78529,"byte_end":78536,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Take<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying `Buf`.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78091,"byte_end":78144,"line_start":60,"line_end":60,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78149,"byte_end":78152,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly read from the underlying `Buf`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78157,"byte_end":78222,"line_start":62,"line_end":62,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78227,"byte_end":78230,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78235,"byte_end":78249,"line_start":64,"line_end":64,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78254,"byte_end":78257,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78262,"byte_end":78273,"line_start":66,"line_end":66,"column_start":5,"column_end":16}},{"value":"/ use bytes::{Buf, BufMut};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78278,"byte_end":78307,"line_start":67,"line_end":67,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78312,"byte_end":78315,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ let mut buf = b\"hello world\".take(2);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78320,"byte_end":78361,"line_start":69,"line_end":69,"column_start":5,"column_end":46}},{"value":"/ let mut dst = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78366,"byte_end":78391,"line_start":70,"line_end":70,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78396,"byte_end":78399,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ buf.get_mut().advance(2);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78404,"byte_end":78433,"line_start":72,"line_end":72,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78438,"byte_end":78441,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ dst.put(&mut buf);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78446,"byte_end":78468,"line_start":74,"line_end":74,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(*dst, b\"ll\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78473,"byte_end":78505,"line_start":75,"line_end":75,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78510,"byte_end":78517,"line_start":76,"line_end":76,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79088,"byte_end":79093,"line_start":99,"line_end":99,"column_start":12,"column_end":17},"name":"limit","qualname":"<Take<T>>::limit","value":"pub fn limit(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of bytes that can be read.","sig":null,"attributes":[{"value":"/ Returns the maximum number of bytes that can be read.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78595,"byte_end":78652,"line_start":81,"line_end":81,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78657,"byte_end":78660,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78665,"byte_end":78675,"line_start":83,"line_end":83,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78680,"byte_end":78683,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ If the inner `Buf` has fewer bytes than indicated by this method then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78688,"byte_end":78761,"line_start":85,"line_end":85,"column_start":5,"column_end":78}},{"value":"/ that is the actual number of available bytes.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78766,"byte_end":78815,"line_start":86,"line_end":86,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78820,"byte_end":78823,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78828,"byte_end":78842,"line_start":88,"line_end":88,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78847,"byte_end":78850,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78855,"byte_end":78866,"line_start":90,"line_end":90,"column_start":5,"column_end":16}},{"value":"/ use bytes::Buf;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78871,"byte_end":78890,"line_start":91,"line_end":91,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78895,"byte_end":78898,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ let mut buf = b\"hello world\".take(2);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78903,"byte_end":78944,"line_start":93,"line_end":93,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78949,"byte_end":78952,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(2, buf.limit());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78957,"byte_end":78988,"line_start":95,"line_end":95,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(b'h', buf.get_u8());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":78993,"byte_end":79028,"line_start":96,"line_end":96,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(1, buf.limit());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79033,"byte_end":79064,"line_start":97,"line_end":97,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79069,"byte_end":79076,"line_start":98,"line_end":98,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79733,"byte_end":79742,"line_start":127,"line_end":127,"column_start":12,"column_end":21},"name":"set_limit","qualname":"<Take<T>>::set_limit","value":"pub fn set_limit(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Sets the maximum number of bytes that can be read.","sig":null,"attributes":[{"value":"/ Sets the maximum number of bytes that can be read.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79142,"byte_end":79196,"line_start":103,"line_end":103,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79201,"byte_end":79204,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79209,"byte_end":79219,"line_start":105,"line_end":105,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79224,"byte_end":79227,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ If the inner `Buf` has fewer bytes than `lim` then that is the actual","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79232,"byte_end":79305,"line_start":107,"line_end":107,"column_start":5,"column_end":78}},{"value":"/ number of available bytes.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79310,"byte_end":79340,"line_start":108,"line_end":108,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79345,"byte_end":79348,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79353,"byte_end":79367,"line_start":110,"line_end":110,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79372,"byte_end":79375,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79380,"byte_end":79391,"line_start":112,"line_end":112,"column_start":5,"column_end":16}},{"value":"/ use bytes::{Buf, BufMut};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79396,"byte_end":79425,"line_start":113,"line_end":113,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79430,"byte_end":79433,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ let mut buf = b\"hello world\".take(2);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79438,"byte_end":79479,"line_start":115,"line_end":115,"column_start":5,"column_end":46}},{"value":"/ let mut dst = vec![];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79484,"byte_end":79509,"line_start":116,"line_end":116,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79514,"byte_end":79517,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ dst.put(&mut buf);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79522,"byte_end":79544,"line_start":118,"line_end":118,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(*dst, b\"he\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79549,"byte_end":79581,"line_start":119,"line_end":119,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79586,"byte_end":79589,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ dst.clear();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79594,"byte_end":79610,"line_start":121,"line_end":121,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79615,"byte_end":79618,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ buf.set_limit(3);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79623,"byte_end":79644,"line_start":123,"line_end":123,"column_start":5,"column_end":26}},{"value":"/ dst.put(&mut buf);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79649,"byte_end":79671,"line_start":124,"line_end":124,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(*dst, b\"llo\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79676,"byte_end":79709,"line_start":125,"line_end":125,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79714,"byte_end":79721,"line_start":126,"line_end":126,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":374},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81221,"byte_end":81232,"line_start":22,"line_end":22,"column_start":12,"column_end":23},"name":"UninitSlice","qualname":"::buf::uninit_slice::UninitSlice","value":"","parent":null,"children":[],"decl_id":null,"docs":" Uninitialized byte slice.","sig":null,"attributes":[{"value":"/ Uninitialized byte slice.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":80581,"byte_end":80610,"line_start":7,"line_end":7,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":80611,"byte_end":80614,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Returned by `BufMut::chunk_mut()`, the referenced byte slice may be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":80615,"byte_end":80686,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ uninitialized. The wrapper provides safe access without introducing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":80687,"byte_end":80758,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ undefined behavior.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":80759,"byte_end":80782,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":80783,"byte_end":80786,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The safety invariants of this wrapper are:","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":80787,"byte_end":80833,"line_start":13,"line_end":13,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":80834,"byte_end":80837,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/  1. Reading from an `UninitSlice` is undefined behavior.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":80838,"byte_end":80898,"line_start":15,"line_end":15,"column_start":1,"column_end":61}},{"value":"/  2. Writing uninitialized bytes to an `UninitSlice` is undefined behavior.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":80899,"byte_end":80977,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":80978,"byte_end":80981,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The difference between `&mut UninitSlice` and `&mut [MaybeUninit<u8>]` is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":80982,"byte_end":81059,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ that it is possible in safe code to write uninitialized bytes to an","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81060,"byte_end":81131,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ `&mut [MaybeUninit<u8>]`, which this type prohibits.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81132,"byte_end":81188,"line_start":20,"line_end":20,"column_start":1,"column_end":57}},{"value":"repr(transparent)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81189,"byte_end":81209,"line_start":21,"line_end":21,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81864,"byte_end":81882,"line_start":44,"line_end":44,"column_start":19,"column_end":37},"name":"from_raw_parts_mut","qualname":"<UninitSlice>::from_raw_parts_mut","value":"pub unsafe fn from_raw_parts_mut<'a>(*mut u8, usize) -> &'a mut UninitSlice","parent":null,"children":[],"decl_id":null,"docs":" Create a `&mut UninitSlice` from a pointer and a length.","sig":null,"attributes":[{"value":"/ Create a `&mut UninitSlice` from a pointer and a length.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81277,"byte_end":81337,"line_start":25,"line_end":25,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81342,"byte_end":81345,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81350,"byte_end":81362,"line_start":27,"line_end":27,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81367,"byte_end":81370,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that `ptr` references a valid memory region owned","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81375,"byte_end":81451,"line_start":29,"line_end":29,"column_start":5,"column_end":81}},{"value":"/ by the caller representing a byte slice for the duration of `'a`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81456,"byte_end":81525,"line_start":30,"line_end":30,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81530,"byte_end":81533,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81538,"byte_end":81552,"line_start":32,"line_end":32,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81557,"byte_end":81560,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81565,"byte_end":81572,"line_start":34,"line_end":34,"column_start":5,"column_end":12}},{"value":"/ use bytes::buf::UninitSlice;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81577,"byte_end":81609,"line_start":35,"line_end":35,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81614,"byte_end":81617,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ let bytes = b\"hello world\".to_vec();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81622,"byte_end":81662,"line_start":37,"line_end":37,"column_start":5,"column_end":45}},{"value":"/ let ptr = bytes.as_ptr() as *mut _;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81667,"byte_end":81706,"line_start":38,"line_end":38,"column_start":5,"column_end":44}},{"value":"/ let len = bytes.len();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81711,"byte_end":81737,"line_start":39,"line_end":39,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81742,"byte_end":81745,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81750,"byte_end":81819,"line_start":41,"line_end":41,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81824,"byte_end":81831,"line_start":42,"line_end":42,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81836,"byte_end":81845,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82623,"byte_end":82633,"line_start":69,"line_end":69,"column_start":12,"column_end":22},"name":"write_byte","qualname":"<UninitSlice>::write_byte","value":"pub fn write_byte(&mut Self, usize, u8)","parent":null,"children":[],"decl_id":null,"docs":" Write a single byte at the specified offset.","sig":null,"attributes":[{"value":"/ Write a single byte at the specified offset.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82136,"byte_end":82184,"line_start":50,"line_end":50,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82189,"byte_end":82192,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82197,"byte_end":82209,"line_start":52,"line_end":52,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82214,"byte_end":82217,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ The function panics if `index` is out of bounds.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82222,"byte_end":82274,"line_start":54,"line_end":54,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82279,"byte_end":82282,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82287,"byte_end":82301,"line_start":56,"line_end":56,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82306,"byte_end":82309,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82314,"byte_end":82321,"line_start":58,"line_end":58,"column_start":5,"column_end":12}},{"value":"/ use bytes::buf::UninitSlice;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82326,"byte_end":82358,"line_start":59,"line_end":59,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82363,"byte_end":82366,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ let mut data = [b'f', b'o', b'o'];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82371,"byte_end":82409,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"/ let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82414,"byte_end":82495,"line_start":62,"line_end":62,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82500,"byte_end":82503,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ slice.write_byte(0, b'b');","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82508,"byte_end":82538,"line_start":64,"line_end":64,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82543,"byte_end":82546,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"boo\", &data[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82551,"byte_end":82585,"line_start":66,"line_end":66,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82590,"byte_end":82597,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82602,"byte_end":82611,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83342,"byte_end":83357,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"copy_from_slice","qualname":"<UninitSlice>::copy_from_slice","value":"pub fn copy_from_slice(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Copies bytes  from `src` into `self`.","sig":null,"attributes":[{"value":"/ Copies bytes  from `src` into `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82778,"byte_end":82819,"line_start":75,"line_end":75,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82824,"byte_end":82827,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82832,"byte_end":82883,"line_start":77,"line_end":77,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82888,"byte_end":82891,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82896,"byte_end":82908,"line_start":79,"line_end":79,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82913,"byte_end":82916,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ The function panics if `src` has a different length than `self`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82921,"byte_end":82989,"line_start":81,"line_end":81,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":82994,"byte_end":82997,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83002,"byte_end":83016,"line_start":83,"line_end":83,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83021,"byte_end":83024,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83029,"byte_end":83036,"line_start":85,"line_end":85,"column_start":5,"column_end":12}},{"value":"/ use bytes::buf::UninitSlice;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83041,"byte_end":83073,"line_start":86,"line_end":86,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83078,"byte_end":83081,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ let mut data = [b'f', b'o', b'o'];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83086,"byte_end":83124,"line_start":88,"line_end":88,"column_start":5,"column_end":43}},{"value":"/ let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83129,"byte_end":83210,"line_start":89,"line_end":89,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83215,"byte_end":83218,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ slice.copy_from_slice(b\"bar\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83223,"byte_end":83257,"line_start":91,"line_end":91,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83262,"byte_end":83265,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"bar\", &data[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83270,"byte_end":83304,"line_start":93,"line_end":93,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83309,"byte_end":83316,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83321,"byte_end":83330,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84047,"byte_end":84057,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<UninitSlice>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut u8","parent":null,"children":[],"decl_id":null,"docs":" Return a raw pointer to the slice's buffer.","sig":null,"attributes":[{"value":"/ Return a raw pointer to the slice's buffer.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83572,"byte_end":83619,"line_start":106,"line_end":106,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83624,"byte_end":83627,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83632,"byte_end":83644,"line_start":108,"line_end":108,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83649,"byte_end":83652,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ The caller **must not** read from the referenced memory and **must not**","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83657,"byte_end":83733,"line_start":110,"line_end":110,"column_start":5,"column_end":81}},{"value":"/ write **uninitialized** bytes to the slice either.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83738,"byte_end":83792,"line_start":111,"line_end":111,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83797,"byte_end":83800,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83805,"byte_end":83819,"line_start":113,"line_end":113,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83824,"byte_end":83827,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83832,"byte_end":83839,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83844,"byte_end":83866,"line_start":116,"line_end":116,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83871,"byte_end":83874,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ let mut data = [0, 1, 2];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83879,"byte_end":83908,"line_start":118,"line_end":118,"column_start":5,"column_end":34}},{"value":"/ let mut slice = &mut data[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83913,"byte_end":83947,"line_start":119,"line_end":119,"column_start":5,"column_end":39}},{"value":"/ let ptr = BufMut::chunk_mut(&mut slice).as_mut_ptr();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":83952,"byte_end":84009,"line_start":120,"line_end":120,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84014,"byte_end":84021,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84026,"byte_end":84035,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84460,"byte_end":84463,"line_start":141,"line_end":141,"column_start":12,"column_end":15},"name":"len","qualname":"<UninitSlice>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes in the slice.","sig":null,"attributes":[{"value":"/ Returns the number of bytes in the slice.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84131,"byte_end":84176,"line_start":127,"line_end":127,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84181,"byte_end":84184,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84189,"byte_end":84203,"line_start":129,"line_end":129,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84208,"byte_end":84211,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84216,"byte_end":84223,"line_start":131,"line_end":131,"column_start":5,"column_end":12}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84228,"byte_end":84250,"line_start":132,"line_end":132,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84255,"byte_end":84258,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ let mut data = [0, 1, 2];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84263,"byte_end":84292,"line_start":134,"line_end":134,"column_start":5,"column_end":34}},{"value":"/ let mut slice = &mut data[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84297,"byte_end":84331,"line_start":135,"line_end":135,"column_start":5,"column_end":39}},{"value":"/ let len = BufMut::chunk_mut(&mut slice).len();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84336,"byte_end":84386,"line_start":136,"line_end":136,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84391,"byte_end":84394,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(len, 3);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84399,"byte_end":84422,"line_start":138,"line_end":138,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84427,"byte_end":84434,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84439,"byte_end":84448,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1298},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86334,"byte_end":86340,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"Writer","qualname":"::buf::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":1300}],"decl_id":null,"docs":" A `BufMut` adapter which implements `io::Write` for the inner value.","sig":null,"attributes":[{"value":"/ A `BufMut` adapter which implements `io::Write` for the inner value.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86064,"byte_end":86136,"line_start":5,"line_end":5,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86137,"byte_end":86140,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This struct is generally created by calling `writer()` on `BufMut`. See","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86141,"byte_end":86216,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ documentation of [`writer()`](trait.BufMut.html#method.writer) for more","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86217,"byte_end":86292,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ details.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86293,"byte_end":86305,"line_start":9,"line_end":9,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86803,"byte_end":86810,"line_start":33,"line_end":33,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Writer<B>>::get_ref","value":"pub fn get_ref(&Self) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying `BufMut`.","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying `BufMut`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86452,"byte_end":86500,"line_start":20,"line_end":20,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86505,"byte_end":86508,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly write to the underlying `BufMut`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86513,"byte_end":86580,"line_start":22,"line_end":22,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86585,"byte_end":86588,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86593,"byte_end":86607,"line_start":24,"line_end":24,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86612,"byte_end":86615,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86620,"byte_end":86631,"line_start":26,"line_end":26,"column_start":5,"column_end":16}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86636,"byte_end":86658,"line_start":27,"line_end":27,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86663,"byte_end":86666,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ let buf = Vec::with_capacity(1024).writer();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86671,"byte_end":86719,"line_start":29,"line_end":29,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86724,"byte_end":86727,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(1024, buf.get_ref().capacity());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86732,"byte_end":86779,"line_start":31,"line_end":31,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86784,"byte_end":86791,"line_start":32,"line_end":32,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87245,"byte_end":87252,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Writer<B>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying `BufMut`.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying `BufMut`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86855,"byte_end":86911,"line_start":37,"line_end":37,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86916,"byte_end":86919,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ It is inadvisable to directly write to the underlying `BufMut`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86924,"byte_end":86991,"line_start":39,"line_end":39,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86996,"byte_end":86999,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87004,"byte_end":87018,"line_start":41,"line_end":41,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87023,"byte_end":87026,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87031,"byte_end":87042,"line_start":43,"line_end":43,"column_start":5,"column_end":16}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87047,"byte_end":87069,"line_start":44,"line_end":44,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87074,"byte_end":87077,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![].writer();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87082,"byte_end":87116,"line_start":46,"line_end":46,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87121,"byte_end":87124,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ buf.get_mut().reserve(1024);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87129,"byte_end":87161,"line_start":48,"line_end":48,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87166,"byte_end":87169,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(1024, buf.get_ref().capacity());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87174,"byte_end":87221,"line_start":50,"line_end":50,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87226,"byte_end":87233,"line_start":51,"line_end":51,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87726,"byte_end":87736,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Writer<B>>::into_inner","value":"pub fn into_inner(Self) -> B","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `Writer`, returning the underlying value.","sig":null,"attributes":[{"value":"/ Consumes this `Writer`, returning the underlying value.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87309,"byte_end":87368,"line_start":56,"line_end":56,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87373,"byte_end":87376,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87381,"byte_end":87395,"line_start":58,"line_end":58,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87400,"byte_end":87403,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87408,"byte_end":87419,"line_start":60,"line_end":60,"column_start":5,"column_end":16}},{"value":"/ use bytes::BufMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87424,"byte_end":87446,"line_start":61,"line_end":61,"column_start":5,"column_end":27}},{"value":"/ use std::io;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87451,"byte_end":87467,"line_start":62,"line_end":62,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87472,"byte_end":87475,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![].writer();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87480,"byte_end":87514,"line_start":64,"line_end":64,"column_start":5,"column_end":39}},{"value":"/ let mut src = &b\"hello world\"[..];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87519,"byte_end":87557,"line_start":65,"line_end":65,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87562,"byte_end":87565,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ io::copy(&mut src, &mut buf).unwrap();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87570,"byte_end":87612,"line_start":67,"line_end":67,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87617,"byte_end":87620,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ let buf = buf.into_inner();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87625,"byte_end":87656,"line_start":69,"line_end":69,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(*buf, b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87661,"byte_end":87702,"line_start":70,"line_end":70,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87707,"byte_end":87714,"line_start":71,"line_end":71,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":526},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91768,"byte_end":91773,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::bytes::Bytes","value":"Bytes {  }","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530}],"decl_id":null,"docs":" A cheaply cloneable and sliceable chunk of contiguous memory.","sig":null,"attributes":[{"value":"/ A cheaply cloneable and sliceable chunk of contiguous memory.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":88435,"byte_end":88500,"line_start":13,"line_end":13,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":88501,"byte_end":88504,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ `Bytes` is an efficient container for storing and operating on contiguous","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":88505,"byte_end":88582,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ slices of memory. It is intended for use primarily in networking code, but","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":88583,"byte_end":88661,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ could have applications elsewhere as well.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":88662,"byte_end":88708,"line_start":17,"line_end":17,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":88709,"byte_end":88712,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ `Bytes` values facilitate zero-copy network programming by allowing multiple","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":88713,"byte_end":88793,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ `Bytes` objects to point to the same underlying memory.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":88794,"byte_end":88853,"line_start":20,"line_end":20,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":88854,"byte_end":88857,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ `Bytes` does not have a single implementation. It is an interface, whose","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":88858,"byte_end":88934,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ exact behavior is implemented through dynamic dispatch in several underlying","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":88935,"byte_end":89015,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ implementations of `Bytes`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89016,"byte_end":89047,"line_start":24,"line_end":24,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89048,"byte_end":89051,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ All `Bytes` implementations must fulfill the following requirements:","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89052,"byte_end":89124,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ - They are cheaply cloneable and thereby shareable between an unlimited amount","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89125,"byte_end":89207,"line_start":27,"line_end":27,"column_start":1,"column_end":83}},{"value":"/   of components, for example by modifying a reference count.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89208,"byte_end":89272,"line_start":28,"line_end":28,"column_start":1,"column_end":65}},{"value":"/ - Instances can be sliced to refer to a subset of the the original buffer.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89273,"byte_end":89351,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89352,"byte_end":89355,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89356,"byte_end":89363,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ use bytes::Bytes;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89364,"byte_end":89385,"line_start":32,"line_end":32,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89386,"byte_end":89389,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut mem = Bytes::from(\"Hello world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89390,"byte_end":89435,"line_start":34,"line_end":34,"column_start":1,"column_end":46}},{"value":"/ let a = mem.slice(0..5);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89436,"byte_end":89464,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89465,"byte_end":89468,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(a, \"Hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89469,"byte_end":89496,"line_start":37,"line_end":37,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89497,"byte_end":89500,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let b = mem.split_to(6);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89501,"byte_end":89529,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89530,"byte_end":89533,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(mem, \"world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89534,"byte_end":89563,"line_start":41,"line_end":41,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(b, \"Hello \");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89564,"byte_end":89592,"line_start":42,"line_end":42,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89593,"byte_end":89600,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89601,"byte_end":89604,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ # Memory layout","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89605,"byte_end":89624,"line_start":45,"line_end":45,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89625,"byte_end":89628,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ The `Bytes` struct itself is fairly small, limited to 4 `usize` fields used","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89629,"byte_end":89708,"line_start":47,"line_end":47,"column_start":1,"column_end":80}},{"value":"/ to track information about which segment of the underlying memory the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89709,"byte_end":89782,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ `Bytes` handle has access to.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89783,"byte_end":89816,"line_start":49,"line_end":49,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89817,"byte_end":89820,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ `Bytes` keeps both a pointer to the shared state containing the full memory","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89821,"byte_end":89900,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ slice and a pointer to the start of the region visible by the handle.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89901,"byte_end":89974,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ `Bytes` also tracks the length of its view into the memory.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":89975,"byte_end":90038,"line_start":53,"line_end":53,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90039,"byte_end":90042,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Sharing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90043,"byte_end":90056,"line_start":55,"line_end":55,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90057,"byte_end":90060,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ `Bytes` contains a vtable, which allows implementations of `Bytes` to define","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90061,"byte_end":90141,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/ how sharing/cloneing is implemented in detail.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90142,"byte_end":90192,"line_start":58,"line_end":58,"column_start":1,"column_end":51}},{"value":"/ When `Bytes::clone()` is called, `Bytes` will call the vtable function for","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90193,"byte_end":90271,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ cloning the backing storage in order to share it behind between multiple","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90272,"byte_end":90348,"line_start":60,"line_end":60,"column_start":1,"column_end":77}},{"value":"/ `Bytes` instances.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90349,"byte_end":90371,"line_start":61,"line_end":61,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90372,"byte_end":90375,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ For `Bytes` implementations which refer to constant memory (e.g. created","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90376,"byte_end":90452,"line_start":63,"line_end":63,"column_start":1,"column_end":77}},{"value":"/ via `Bytes::from_static()`) the cloning implementation will be a no-op.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90453,"byte_end":90528,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90529,"byte_end":90532,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ For `Bytes` implementations which point to a reference counted shared storage","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90533,"byte_end":90614,"line_start":66,"line_end":66,"column_start":1,"column_end":82}},{"value":"/ (e.g. an `Arc<[u8]>`), sharing will be implemented by increasing the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90615,"byte_end":90687,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/ the reference count.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90688,"byte_end":90712,"line_start":68,"line_end":68,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90713,"byte_end":90716,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Due to this mechanism, multiple `Bytes` instances may point to the same","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90717,"byte_end":90792,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/ shared memory region.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90793,"byte_end":90818,"line_start":71,"line_end":71,"column_start":1,"column_end":26}},{"value":"/ Each `Bytes` instance can point to different sections within that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90819,"byte_end":90888,"line_start":72,"line_end":72,"column_start":1,"column_end":70}},{"value":"/ memory region, and `Bytes` instances may or may not have overlapping views","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90889,"byte_end":90967,"line_start":73,"line_end":73,"column_start":1,"column_end":79}},{"value":"/ into the memory.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90968,"byte_end":90988,"line_start":74,"line_end":74,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90989,"byte_end":90992,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The following diagram visualizes a scenario where 2 `Bytes` instances make","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":90993,"byte_end":91071,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/ use of an `Arc`-based backing storage, and provide access to different views:","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91072,"byte_end":91153,"line_start":77,"line_end":77,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91154,"byte_end":91157,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91158,"byte_end":91169,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91170,"byte_end":91173,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/    Arc ptrs                   +---------+","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91174,"byte_end":91219,"line_start":81,"line_end":81,"column_start":1,"column_end":46}},{"value":"/    ________________________ / | Bytes 2 |","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91220,"byte_end":91265,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/   /                           +---------+","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91266,"byte_end":91311,"line_start":83,"line_end":83,"column_start":1,"column_end":46}},{"value":"/  /          +-----------+     |         |","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91312,"byte_end":91357,"line_start":84,"line_end":84,"column_start":1,"column_end":46}},{"value":"/ |_________/ |  Bytes 1  |     |         |","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91358,"byte_end":91403,"line_start":85,"line_end":85,"column_start":1,"column_end":46}},{"value":"/ |           +-----------+     |         |","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91404,"byte_end":91449,"line_start":86,"line_end":86,"column_start":1,"column_end":46}},{"value":"/ |           |           | ___/ data     | tail","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91450,"byte_end":91500,"line_start":87,"line_end":87,"column_start":1,"column_end":51}},{"value":"/ |      data |      tail |/              |","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91501,"byte_end":91546,"line_start":88,"line_end":88,"column_start":1,"column_end":46}},{"value":"/ v           v           v               v","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91547,"byte_end":91592,"line_start":89,"line_end":89,"column_start":1,"column_end":46}},{"value":"/ +-----+---------------------------------+-----+","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91593,"byte_end":91644,"line_start":90,"line_end":90,"column_start":1,"column_end":52}},{"value":"/ | Arc |     |           |               |     |","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91645,"byte_end":91696,"line_start":91,"line_end":91,"column_start":1,"column_end":52}},{"value":"/ +-----+---------------------------------+-----+","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91697,"byte_end":91748,"line_start":92,"line_end":92,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":91749,"byte_end":91756,"line_start":93,"line_end":93,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92471,"byte_end":92474,"line_start":124,"line_end":124,"column_start":18,"column_end":21},"name":"new","qualname":"<Bytes>::new","value":"pub const fn new() -> Bytes","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty `Bytes`.","sig":null,"attributes":[{"value":"/ Creates a new empty `Bytes`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92132,"byte_end":92164,"line_start":110,"line_end":110,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92169,"byte_end":92172,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ This will not allocate and the returned `Bytes` handle will be empty.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92177,"byte_end":92250,"line_start":112,"line_end":112,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92255,"byte_end":92258,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92263,"byte_end":92277,"line_start":114,"line_end":114,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92282,"byte_end":92285,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92290,"byte_end":92297,"line_start":116,"line_end":116,"column_start":5,"column_end":12}},{"value":"/ use bytes::Bytes;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92302,"byte_end":92323,"line_start":117,"line_end":117,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92328,"byte_end":92331,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ let b = Bytes::new();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92336,"byte_end":92361,"line_start":119,"line_end":119,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(&b[..], b\"\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92366,"byte_end":92394,"line_start":120,"line_end":120,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92399,"byte_end":92406,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92411,"byte_end":92420,"line_start":122,"line_end":122,"column_start":5,"column_end":14}},{"value":"cfg(not(all(loom, test)))","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92425,"byte_end":92453,"line_start":123,"line_end":123,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93211,"byte_end":93222,"line_start":152,"line_end":152,"column_start":18,"column_end":29},"name":"from_static","qualname":"<Bytes>::from_static","value":"pub const fn from_static(&'static [u8]) -> Bytes","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Bytes` from a static slice.","sig":null,"attributes":[{"value":"/ Creates a new `Bytes` from a static slice.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92802,"byte_end":92848,"line_start":137,"line_end":137,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92853,"byte_end":92856,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ The returned `Bytes` will point directly to the static slice. There is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92861,"byte_end":92935,"line_start":139,"line_end":139,"column_start":5,"column_end":79}},{"value":"/ no allocating or copying.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92940,"byte_end":92969,"line_start":140,"line_end":140,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92974,"byte_end":92977,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92982,"byte_end":92996,"line_start":142,"line_end":142,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93001,"byte_end":93004,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93009,"byte_end":93016,"line_start":144,"line_end":144,"column_start":5,"column_end":12}},{"value":"/ use bytes::Bytes;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93021,"byte_end":93042,"line_start":145,"line_end":145,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93047,"byte_end":93050,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ let b = Bytes::from_static(b\"hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93055,"byte_end":93096,"line_start":147,"line_end":147,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(&b[..], b\"hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93101,"byte_end":93134,"line_start":148,"line_end":148,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93139,"byte_end":93146,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93151,"byte_end":93160,"line_start":150,"line_end":150,"column_start":5,"column_end":14}},{"value":"cfg(not(all(loom, test)))","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93165,"byte_end":93193,"line_start":151,"line_end":151,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93963,"byte_end":93966,"line_start":182,"line_end":182,"column_start":12,"column_end":15},"name":"len","qualname":"<Bytes>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in this `Bytes`.","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in this `Bytes`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93710,"byte_end":93768,"line_start":171,"line_end":171,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93773,"byte_end":93776,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93781,"byte_end":93795,"line_start":173,"line_end":173,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93800,"byte_end":93803,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93808,"byte_end":93815,"line_start":175,"line_end":175,"column_start":5,"column_end":12}},{"value":"/ use bytes::Bytes;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93820,"byte_end":93841,"line_start":176,"line_end":176,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93846,"byte_end":93849,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ let b = Bytes::from(&b\"hello\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93854,"byte_end":93893,"line_start":178,"line_end":178,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(b.len(), 5);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93898,"byte_end":93925,"line_start":179,"line_end":179,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93930,"byte_end":93937,"line_start":180,"line_end":180,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":93942,"byte_end":93951,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94243,"byte_end":94251,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Bytes>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the `Bytes` has a length of 0.","sig":null,"attributes":[{"value":"/ Returns true if the `Bytes` has a length of 0.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94013,"byte_end":94063,"line_start":186,"line_end":186,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94068,"byte_end":94071,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94076,"byte_end":94090,"line_start":188,"line_end":188,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94095,"byte_end":94098,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94103,"byte_end":94110,"line_start":190,"line_end":190,"column_start":5,"column_end":12}},{"value":"/ use bytes::Bytes;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94115,"byte_end":94136,"line_start":191,"line_end":191,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94141,"byte_end":94144,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ let b = Bytes::new();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94149,"byte_end":94174,"line_start":193,"line_end":193,"column_start":5,"column_end":30}},{"value":"/ assert!(b.is_empty());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94179,"byte_end":94205,"line_start":194,"line_end":194,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94210,"byte_end":94217,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94222,"byte_end":94231,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94369,"byte_end":94384,"line_start":202,"line_end":202,"column_start":12,"column_end":27},"name":"copy_from_slice","qualname":"<Bytes>::copy_from_slice","value":"pub fn copy_from_slice(&[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates `Bytes` instance from slice, by copying it.\n","sig":null,"attributes":[{"value":"/ Creates `Bytes` instance from slice, by copying it.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94302,"byte_end":94357,"line_start":201,"line_end":201,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":95044,"byte_end":95049,"line_start":228,"line_end":228,"column_start":12,"column_end":17},"name":"slice","qualname":"<Bytes>::slice","value":"pub fn slice<impl RangeBounds<usize>: RangeBounds<usize>>(&Self,\n                                                          impl RangeBounds<usize>)\n-> Bytes","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of self for the provided range.","sig":null,"attributes":[{"value":"/ Returns a slice of self for the provided range.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94448,"byte_end":94499,"line_start":206,"line_end":206,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94504,"byte_end":94507,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ This will increment the reference count for the underlying memory and","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94512,"byte_end":94585,"line_start":208,"line_end":208,"column_start":5,"column_end":78}},{"value":"/ return a new `Bytes` handle set to the slice.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94590,"byte_end":94639,"line_start":209,"line_end":209,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94644,"byte_end":94647,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ This operation is `O(1)`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94652,"byte_end":94681,"line_start":211,"line_end":211,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94686,"byte_end":94689,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94694,"byte_end":94708,"line_start":213,"line_end":213,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94713,"byte_end":94716,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94721,"byte_end":94728,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"/ use bytes::Bytes;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94733,"byte_end":94754,"line_start":216,"line_end":216,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94759,"byte_end":94762,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ let a = Bytes::from(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94767,"byte_end":94812,"line_start":218,"line_end":218,"column_start":5,"column_end":50}},{"value":"/ let b = a.slice(2..5);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94817,"byte_end":94843,"line_start":219,"line_end":219,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94848,"byte_end":94851,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&b[..], b\"llo\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94856,"byte_end":94887,"line_start":221,"line_end":221,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94892,"byte_end":94899,"line_start":222,"line_end":222,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94904,"byte_end":94907,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94912,"byte_end":94924,"line_start":224,"line_end":224,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94929,"byte_end":94932,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Requires that `begin <= end` and `end <= self.len()`, otherwise slicing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":94937,"byte_end":95012,"line_start":226,"line_end":226,"column_start":5,"column_end":80}},{"value":"/ will panic.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":95017,"byte_end":95032,"line_start":227,"line_end":227,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96989,"byte_end":96998,"line_start":295,"line_end":295,"column_start":12,"column_end":21},"name":"slice_ref","qualname":"<Bytes>::slice_ref","value":"pub fn slice_ref(&Self, &[u8]) -> Bytes","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of self that is equivalent to the given `subset`.","sig":null,"attributes":[{"value":"/ Returns a slice of self that is equivalent to the given `subset`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96067,"byte_end":96136,"line_start":270,"line_end":270,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96141,"byte_end":96144,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ When processing a `Bytes` buffer with other tools, one often gets a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96149,"byte_end":96220,"line_start":272,"line_end":272,"column_start":5,"column_end":76}},{"value":"/ `&[u8]` which is in fact a slice of the `Bytes`, i.e. a subset of it.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96225,"byte_end":96298,"line_start":273,"line_end":273,"column_start":5,"column_end":78}},{"value":"/ This function turns that `&[u8]` into another `Bytes`, as if one had","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96303,"byte_end":96375,"line_start":274,"line_end":274,"column_start":5,"column_end":77}},{"value":"/ called `self.slice()` with the offsets that correspond to `subset`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96380,"byte_end":96451,"line_start":275,"line_end":275,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96456,"byte_end":96459,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ This operation is `O(1)`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96464,"byte_end":96493,"line_start":277,"line_end":277,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96498,"byte_end":96501,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96506,"byte_end":96520,"line_start":279,"line_end":279,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96525,"byte_end":96528,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96533,"byte_end":96540,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"/ use bytes::Bytes;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96545,"byte_end":96566,"line_start":282,"line_end":282,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96571,"byte_end":96574,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ let bytes = Bytes::from(&b\"012345678\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96579,"byte_end":96626,"line_start":284,"line_end":284,"column_start":5,"column_end":52}},{"value":"/ let as_slice = bytes.as_ref();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96631,"byte_end":96665,"line_start":285,"line_end":285,"column_start":5,"column_end":39}},{"value":"/ let subset = &as_slice[2..6];","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96670,"byte_end":96703,"line_start":286,"line_end":286,"column_start":5,"column_end":38}},{"value":"/ let subslice = bytes.slice_ref(&subset);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96708,"byte_end":96752,"line_start":287,"line_end":287,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(&subslice[..], b\"2345\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96757,"byte_end":96796,"line_start":288,"line_end":288,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96801,"byte_end":96808,"line_start":289,"line_end":289,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96813,"byte_end":96816,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96821,"byte_end":96833,"line_start":291,"line_end":291,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96838,"byte_end":96841,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Requires that the given `sub` slice is in fact contained within the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96846,"byte_end":96917,"line_start":293,"line_end":293,"column_start":5,"column_end":76}},{"value":"/ `Bytes` buffer; otherwise this function will panic.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":96922,"byte_end":96977,"line_start":294,"line_end":294,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98701,"byte_end":98710,"line_start":352,"line_end":352,"column_start":12,"column_end":21},"name":"split_off","qualname":"<Bytes>::split_off","value":"pub fn split_off(&mut Self, usize) -> Bytes","parent":null,"children":[],"decl_id":null,"docs":" Splits the bytes into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the bytes into two at the given index.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":97992,"byte_end":98041,"line_start":328,"line_end":328,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98046,"byte_end":98049,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ Afterwards `self` contains elements `[0, at)`, and the returned `Bytes`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98054,"byte_end":98129,"line_start":330,"line_end":330,"column_start":5,"column_end":80}},{"value":"/ contains elements `[at, len)`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98134,"byte_end":98168,"line_start":331,"line_end":331,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98173,"byte_end":98176,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ This is an `O(1)` operation that just increases the reference count and","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98181,"byte_end":98256,"line_start":333,"line_end":333,"column_start":5,"column_end":80}},{"value":"/ sets a few indices.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98261,"byte_end":98284,"line_start":334,"line_end":334,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98289,"byte_end":98292,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98297,"byte_end":98311,"line_start":336,"line_end":336,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98316,"byte_end":98319,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98324,"byte_end":98331,"line_start":338,"line_end":338,"column_start":5,"column_end":12}},{"value":"/ use bytes::Bytes;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98336,"byte_end":98357,"line_start":339,"line_end":339,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98362,"byte_end":98365,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ let mut a = Bytes::from(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98370,"byte_end":98419,"line_start":341,"line_end":341,"column_start":5,"column_end":54}},{"value":"/ let b = a.split_off(5);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98424,"byte_end":98451,"line_start":342,"line_end":342,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98456,"byte_end":98459,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&a[..], b\"hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98464,"byte_end":98497,"line_start":344,"line_end":344,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(&b[..], b\" world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98502,"byte_end":98536,"line_start":345,"line_end":345,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98541,"byte_end":98548,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98553,"byte_end":98556,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98561,"byte_end":98573,"line_start":348,"line_end":348,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98578,"byte_end":98581,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ Panics if `at > len`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98586,"byte_end":98611,"line_start":350,"line_end":350,"column_start":5,"column_end":30}},{"value":"must_use = \"consider Bytes::truncate if you don't need the other half\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":98616,"byte_end":98689,"line_start":351,"line_end":351,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99885,"byte_end":99893,"line_start":401,"line_end":401,"column_start":12,"column_end":20},"name":"split_to","qualname":"<Bytes>::split_to","value":"pub fn split_to(&mut Self, usize) -> Bytes","parent":null,"children":[],"decl_id":null,"docs":" Splits the bytes into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the bytes into two at the given index.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99178,"byte_end":99227,"line_start":377,"line_end":377,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99232,"byte_end":99235,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ Afterwards `self` contains elements `[at, len)`, and the returned","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99240,"byte_end":99309,"line_start":379,"line_end":379,"column_start":5,"column_end":74}},{"value":"/ `Bytes` contains elements `[0, at)`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99314,"byte_end":99354,"line_start":380,"line_end":380,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99359,"byte_end":99362,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ This is an `O(1)` operation that just increases the reference count and","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99367,"byte_end":99442,"line_start":382,"line_end":382,"column_start":5,"column_end":80}},{"value":"/ sets a few indices.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99447,"byte_end":99470,"line_start":383,"line_end":383,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99475,"byte_end":99478,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99483,"byte_end":99497,"line_start":385,"line_end":385,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99502,"byte_end":99505,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99510,"byte_end":99517,"line_start":387,"line_end":387,"column_start":5,"column_end":12}},{"value":"/ use bytes::Bytes;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99522,"byte_end":99543,"line_start":388,"line_end":388,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99548,"byte_end":99551,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ let mut a = Bytes::from(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99556,"byte_end":99605,"line_start":390,"line_end":390,"column_start":5,"column_end":54}},{"value":"/ let b = a.split_to(5);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99610,"byte_end":99636,"line_start":391,"line_end":391,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99641,"byte_end":99644,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&a[..], b\" world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99649,"byte_end":99683,"line_start":393,"line_end":393,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(&b[..], b\"hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99688,"byte_end":99721,"line_start":394,"line_end":394,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99726,"byte_end":99733,"line_start":395,"line_end":395,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99738,"byte_end":99741,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99746,"byte_end":99758,"line_start":397,"line_end":397,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99763,"byte_end":99766,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ Panics if `at > len`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99771,"byte_end":99796,"line_start":399,"line_end":399,"column_start":5,"column_end":30}},{"value":"must_use = \"consider Bytes::advance if you don't need the other half\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":99801,"byte_end":99873,"line_start":400,"line_end":400,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100971,"byte_end":100979,"line_start":446,"line_end":446,"column_start":12,"column_end":20},"name":"truncate","qualname":"<Bytes>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the buffer, keeping the first `len` bytes and dropping the\n rest.","sig":null,"attributes":[{"value":"/ Shortens the buffer, keeping the first `len` bytes and dropping the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100359,"byte_end":100430,"line_start":425,"line_end":425,"column_start":5,"column_end":76}},{"value":"/ rest.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100435,"byte_end":100444,"line_start":426,"line_end":426,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100449,"byte_end":100452,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the buffer's current length, this has no","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100457,"byte_end":100526,"line_start":428,"line_end":428,"column_start":5,"column_end":74}},{"value":"/ effect.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100531,"byte_end":100542,"line_start":429,"line_end":429,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100547,"byte_end":100550,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ The [`split_off`] method can emulate `truncate`, but this causes the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100555,"byte_end":100627,"line_start":431,"line_end":431,"column_start":5,"column_end":77}},{"value":"/ excess bytes to be returned instead of dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100632,"byte_end":100683,"line_start":432,"line_end":432,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100688,"byte_end":100691,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100696,"byte_end":100710,"line_start":434,"line_end":434,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100715,"byte_end":100718,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100723,"byte_end":100730,"line_start":436,"line_end":436,"column_start":5,"column_end":12}},{"value":"/ use bytes::Bytes;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100735,"byte_end":100756,"line_start":437,"line_end":437,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100761,"byte_end":100764,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ let mut buf = Bytes::from(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100769,"byte_end":100820,"line_start":439,"line_end":439,"column_start":5,"column_end":56}},{"value":"/ buf.truncate(5);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100825,"byte_end":100845,"line_start":440,"line_end":440,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(buf, b\"hello\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100850,"byte_end":100884,"line_start":441,"line_end":441,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100889,"byte_end":100896,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100901,"byte_end":100904,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ [`split_off`]: #method.split_off","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100909,"byte_end":100945,"line_start":444,"line_end":444,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":100950,"byte_end":100959,"line_start":445,"line_end":445,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":101809,"byte_end":101814,"line_start":473,"line_end":473,"column_start":12,"column_end":17},"name":"clear","qualname":"<Bytes>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the buffer, removing all data.","sig":null,"attributes":[{"value":"/ Clears the buffer, removing all data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":101539,"byte_end":101580,"line_start":461,"line_end":461,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":101585,"byte_end":101588,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":101593,"byte_end":101607,"line_start":463,"line_end":463,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":101612,"byte_end":101615,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":101620,"byte_end":101627,"line_start":465,"line_end":465,"column_start":5,"column_end":12}},{"value":"/ use bytes::Bytes;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":101632,"byte_end":101653,"line_start":466,"line_end":466,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":101658,"byte_end":101661,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ let mut buf = Bytes::from(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":101666,"byte_end":101717,"line_start":468,"line_end":468,"column_start":5,"column_end":56}},{"value":"/ buf.clear();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":101722,"byte_end":101738,"line_start":469,"line_end":469,"column_start":5,"column_end":21}},{"value":"/ assert!(buf.is_empty());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":101743,"byte_end":101771,"line_start":470,"line_end":470,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":101776,"byte_end":101783,"line_start":471,"line_end":471,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":101788,"byte_end":101797,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":786},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":121036,"byte_end":121044,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"BytesMut","qualname":"::bytes_mut::BytesMut","value":"BytesMut {  }","parent":null,"children":[{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790}],"decl_id":null,"docs":" A unique reference to a contiguous slice of memory.","sig":null,"attributes":[{"value":"/ A unique reference to a contiguous slice of memory.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":119806,"byte_end":119861,"line_start":21,"line_end":21,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":119862,"byte_end":119865,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ `BytesMut` represents a unique view into a potentially shared memory region.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":119866,"byte_end":119946,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ Given the uniqueness guarantee, owners of `BytesMut` handles are able to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":119947,"byte_end":120023,"line_start":24,"line_end":24,"column_start":1,"column_end":77}},{"value":"/ mutate the memory.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120024,"byte_end":120046,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120047,"byte_end":120050,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ `BytesMut` can be thought of as containing a `buf: Arc<Vec<u8>>`, an offset","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120051,"byte_end":120130,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/ into `buf`, a slice length, and a guarantee that no other `BytesMut` for the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120131,"byte_end":120211,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ same `buf` overlaps with its slice. That guarantee means that a write lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120212,"byte_end":120290,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ is not required.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120291,"byte_end":120311,"line_start":30,"line_end":30,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120312,"byte_end":120315,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Growth","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120316,"byte_end":120328,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120329,"byte_end":120332,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ `BytesMut`'s `BufMut` implementation will implicitly grow its buffer as","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120333,"byte_end":120408,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ necessary. However, explicitly reserving the required space up-front before","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120409,"byte_end":120488,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ a series of inserts will be more efficient.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120489,"byte_end":120536,"line_start":36,"line_end":36,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120537,"byte_end":120540,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120541,"byte_end":120555,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120556,"byte_end":120559,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120560,"byte_end":120567,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/ use bytes::{BytesMut, BufMut};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120568,"byte_end":120602,"line_start":41,"line_end":41,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120603,"byte_end":120606,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let mut buf = BytesMut::with_capacity(64);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120607,"byte_end":120653,"line_start":43,"line_end":43,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120654,"byte_end":120657,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ buf.put_u8(b'h');","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120658,"byte_end":120679,"line_start":45,"line_end":45,"column_start":1,"column_end":22}},{"value":"/ buf.put_u8(b'e');","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120680,"byte_end":120701,"line_start":46,"line_end":46,"column_start":1,"column_end":22}},{"value":"/ buf.put(&b\"llo\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120702,"byte_end":120727,"line_start":47,"line_end":47,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120728,"byte_end":120731,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(&buf[..], b\"hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120732,"byte_end":120767,"line_start":49,"line_end":49,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120768,"byte_end":120771,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // Freeze the buffer so that it can be shared","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120772,"byte_end":120821,"line_start":51,"line_end":51,"column_start":1,"column_end":50}},{"value":"/ let a = buf.freeze();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120822,"byte_end":120847,"line_start":52,"line_end":52,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120848,"byte_end":120851,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // This does not allocate, instead `b` points to the same memory.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120852,"byte_end":120921,"line_start":54,"line_end":54,"column_start":1,"column_end":70}},{"value":"/ let b = a.clone();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120922,"byte_end":120944,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120945,"byte_end":120948,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(&a[..], b\"hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120949,"byte_end":120982,"line_start":57,"line_end":57,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(&b[..], b\"hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":120983,"byte_end":121016,"line_start":58,"line_end":58,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":121017,"byte_end":121024,"line_start":59,"line_end":59,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123768,"byte_end":123781,"line_start":141,"line_end":141,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<BytesMut>::with_capacity","value":"pub fn with_capacity(usize) -> BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesMut` with the specified capacity.","sig":null,"attributes":[{"value":"/ Creates a new `BytesMut` with the specified capacity.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123048,"byte_end":123105,"line_start":118,"line_end":118,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123110,"byte_end":123113,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ The returned `BytesMut` will be able to hold at least `capacity` bytes","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123118,"byte_end":123192,"line_start":120,"line_end":120,"column_start":5,"column_end":79}},{"value":"/ without reallocating.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123197,"byte_end":123222,"line_start":121,"line_end":121,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123227,"byte_end":123230,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ It is important to note that this function does not specify the length","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123235,"byte_end":123309,"line_start":123,"line_end":123,"column_start":5,"column_end":79}},{"value":"/ of the returned `BytesMut`, but only the capacity.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123314,"byte_end":123368,"line_start":124,"line_end":124,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123373,"byte_end":123376,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123381,"byte_end":123395,"line_start":126,"line_end":126,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123400,"byte_end":123403,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123408,"byte_end":123415,"line_start":128,"line_end":128,"column_start":5,"column_end":12}},{"value":"/ use bytes::{BytesMut, BufMut};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123420,"byte_end":123454,"line_start":129,"line_end":129,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123459,"byte_end":123462,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = BytesMut::with_capacity(64);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123467,"byte_end":123515,"line_start":131,"line_end":131,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123520,"byte_end":123523,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ // `bytes` contains no data, even though there is capacity","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123528,"byte_end":123590,"line_start":133,"line_end":133,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(bytes.len(), 0);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123595,"byte_end":123626,"line_start":134,"line_end":134,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123631,"byte_end":123634,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ bytes.put(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123639,"byte_end":123674,"line_start":136,"line_end":136,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123679,"byte_end":123682,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&bytes[..], b\"hello world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123687,"byte_end":123730,"line_start":138,"line_end":138,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123735,"byte_end":123742,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123747,"byte_end":123756,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124380,"byte_end":124383,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"new","qualname":"<BytesMut>::new","value":"pub fn new() -> BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesMut` with default capacity.","sig":null,"attributes":[{"value":"/ Creates a new `BytesMut` with default capacity.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123881,"byte_end":123932,"line_start":145,"line_end":145,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123937,"byte_end":123940,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Resulting object has length 0 and unspecified capacity.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123945,"byte_end":124004,"line_start":147,"line_end":147,"column_start":5,"column_end":64}},{"value":"/ This function does not allocate.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124009,"byte_end":124045,"line_start":148,"line_end":148,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124050,"byte_end":124053,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124058,"byte_end":124072,"line_start":150,"line_end":150,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124077,"byte_end":124080,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124085,"byte_end":124092,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/ use bytes::{BytesMut, BufMut};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124097,"byte_end":124131,"line_start":153,"line_end":153,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124136,"byte_end":124139,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = BytesMut::new();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124144,"byte_end":124180,"line_start":155,"line_end":155,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124185,"byte_end":124188,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(0, bytes.len());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124193,"byte_end":124224,"line_start":157,"line_end":157,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124229,"byte_end":124232,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ bytes.reserve(2);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124237,"byte_end":124258,"line_start":159,"line_end":159,"column_start":5,"column_end":26}},{"value":"/ bytes.put_slice(b\"xy\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124263,"byte_end":124290,"line_start":160,"line_end":160,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124295,"byte_end":124298,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&b\"xy\"[..], &bytes[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124303,"byte_end":124342,"line_start":162,"line_end":162,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124347,"byte_end":124354,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124359,"byte_end":124368,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124708,"byte_end":124711,"line_start":180,"line_end":180,"column_start":12,"column_end":15},"name":"len","qualname":"<BytesMut>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in this `BytesMut`.","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in this `BytesMut`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124446,"byte_end":124507,"line_start":169,"line_end":169,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124512,"byte_end":124515,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124520,"byte_end":124534,"line_start":171,"line_end":171,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124539,"byte_end":124542,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124547,"byte_end":124554,"line_start":173,"line_end":173,"column_start":5,"column_end":12}},{"value":"/ use bytes::BytesMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124559,"byte_end":124583,"line_start":174,"line_end":174,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124588,"byte_end":124591,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ let b = BytesMut::from(&b\"hello\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124596,"byte_end":124638,"line_start":176,"line_end":176,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(b.len(), 5);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124643,"byte_end":124670,"line_start":177,"line_end":177,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124675,"byte_end":124682,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124687,"byte_end":124696,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125009,"byte_end":125017,"line_start":195,"line_end":195,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BytesMut>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the `BytesMut` has a length of 0.","sig":null,"attributes":[{"value":"/ Returns true if the `BytesMut` has a length of 0.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124758,"byte_end":124811,"line_start":184,"line_end":184,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124816,"byte_end":124819,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124824,"byte_end":124838,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124843,"byte_end":124846,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124851,"byte_end":124858,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"/ use bytes::BytesMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124863,"byte_end":124887,"line_start":189,"line_end":189,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124892,"byte_end":124895,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ let b = BytesMut::with_capacity(64);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124900,"byte_end":124940,"line_start":191,"line_end":191,"column_start":5,"column_end":45}},{"value":"/ assert!(b.is_empty());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124945,"byte_end":124971,"line_start":192,"line_end":192,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124976,"byte_end":124983,"line_start":193,"line_end":193,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":124988,"byte_end":124997,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125350,"byte_end":125358,"line_start":210,"line_end":210,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BytesMut>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes the `BytesMut` can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of bytes the `BytesMut` can hold without reallocating.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125068,"byte_end":125145,"line_start":199,"line_end":199,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125150,"byte_end":125153,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125158,"byte_end":125172,"line_start":201,"line_end":201,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125177,"byte_end":125180,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125185,"byte_end":125192,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/ use bytes::BytesMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125197,"byte_end":125221,"line_start":204,"line_end":204,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125226,"byte_end":125229,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ let b = BytesMut::with_capacity(64);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125234,"byte_end":125274,"line_start":206,"line_end":206,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(b.capacity(), 64);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125279,"byte_end":125312,"line_start":207,"line_end":207,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125317,"byte_end":125324,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125329,"byte_end":125338,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":126174,"byte_end":126180,"line_start":239,"line_end":239,"column_start":12,"column_end":18},"name":"freeze","qualname":"<BytesMut>::freeze","value":"pub fn freeze(Self) -> Bytes","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into an immutable `Bytes`.","sig":null,"attributes":[{"value":"/ Converts `self` into an immutable `Bytes`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125405,"byte_end":125451,"line_start":214,"line_end":214,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125456,"byte_end":125459,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ The conversion is zero cost and is used to indicate that the slice","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125464,"byte_end":125534,"line_start":216,"line_end":216,"column_start":5,"column_end":75}},{"value":"/ referenced by the handle will no longer be mutated. Once the conversion","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125539,"byte_end":125614,"line_start":217,"line_end":217,"column_start":5,"column_end":80}},{"value":"/ is done, the handle can be cloned and shared across threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125619,"byte_end":125683,"line_start":218,"line_end":218,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125688,"byte_end":125691,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125696,"byte_end":125710,"line_start":220,"line_end":220,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125715,"byte_end":125718,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125723,"byte_end":125730,"line_start":222,"line_end":222,"column_start":5,"column_end":12}},{"value":"/ use bytes::{BytesMut, BufMut};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125735,"byte_end":125769,"line_start":223,"line_end":223,"column_start":5,"column_end":39}},{"value":"/ use std::thread;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125774,"byte_end":125794,"line_start":224,"line_end":224,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125799,"byte_end":125802,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ let mut b = BytesMut::with_capacity(64);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125807,"byte_end":125851,"line_start":226,"line_end":226,"column_start":5,"column_end":49}},{"value":"/ b.put(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125856,"byte_end":125887,"line_start":227,"line_end":227,"column_start":5,"column_end":36}},{"value":"/ let b1 = b.freeze();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125892,"byte_end":125916,"line_start":228,"line_end":228,"column_start":5,"column_end":29}},{"value":"/ let b2 = b1.clone();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125921,"byte_end":125945,"line_start":229,"line_end":229,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125950,"byte_end":125953,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ let th = thread::spawn(move || {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125958,"byte_end":125994,"line_start":231,"line_end":231,"column_start":5,"column_end":41}},{"value":"/     assert_eq!(&b1[..], b\"hello world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":125999,"byte_end":126043,"line_start":232,"line_end":232,"column_start":5,"column_end":49}},{"value":"/ });","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":126048,"byte_end":126055,"line_start":233,"line_end":233,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":126060,"byte_end":126063,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&b2[..], b\"hello world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":126068,"byte_end":126108,"line_start":235,"line_end":235,"column_start":5,"column_end":45}},{"value":"/ th.join().unwrap();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":126113,"byte_end":126136,"line_start":236,"line_end":236,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":126141,"byte_end":126148,"line_start":237,"line_end":237,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":126153,"byte_end":126162,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127705,"byte_end":127714,"line_start":288,"line_end":288,"column_start":12,"column_end":21},"name":"split_off","qualname":"<BytesMut>::split_off","value":"pub fn split_off(&mut Self, usize) -> BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Splits the bytes into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the bytes into two at the given index.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":126920,"byte_end":126969,"line_start":261,"line_end":261,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":126974,"byte_end":126977,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Afterwards `self` contains elements `[0, at)`, and the returned","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":126982,"byte_end":127049,"line_start":263,"line_end":263,"column_start":5,"column_end":72}},{"value":"/ `BytesMut` contains elements `[at, capacity)`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127054,"byte_end":127104,"line_start":264,"line_end":264,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127109,"byte_end":127112,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ This is an `O(1)` operation that just increases the reference count","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127117,"byte_end":127188,"line_start":266,"line_end":266,"column_start":5,"column_end":76}},{"value":"/ and sets a few indices.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127193,"byte_end":127220,"line_start":267,"line_end":267,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127225,"byte_end":127228,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127233,"byte_end":127247,"line_start":269,"line_end":269,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127252,"byte_end":127255,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127260,"byte_end":127267,"line_start":271,"line_end":271,"column_start":5,"column_end":12}},{"value":"/ use bytes::BytesMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127272,"byte_end":127296,"line_start":272,"line_end":272,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127301,"byte_end":127304,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ let mut a = BytesMut::from(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127309,"byte_end":127361,"line_start":274,"line_end":274,"column_start":5,"column_end":57}},{"value":"/ let mut b = a.split_off(5);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127366,"byte_end":127397,"line_start":275,"line_end":275,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127402,"byte_end":127405,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ a[0] = b'j';","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127410,"byte_end":127426,"line_start":277,"line_end":277,"column_start":5,"column_end":21}},{"value":"/ b[0] = b'!';","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127431,"byte_end":127447,"line_start":278,"line_end":278,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127452,"byte_end":127455,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&a[..], b\"jello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127460,"byte_end":127493,"line_start":280,"line_end":280,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(&b[..], b\"!world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127498,"byte_end":127532,"line_start":281,"line_end":281,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127537,"byte_end":127544,"line_start":282,"line_end":282,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127549,"byte_end":127552,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127557,"byte_end":127569,"line_start":284,"line_end":284,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127574,"byte_end":127577,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Panics if `at > capacity`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127582,"byte_end":127612,"line_start":286,"line_end":286,"column_start":5,"column_end":35}},{"value":"must_use = \"consider BytesMut::truncate if you don't need the other half\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":127617,"byte_end":127693,"line_start":287,"line_end":287,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128957,"byte_end":128962,"line_start":329,"line_end":329,"column_start":12,"column_end":17},"name":"split","qualname":"<BytesMut>::split","value":"pub fn split(&mut Self) -> BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Removes the bytes from the current view, returning them in a new\n `BytesMut` handle.","sig":null,"attributes":[{"value":"/ Removes the bytes from the current view, returning them in a new","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128081,"byte_end":128149,"line_start":303,"line_end":303,"column_start":5,"column_end":73}},{"value":"/ `BytesMut` handle.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128154,"byte_end":128176,"line_start":304,"line_end":304,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128181,"byte_end":128184,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ Afterwards, `self` will be empty, but will retain any additional","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128189,"byte_end":128257,"line_start":306,"line_end":306,"column_start":5,"column_end":73}},{"value":"/ capacity that it had before the operation. This is identical to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128262,"byte_end":128329,"line_start":307,"line_end":307,"column_start":5,"column_end":72}},{"value":"/ `self.split_to(self.len())`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128334,"byte_end":128366,"line_start":308,"line_end":308,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128371,"byte_end":128374,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ This is an `O(1)` operation that just increases the reference count and","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128379,"byte_end":128454,"line_start":310,"line_end":310,"column_start":5,"column_end":80}},{"value":"/ sets a few indices.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128459,"byte_end":128482,"line_start":311,"line_end":311,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128487,"byte_end":128490,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128495,"byte_end":128509,"line_start":313,"line_end":313,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128514,"byte_end":128517,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128522,"byte_end":128529,"line_start":315,"line_end":315,"column_start":5,"column_end":12}},{"value":"/ use bytes::{BytesMut, BufMut};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128534,"byte_end":128568,"line_start":316,"line_end":316,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128573,"byte_end":128576,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ let mut buf = BytesMut::with_capacity(1024);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128581,"byte_end":128629,"line_start":318,"line_end":318,"column_start":5,"column_end":53}},{"value":"/ buf.put(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128634,"byte_end":128667,"line_start":319,"line_end":319,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128672,"byte_end":128675,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ let other = buf.split();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128680,"byte_end":128708,"line_start":321,"line_end":321,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128713,"byte_end":128716,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ assert!(buf.is_empty());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128721,"byte_end":128749,"line_start":323,"line_end":323,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(1013, buf.capacity());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128754,"byte_end":128791,"line_start":324,"line_end":324,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128796,"byte_end":128799,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(other, b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128804,"byte_end":128846,"line_start":326,"line_end":326,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128851,"byte_end":128858,"line_start":327,"line_end":327,"column_start":5,"column_end":12}},{"value":"must_use =\n  \"consider BytesMut::advance(len()) if you don't need the other half\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":128863,"byte_end":128945,"line_start":328,"line_end":328,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129830,"byte_end":129838,"line_start":361,"line_end":361,"column_start":12,"column_end":20},"name":"split_to","qualname":"<BytesMut>::split_to","value":"pub fn split_to(&mut Self, usize) -> BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Splits the buffer into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the buffer into two at the given index.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129056,"byte_end":129106,"line_start":334,"line_end":334,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129111,"byte_end":129114,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ Afterwards `self` contains elements `[at, len)`, and the returned `BytesMut`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129119,"byte_end":129199,"line_start":336,"line_end":336,"column_start":5,"column_end":85}},{"value":"/ contains elements `[0, at)`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129204,"byte_end":129236,"line_start":337,"line_end":337,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129241,"byte_end":129244,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ This is an `O(1)` operation that just increases the reference count and","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129249,"byte_end":129324,"line_start":339,"line_end":339,"column_start":5,"column_end":80}},{"value":"/ sets a few indices.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129329,"byte_end":129352,"line_start":340,"line_end":340,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129357,"byte_end":129360,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129365,"byte_end":129379,"line_start":342,"line_end":342,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129384,"byte_end":129387,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129392,"byte_end":129399,"line_start":344,"line_end":344,"column_start":5,"column_end":12}},{"value":"/ use bytes::BytesMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129404,"byte_end":129428,"line_start":345,"line_end":345,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129433,"byte_end":129436,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ let mut a = BytesMut::from(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129441,"byte_end":129493,"line_start":347,"line_end":347,"column_start":5,"column_end":57}},{"value":"/ let mut b = a.split_to(5);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129498,"byte_end":129528,"line_start":348,"line_end":348,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129533,"byte_end":129536,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ a[0] = b'!';","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129541,"byte_end":129557,"line_start":350,"line_end":350,"column_start":5,"column_end":21}},{"value":"/ b[0] = b'j';","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129562,"byte_end":129578,"line_start":351,"line_end":351,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129583,"byte_end":129586,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&a[..], b\"!world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129591,"byte_end":129625,"line_start":353,"line_end":353,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(&b[..], b\"jello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129630,"byte_end":129663,"line_start":354,"line_end":354,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129668,"byte_end":129675,"line_start":355,"line_end":355,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129680,"byte_end":129683,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129688,"byte_end":129700,"line_start":357,"line_end":357,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129705,"byte_end":129708,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ Panics if `at > len`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129713,"byte_end":129738,"line_start":359,"line_end":359,"column_start":5,"column_end":30}},{"value":"must_use = \"consider BytesMut::advance if you don't need the other half\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":129743,"byte_end":129818,"line_start":360,"line_end":360,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130858,"byte_end":130866,"line_start":399,"line_end":399,"column_start":12,"column_end":20},"name":"truncate","qualname":"<BytesMut>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the buffer, keeping the first `len` bytes and dropping the\n rest.","sig":null,"attributes":[{"value":"/ Shortens the buffer, keeping the first `len` bytes and dropping the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130195,"byte_end":130266,"line_start":377,"line_end":377,"column_start":5,"column_end":76}},{"value":"/ rest.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130271,"byte_end":130280,"line_start":378,"line_end":378,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130285,"byte_end":130288,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the buffer's current length, this has no","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130293,"byte_end":130362,"line_start":380,"line_end":380,"column_start":5,"column_end":74}},{"value":"/ effect.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130367,"byte_end":130378,"line_start":381,"line_end":381,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130383,"byte_end":130386,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ Existing underlying capacity is preserved.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130391,"byte_end":130437,"line_start":383,"line_end":383,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130442,"byte_end":130445,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ The [`split_off`] method can emulate `truncate`, but this causes the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130450,"byte_end":130522,"line_start":385,"line_end":385,"column_start":5,"column_end":77}},{"value":"/ excess bytes to be returned instead of dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130527,"byte_end":130578,"line_start":386,"line_end":386,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130583,"byte_end":130586,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130591,"byte_end":130605,"line_start":388,"line_end":388,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130610,"byte_end":130613,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130618,"byte_end":130625,"line_start":390,"line_end":390,"column_start":5,"column_end":12}},{"value":"/ use bytes::BytesMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130630,"byte_end":130654,"line_start":391,"line_end":391,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130659,"byte_end":130662,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ let mut buf = BytesMut::from(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130667,"byte_end":130721,"line_start":393,"line_end":393,"column_start":5,"column_end":59}},{"value":"/ buf.truncate(5);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130726,"byte_end":130746,"line_start":394,"line_end":394,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(buf, b\"hello\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130751,"byte_end":130785,"line_start":395,"line_end":395,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130790,"byte_end":130797,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130802,"byte_end":130805,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ [`split_off`]: #method.split_off","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":130810,"byte_end":130846,"line_start":398,"line_end":398,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131308,"byte_end":131313,"line_start":418,"line_end":418,"column_start":12,"column_end":17},"name":"clear","qualname":"<BytesMut>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the buffer, removing all data. Existing capacity is preserved.","sig":null,"attributes":[{"value":"/ Clears the buffer, removing all data. Existing capacity is preserved.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131014,"byte_end":131087,"line_start":407,"line_end":407,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131092,"byte_end":131095,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131100,"byte_end":131114,"line_start":409,"line_end":409,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131119,"byte_end":131122,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131127,"byte_end":131134,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"/ use bytes::BytesMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131139,"byte_end":131163,"line_start":412,"line_end":412,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131168,"byte_end":131171,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ let mut buf = BytesMut::from(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131176,"byte_end":131230,"line_start":414,"line_end":414,"column_start":5,"column_end":59}},{"value":"/ buf.clear();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131235,"byte_end":131251,"line_start":415,"line_end":415,"column_start":5,"column_end":21}},{"value":"/ assert!(buf.is_empty());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131256,"byte_end":131284,"line_start":416,"line_end":416,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131289,"byte_end":131296,"line_start":417,"line_end":417,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132038,"byte_end":132044,"line_start":444,"line_end":444,"column_start":12,"column_end":18},"name":"resize","qualname":"<BytesMut>::resize","value":"pub fn resize(&mut Self, usize, u8)","parent":null,"children":[],"decl_id":null,"docs":" Resizes the buffer so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the buffer so that `len` is equal to `new_len`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131364,"byte_end":131423,"line_start":422,"line_end":422,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131428,"byte_end":131431,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than `len`, the buffer is extended by the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131436,"byte_end":131505,"line_start":424,"line_end":424,"column_start":5,"column_end":74}},{"value":"/ difference with each additional byte set to `value`. If `new_len` is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131510,"byte_end":131582,"line_start":425,"line_end":425,"column_start":5,"column_end":77}},{"value":"/ less than `len`, the buffer is simply truncated.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131587,"byte_end":131639,"line_start":426,"line_end":426,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131644,"byte_end":131647,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131652,"byte_end":131666,"line_start":428,"line_end":428,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131671,"byte_end":131674,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131679,"byte_end":131686,"line_start":430,"line_end":430,"column_start":5,"column_end":12}},{"value":"/ use bytes::BytesMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131691,"byte_end":131715,"line_start":431,"line_end":431,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131720,"byte_end":131723,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ let mut buf = BytesMut::new();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131728,"byte_end":131762,"line_start":433,"line_end":433,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131767,"byte_end":131770,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ buf.resize(3, 0x1);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131775,"byte_end":131798,"line_start":435,"line_end":435,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131803,"byte_end":131846,"line_start":436,"line_end":436,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131851,"byte_end":131854,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ buf.resize(2, 0x2);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131859,"byte_end":131882,"line_start":438,"line_end":438,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(&buf[..], &[0x1, 0x1]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131887,"byte_end":131925,"line_start":439,"line_end":439,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131930,"byte_end":131933,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ buf.resize(4, 0x3);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131938,"byte_end":131961,"line_start":441,"line_end":441,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(&buf[..], &[0x1, 0x1, 0x3, 0x3]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":131966,"byte_end":132014,"line_start":442,"line_end":442,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132019,"byte_end":132026,"line_start":443,"line_end":443,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133117,"byte_end":133124,"line_start":485,"line_end":485,"column_start":19,"column_end":26},"name":"set_len","qualname":"<BytesMut>::set_len","value":"pub unsafe fn set_len(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Sets the length of the buffer.","sig":null,"attributes":[{"value":"/ Sets the length of the buffer.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132487,"byte_end":132521,"line_start":459,"line_end":459,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132526,"byte_end":132529,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ This will explicitly set the size of the buffer without actually","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132534,"byte_end":132602,"line_start":461,"line_end":461,"column_start":5,"column_end":73}},{"value":"/ modifying the data, so it is up to the caller to ensure that the data","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132607,"byte_end":132680,"line_start":462,"line_end":462,"column_start":5,"column_end":78}},{"value":"/ has been initialized.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132685,"byte_end":132710,"line_start":463,"line_end":463,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132715,"byte_end":132718,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132723,"byte_end":132737,"line_start":465,"line_end":465,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132742,"byte_end":132745,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132750,"byte_end":132757,"line_start":467,"line_end":467,"column_start":5,"column_end":12}},{"value":"/ use bytes::BytesMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132762,"byte_end":132786,"line_start":468,"line_end":468,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132791,"byte_end":132794,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ let mut b = BytesMut::from(&b\"hello world\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132799,"byte_end":132851,"line_start":470,"line_end":470,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132856,"byte_end":132859,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132864,"byte_end":132876,"line_start":472,"line_end":472,"column_start":5,"column_end":17}},{"value":"/     b.set_len(5);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132881,"byte_end":132902,"line_start":473,"line_end":473,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132907,"byte_end":132912,"line_start":474,"line_end":474,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132917,"byte_end":132920,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&b[..], b\"hello\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132925,"byte_end":132958,"line_start":476,"line_end":476,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132963,"byte_end":132966,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132971,"byte_end":132983,"line_start":478,"line_end":478,"column_start":5,"column_end":17}},{"value":"/     b.set_len(11);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":132988,"byte_end":133010,"line_start":479,"line_end":479,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133015,"byte_end":133020,"line_start":480,"line_end":480,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133025,"byte_end":133028,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&b[..], b\"hello world\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133033,"byte_end":133072,"line_start":482,"line_end":482,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133077,"byte_end":133084,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133089,"byte_end":133098,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134920,"byte_end":134927,"line_start":540,"line_end":540,"column_start":12,"column_end":19},"name":"reserve","qualname":"<BytesMut>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more bytes to be inserted\n into the given `BytesMut`.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more bytes to be inserted","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133250,"byte_end":133323,"line_start":490,"line_end":490,"column_start":5,"column_end":78}},{"value":"/ into the given `BytesMut`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133328,"byte_end":133358,"line_start":491,"line_end":491,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133363,"byte_end":133366,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ More than `additional` bytes may be reserved in order to avoid frequent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133371,"byte_end":133446,"line_start":493,"line_end":493,"column_start":5,"column_end":80}},{"value":"/ reallocations. A call to `reserve` may result in an allocation.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133451,"byte_end":133518,"line_start":494,"line_end":494,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133523,"byte_end":133526,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ Before allocating new buffer space, the function will attempt to reclaim","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133531,"byte_end":133607,"line_start":496,"line_end":496,"column_start":5,"column_end":81}},{"value":"/ space in the existing buffer. If the current handle references a small","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133612,"byte_end":133686,"line_start":497,"line_end":497,"column_start":5,"column_end":79}},{"value":"/ view in the original buffer and all other handles have been dropped,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133691,"byte_end":133763,"line_start":498,"line_end":498,"column_start":5,"column_end":77}},{"value":"/ and the requested capacity is less than or equal to the existing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133768,"byte_end":133836,"line_start":499,"line_end":499,"column_start":5,"column_end":73}},{"value":"/ buffer's capacity, then the current view will be copied to the front of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133841,"byte_end":133916,"line_start":500,"line_end":500,"column_start":5,"column_end":80}},{"value":"/ the buffer and the handle will take ownership of the full buffer.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133921,"byte_end":133990,"line_start":501,"line_end":501,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":133995,"byte_end":133998,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134003,"byte_end":134017,"line_start":503,"line_end":503,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134022,"byte_end":134025,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ In the following example, a new buffer is allocated.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134030,"byte_end":134086,"line_start":505,"line_end":505,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134091,"byte_end":134094,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134099,"byte_end":134106,"line_start":507,"line_end":507,"column_start":5,"column_end":12}},{"value":"/ use bytes::BytesMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134111,"byte_end":134135,"line_start":508,"line_end":508,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134140,"byte_end":134143,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ let mut buf = BytesMut::from(&b\"hello\"[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134148,"byte_end":134196,"line_start":510,"line_end":510,"column_start":5,"column_end":53}},{"value":"/ buf.reserve(64);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134201,"byte_end":134221,"line_start":511,"line_end":511,"column_start":5,"column_end":25}},{"value":"/ assert!(buf.capacity() >= 69);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134226,"byte_end":134260,"line_start":512,"line_end":512,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134265,"byte_end":134272,"line_start":513,"line_end":513,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134277,"byte_end":134280,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ In the following example, the existing buffer is reclaimed.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134285,"byte_end":134348,"line_start":515,"line_end":515,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134353,"byte_end":134356,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134361,"byte_end":134368,"line_start":517,"line_end":517,"column_start":5,"column_end":12}},{"value":"/ use bytes::{BytesMut, BufMut};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134373,"byte_end":134407,"line_start":518,"line_end":518,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134412,"byte_end":134415,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ let mut buf = BytesMut::with_capacity(128);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134420,"byte_end":134467,"line_start":520,"line_end":520,"column_start":5,"column_end":52}},{"value":"/ buf.put(&[0; 64][..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134472,"byte_end":134498,"line_start":521,"line_end":521,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134503,"byte_end":134506,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ let ptr = buf.as_ptr();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134511,"byte_end":134538,"line_start":523,"line_end":523,"column_start":5,"column_end":32}},{"value":"/ let other = buf.split();","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134543,"byte_end":134571,"line_start":524,"line_end":524,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134576,"byte_end":134579,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ assert!(buf.is_empty());","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134584,"byte_end":134612,"line_start":526,"line_end":526,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(buf.capacity(), 64);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134617,"byte_end":134652,"line_start":527,"line_end":527,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134657,"byte_end":134660,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ drop(other);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134665,"byte_end":134681,"line_start":529,"line_end":529,"column_start":5,"column_end":21}},{"value":"/ buf.reserve(128);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134686,"byte_end":134707,"line_start":530,"line_end":530,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134712,"byte_end":134715,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.capacity(), 128);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134720,"byte_end":134756,"line_start":532,"line_end":532,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(buf.as_ptr(), ptr);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134761,"byte_end":134795,"line_start":533,"line_end":533,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134800,"byte_end":134807,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134812,"byte_end":134815,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134820,"byte_end":134832,"line_start":536,"line_end":536,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134837,"byte_end":134840,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134845,"byte_end":134894,"line_start":538,"line_end":538,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":134899,"byte_end":134908,"line_start":539,"line_end":539,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140349,"byte_end":140366,"line_start":684,"line_end":684,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<BytesMut>::extend_from_slice","value":"pub fn extend_from_slice(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Appends given bytes to this `BytesMut`.","sig":null,"attributes":[{"value":"/ Appends given bytes to this `BytesMut`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":139907,"byte_end":139950,"line_start":668,"line_end":668,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":139955,"byte_end":139958,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ If this `BytesMut` object does not have enough capacity, it is resized","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":139963,"byte_end":140037,"line_start":670,"line_end":670,"column_start":5,"column_end":79}},{"value":"/ first.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140042,"byte_end":140052,"line_start":671,"line_end":671,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140057,"byte_end":140060,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140065,"byte_end":140079,"line_start":673,"line_end":673,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140084,"byte_end":140087,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140092,"byte_end":140099,"line_start":675,"line_end":675,"column_start":5,"column_end":12}},{"value":"/ use bytes::BytesMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140104,"byte_end":140128,"line_start":676,"line_end":676,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140133,"byte_end":140136,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ let mut buf = BytesMut::with_capacity(0);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140141,"byte_end":140186,"line_start":678,"line_end":678,"column_start":5,"column_end":50}},{"value":"/ buf.extend_from_slice(b\"aaabbb\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140191,"byte_end":140228,"line_start":679,"line_end":679,"column_start":5,"column_end":42}},{"value":"/ buf.extend_from_slice(b\"cccddd\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140233,"byte_end":140270,"line_start":680,"line_end":680,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140275,"byte_end":140278,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"aaabbbcccddd\", &buf[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140283,"byte_end":140325,"line_start":682,"line_end":682,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140330,"byte_end":140337,"line_start":683,"line_end":683,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141591,"byte_end":141598,"line_start":724,"line_end":724,"column_start":12,"column_end":19},"name":"unsplit","qualname":"<BytesMut>::unsplit","value":"pub fn unsplit(&mut Self, BytesMut)","parent":null,"children":[],"decl_id":null,"docs":" Absorbs a `BytesMut` that was previously split off.","sig":null,"attributes":[{"value":"/ Absorbs a `BytesMut` that was previously split off.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140764,"byte_end":140819,"line_start":701,"line_end":701,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140824,"byte_end":140827,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ If the two `BytesMut` objects were previously contiguous, i.e., if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140832,"byte_end":140902,"line_start":703,"line_end":703,"column_start":5,"column_end":75}},{"value":"/ `other` was created by calling `split_off` on this `BytesMut`, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140907,"byte_end":140978,"line_start":704,"line_end":704,"column_start":5,"column_end":76}},{"value":"/ this is an `O(1)` operation that just decreases a reference","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":140983,"byte_end":141046,"line_start":705,"line_end":705,"column_start":5,"column_end":68}},{"value":"/ count and sets a few indices. Otherwise this method degenerates to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141051,"byte_end":141121,"line_start":706,"line_end":706,"column_start":5,"column_end":75}},{"value":"/ `self.extend_from_slice(other.as_ref())`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141126,"byte_end":141171,"line_start":707,"line_end":707,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141176,"byte_end":141179,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141184,"byte_end":141198,"line_start":709,"line_end":709,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141203,"byte_end":141206,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141211,"byte_end":141218,"line_start":711,"line_end":711,"column_start":5,"column_end":12}},{"value":"/ use bytes::BytesMut;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141223,"byte_end":141247,"line_start":712,"line_end":712,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141252,"byte_end":141255,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ let mut buf = BytesMut::with_capacity(64);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141260,"byte_end":141306,"line_start":714,"line_end":714,"column_start":5,"column_end":51}},{"value":"/ buf.extend_from_slice(b\"aaabbbcccddd\");","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141311,"byte_end":141354,"line_start":715,"line_end":715,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141359,"byte_end":141362,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ let split = buf.split_off(6);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141367,"byte_end":141400,"line_start":717,"line_end":717,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(b\"aaabbb\", &buf[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141405,"byte_end":141441,"line_start":718,"line_end":718,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(b\"cccddd\", &split[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141446,"byte_end":141484,"line_start":719,"line_end":719,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141489,"byte_end":141492,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ buf.unsplit(split);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141497,"byte_end":141520,"line_start":721,"line_end":721,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(b\"aaabbbcccddd\", &buf[..]);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141525,"byte_end":141567,"line_start":722,"line_end":722,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":141572,"byte_end":141579,"line_start":723,"line_end":723,"column_start":5,"column_end":12}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":32872,"byte_end":32875,"line_start":1017,"line_end":1017,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":33226,"byte_end":33232,"line_start":1039,"line_end":1039,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":61308,"byte_end":61311,"line_start":1031,"line_end":1031,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":62315,"byte_end":62318,"line_start":1071,"line_end":1071,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65118,"byte_end":65123,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":67284,"byte_end":67289,"line_start":132,"line_end":132,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":68780,"byte_end":68785,"line_start":193,"line_end":193,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":69599,"byte_end":69604,"line_start":232,"line_end":232,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70387,"byte_end":70395,"line_start":30,"line_end":30,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72435,"byte_end":72443,"line_start":112,"line_end":112,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72843,"byte_end":72851,"line_start":132,"line_end":132,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73200,"byte_end":73205,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":74357,"byte_end":74362,"line_start":59,"line_end":59,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75208,"byte_end":75214,"line_start":19,"line_end":19,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":76302,"byte_end":76308,"line_start":65,"line_end":65,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":76561,"byte_end":76567,"line_start":74,"line_end":74,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77168,"byte_end":77172,"line_start":19,"line_end":19,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79823,"byte_end":79827,"line_start":132,"line_end":132,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81259,"byte_end":81270,"line_start":24,"line_end":24,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":385},{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84532,"byte_end":84543,"line_start":146,"line_end":146,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","byte_start":85708,"byte_end":85716,"line_start":5,"line_end":5,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86436,"byte_end":86442,"line_start":19,"line_end":19,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87814,"byte_end":87820,"line_start":77,"line_end":77,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92120,"byte_end":92125,"line_start":109,"line_end":109,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":102617,"byte_end":102622,"line_start":509,"line_end":509,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":102647,"byte_end":102652,"line_start":510,"line_end":510,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":102671,"byte_end":102676,"line_start":512,"line_end":512,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":102816,"byte_end":102821,"line_start":519,"line_end":519,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":102962,"byte_end":102967,"line_start":526,"line_end":526,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":103693,"byte_end":103698,"line_start":562,"line_end":562,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":103825,"byte_end":103830,"line_start":571,"line_end":571,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":103932,"byte_end":103937,"line_start":578,"line_end":578,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":104086,"byte_end":104091,"line_start":587,"line_end":587,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":104181,"byte_end":104186,"line_start":593,"line_end":593,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":104551,"byte_end":104556,"line_start":611,"line_end":611,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":104709,"byte_end":104714,"line_start":619,"line_end":619,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":104832,"byte_end":104837,"line_start":625,"line_end":625,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":104984,"byte_end":104989,"line_start":631,"line_end":631,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":105111,"byte_end":105116,"line_start":637,"line_end":637,"column_start":13,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":105146,"byte_end":105151,"line_start":639,"line_end":639,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":105263,"byte_end":105268,"line_start":645,"line_end":645,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":105694,"byte_end":105699,"line_start":663,"line_end":663,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":105820,"byte_end":105825,"line_start":669,"line_end":669,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":106274,"byte_end":106279,"line_start":687,"line_end":687,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":106392,"byte_end":106397,"line_start":693,"line_end":693,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":106553,"byte_end":106556,"line_start":699,"line_end":699,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":106665,"byte_end":106668,"line_start":705,"line_end":705,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":106840,"byte_end":106845,"line_start":711,"line_end":711,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":106956,"byte_end":106961,"line_start":717,"line_end":717,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":107122,"byte_end":107128,"line_start":723,"line_end":723,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":107233,"byte_end":107239,"line_start":729,"line_end":729,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108005,"byte_end":108010,"line_start":759,"line_end":759,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108162,"byte_end":108167,"line_start":768,"line_end":768,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108345,"byte_end":108350,"line_start":779,"line_end":779,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108454,"byte_end":108459,"line_start":786,"line_end":786,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108578,"byte_end":108583,"line_start":792,"line_end":792,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108707,"byte_end":108712,"line_start":798,"line_end":798,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108851,"byte_end":108856,"line_start":805,"line_end":805,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":109722,"byte_end":109727,"line_start":836,"line_end":836,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":109857,"byte_end":109863,"line_start":844,"line_end":844,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123033,"byte_end":123041,"line_start":117,"line_end":117,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":148094,"byte_end":148102,"line_start":925,"line_end":925,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":837}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":148536,"byte_end":148544,"line_start":942,"line_end":942,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":149122,"byte_end":149130,"line_start":971,"line_end":971,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":849},{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":150496,"byte_end":150504,"line_start":1030,"line_end":1030,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":150601,"byte_end":150609,"line_start":1037,"line_end":1037,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":854},{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":150734,"byte_end":150742,"line_start":1046,"line_end":1046,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":150854,"byte_end":150862,"line_start":1053,"line_end":1053,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":150981,"byte_end":150989,"line_start":1060,"line_end":1060,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151110,"byte_end":151118,"line_start":1066,"line_end":1066,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151233,"byte_end":151238,"line_start":1072,"line_end":1072,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151328,"byte_end":151336,"line_start":1078,"line_end":1078,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151457,"byte_end":151465,"line_start":1084,"line_end":1084,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151615,"byte_end":151623,"line_start":1090,"line_end":1090,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151748,"byte_end":151756,"line_start":1096,"line_end":1096,"column_start":13,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151778,"byte_end":151786,"line_start":1098,"line_end":1098,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151887,"byte_end":151895,"line_start":1105,"line_end":1105,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":152068,"byte_end":152076,"line_start":1115,"line_end":1115,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":152167,"byte_end":152175,"line_start":1121,"line_end":1121,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":152273,"byte_end":152281,"line_start":1127,"line_end":1127,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":885},{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":152660,"byte_end":152668,"line_start":1144,"line_end":1144,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":152770,"byte_end":152778,"line_start":1150,"line_end":1150,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":153141,"byte_end":153149,"line_start":1168,"line_end":1168,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":153605,"byte_end":153613,"line_start":1188,"line_end":1188,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":153794,"byte_end":153802,"line_start":1197,"line_end":1197,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":153971,"byte_end":153979,"line_start":1203,"line_end":1203,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":155617,"byte_end":155623,"line_start":1252,"line_end":1252,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":158497,"byte_end":158505,"line_start":1336,"line_end":1336,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":158530,"byte_end":158538,"line_start":1337,"line_end":1337,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":158620,"byte_end":158628,"line_start":1345,"line_end":1345,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":158732,"byte_end":158740,"line_start":1351,"line_end":1351,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":159171,"byte_end":159179,"line_start":1369,"line_end":1369,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":159292,"byte_end":159300,"line_start":1375,"line_end":1375,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":159754,"byte_end":159762,"line_start":1393,"line_end":1393,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":159875,"byte_end":159883,"line_start":1399,"line_end":1399,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160035,"byte_end":160038,"line_start":1405,"line_end":1405,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160153,"byte_end":160156,"line_start":1411,"line_end":1411,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":945}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160302,"byte_end":160310,"line_start":1417,"line_end":1417,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160421,"byte_end":160429,"line_start":1423,"line_end":1423,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":949}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160586,"byte_end":160592,"line_start":1429,"line_end":1429,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160703,"byte_end":160709,"line_start":1435,"line_end":1435,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":953}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160905,"byte_end":160913,"line_start":1441,"line_end":1441,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":161068,"byte_end":161076,"line_start":1450,"line_end":1450,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":161810,"byte_end":161815,"line_start":1483,"line_end":1483,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":161930,"byte_end":161938,"line_start":1489,"line_end":1489,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/fmt/debug.rs","byte_start":165079,"byte_end":165087,"line_start":12,"line_end":12,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/fmt/debug.rs","byte_start":165921,"byte_end":165926,"line_start":39,"line_end":39,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/fmt/debug.rs","byte_start":166055,"byte_end":166063,"line_start":45,"line_end":45,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/fmt/hex.rs","byte_start":166304,"byte_end":166312,"line_start":6,"line_end":6,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/fmt/hex.rs","byte_start":166488,"byte_end":166496,"line_start":15,"line_end":15,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/loom.rs","byte_start":167367,"byte_end":167376,"line_start":12,"line_end":12,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1067}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/lib.rs","byte_start":2919,"byte_end":2922,"line_start":83,"line_end":83,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":6}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":32872,"byte_end":32875,"line_start":1017,"line_end":1017,"column_start":31,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":4,"index":315},"to":{"krate":0,"index":42}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_impl.rs","byte_start":33226,"byte_end":33232,"line_start":1039,"line_end":1039,"column_start":39,"column_end":45},"kind":{"Impl":{"id":1}},"from":{"krate":5,"index":10626},"to":{"krate":0,"index":42}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":61308,"byte_end":61311,"line_start":1031,"line_end":1031,"column_start":44,"column_end":47},"kind":{"Impl":{"id":2}},"from":{"krate":4,"index":315},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/buf_mut.rs","byte_start":62315,"byte_end":62318,"line_start":1071,"line_end":1071,"column_start":24,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":4,"index":7080},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":65118,"byte_end":65123,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":67284,"byte_end":67289,"line_start":132,"line_end":132,"column_start":20,"column_end":25},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1233},"to":{"krate":0,"index":42}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":68780,"byte_end":68785,"line_start":193,"line_end":193,"column_start":30,"column_end":35},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1233},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/chain.rs","byte_start":69599,"byte_end":69604,"line_start":232,"line_end":232,"column_start":29,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1233},"to":{"krate":1,"index":7633}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":70387,"byte_end":70395,"line_start":30,"line_end":30,"column_start":9,"column_end":17},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1242},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72435,"byte_end":72443,"line_start":112,"line_end":112,"column_start":27,"column_end":35},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1242},"to":{"krate":1,"index":7822}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/iter.rs","byte_start":72843,"byte_end":72851,"line_start":132,"line_end":132,"column_start":36,"column_end":44},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1242},"to":{"krate":1,"index":7702}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":73200,"byte_end":73205,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/limit.rs","byte_start":74357,"byte_end":74362,"line_start":59,"line_end":59,"column_start":35,"column_end":40},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1248},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":75208,"byte_end":75214,"line_start":19,"line_end":19,"column_start":14,"column_end":20},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1255},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":76302,"byte_end":76308,"line_start":65,"line_end":65,"column_start":35,"column_end":41},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1255},"to":{"krate":5,"index":4402}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/reader.rs","byte_start":76561,"byte_end":76567,"line_start":74,"line_end":74,"column_start":38,"column_end":44},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1255},"to":{"krate":5,"index":4484}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":77168,"byte_end":77172,"line_start":19,"line_end":19,"column_start":9,"column_end":13},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1261},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/take.rs","byte_start":79823,"byte_end":79827,"line_start":132,"line_end":132,"column_start":22,"column_end":26},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1261},"to":{"krate":0,"index":42}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":81259,"byte_end":81270,"line_start":24,"line_end":24,"column_start":6,"column_end":17},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/uninit_slice.rs","byte_start":84532,"byte_end":84543,"line_start":146,"line_end":146,"column_start":21,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":374},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/vec_deque.rs","byte_start":85708,"byte_end":85716,"line_start":5,"line_end":5,"column_start":14,"column_end":22},"kind":{"Impl":{"id":20}},"from":{"krate":4,"index":4173},"to":{"krate":0,"index":42}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":86436,"byte_end":86442,"line_start":19,"line_end":19,"column_start":17,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/buf/writer.rs","byte_start":87814,"byte_end":87820,"line_start":77,"line_end":77,"column_start":39,"column_end":45},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1298},"to":{"krate":5,"index":4459}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":92120,"byte_end":92125,"line_start":109,"line_end":109,"column_start":6,"column_end":11},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":526},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":102617,"byte_end":102622,"line_start":509,"line_end":509,"column_start":22,"column_end":27},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":102647,"byte_end":102652,"line_start":510,"line_end":510,"column_start":22,"column_end":27},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":102671,"byte_end":102676,"line_start":512,"line_end":512,"column_start":15,"column_end":20},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":102816,"byte_end":102821,"line_start":519,"line_end":519,"column_start":16,"column_end":21},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":102962,"byte_end":102967,"line_start":526,"line_end":526,"column_start":14,"column_end":19},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":526},"to":{"krate":0,"index":42}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":103693,"byte_end":103698,"line_start":562,"line_end":562,"column_start":16,"column_end":21},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":103825,"byte_end":103830,"line_start":571,"line_end":571,"column_start":22,"column_end":27},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":103932,"byte_end":103937,"line_start":578,"line_end":578,"column_start":21,"column_end":26},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":9760}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":104086,"byte_end":104091,"line_start":587,"line_end":587,"column_start":23,"column_end":28},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2618}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":104181,"byte_end":104186,"line_start":593,"line_end":593,"column_start":23,"column_end":28},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":7633}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":104551,"byte_end":104556,"line_start":611,"line_end":611,"column_start":27,"column_end":32},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":7629}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":104709,"byte_end":104714,"line_start":619,"line_end":619,"column_start":20,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":104832,"byte_end":104837,"line_start":625,"line_end":625,"column_start":21,"column_end":26},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":104984,"byte_end":104989,"line_start":631,"line_end":631,"column_start":14,"column_end":19},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2706}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":105111,"byte_end":105116,"line_start":637,"line_end":637,"column_start":13,"column_end":18},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":105146,"byte_end":105151,"line_start":639,"line_end":639,"column_start":26,"column_end":31},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":105263,"byte_end":105268,"line_start":645,"line_end":645,"column_start":27,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":105694,"byte_end":105699,"line_start":663,"line_end":663,"column_start":25,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":105820,"byte_end":105825,"line_start":669,"line_end":669,"column_start":26,"column_end":31},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":106274,"byte_end":106279,"line_start":687,"line_end":687,"column_start":29,"column_end":34},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":106392,"byte_end":106397,"line_start":693,"line_end":693,"column_start":30,"column_end":35},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":106553,"byte_end":106556,"line_start":699,"line_end":699,"column_start":27,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":4,"index":7080},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":106665,"byte_end":106668,"line_start":705,"line_end":705,"column_start":28,"column_end":31},"kind":{"Impl":{"id":48}},"from":{"krate":4,"index":7080},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":106840,"byte_end":106845,"line_start":711,"line_end":711,"column_start":28,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":106956,"byte_end":106961,"line_start":717,"line_end":717,"column_start":29,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":107122,"byte_end":107128,"line_start":723,"line_end":723,"column_start":27,"column_end":33},"kind":{"Impl":{"id":51}},"from":{"krate":4,"index":7617},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":107233,"byte_end":107239,"line_start":729,"line_end":729,"column_start":28,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":4,"index":7617},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108005,"byte_end":108010,"line_start":759,"line_end":759,"column_start":42,"column_end":47},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108162,"byte_end":108167,"line_start":768,"line_end":768,"column_start":43,"column_end":48},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108345,"byte_end":108350,"line_start":779,"line_end":779,"column_start":18,"column_end":23},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108454,"byte_end":108459,"line_start":786,"line_end":786,"column_start":30,"column_end":35},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108578,"byte_end":108583,"line_start":792,"line_end":792,"column_start":29,"column_end":34},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108707,"byte_end":108712,"line_start":798,"line_end":798,"column_start":24,"column_end":29},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":108851,"byte_end":108856,"line_start":805,"line_end":805,"column_start":26,"column_end":31},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":109722,"byte_end":109727,"line_start":836,"line_end":836,"column_start":23,"column_end":28},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes.rs","byte_start":109857,"byte_end":109863,"line_start":844,"line_end":844,"column_start":21,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":531},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":123033,"byte_end":123041,"line_start":117,"line_end":117,"column_start":6,"column_end":14},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":148094,"byte_end":148102,"line_start":925,"line_end":925,"column_start":15,"column_end":23},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":148536,"byte_end":148544,"line_start":942,"line_end":942,"column_start":14,"column_end":22},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":786},"to":{"krate":0,"index":42}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":149122,"byte_end":149130,"line_start":971,"line_end":971,"column_start":24,"column_end":32},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":786},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":150496,"byte_end":150504,"line_start":1030,"line_end":1030,"column_start":22,"column_end":30},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":150601,"byte_end":150609,"line_start":1037,"line_end":1037,"column_start":16,"column_end":24},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":150734,"byte_end":150742,"line_start":1046,"line_end":1046,"column_start":22,"column_end":30},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2919}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":150854,"byte_end":150862,"line_start":1053,"line_end":1053,"column_start":19,"column_end":27},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":150981,"byte_end":150989,"line_start":1060,"line_end":1060,"column_start":29,"column_end":37},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151110,"byte_end":151118,"line_start":1066,"line_end":1066,"column_start":28,"column_end":36},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151233,"byte_end":151238,"line_start":1072,"line_end":1072,"column_start":25,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151328,"byte_end":151336,"line_start":1078,"line_end":1078,"column_start":20,"column_end":28},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151457,"byte_end":151465,"line_start":1084,"line_end":1084,"column_start":21,"column_end":29},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151615,"byte_end":151623,"line_start":1090,"line_end":1090,"column_start":14,"column_end":22},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2706}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151748,"byte_end":151756,"line_start":1096,"line_end":1096,"column_start":13,"column_end":21},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151778,"byte_end":151786,"line_start":1098,"line_end":1098,"column_start":18,"column_end":26},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":151887,"byte_end":151895,"line_start":1105,"line_end":1105,"column_start":21,"column_end":29},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":9760}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":152068,"byte_end":152076,"line_start":1115,"line_end":1115,"column_start":23,"column_end":31},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2618}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":152167,"byte_end":152175,"line_start":1121,"line_end":1121,"column_start":26,"column_end":34},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2621}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":152273,"byte_end":152281,"line_start":1127,"line_end":1127,"column_start":21,"column_end":29},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":9504}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":152660,"byte_end":152668,"line_start":1144,"line_end":1144,"column_start":16,"column_end":24},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":152770,"byte_end":152778,"line_start":1150,"line_end":1150,"column_start":23,"column_end":31},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":7633}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":153141,"byte_end":153149,"line_start":1168,"line_end":1168,"column_start":21,"column_end":29},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":7642}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":153605,"byte_end":153613,"line_start":1188,"line_end":1188,"column_start":29,"column_end":37},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":7642}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":153794,"byte_end":153802,"line_start":1197,"line_end":1197,"column_start":27,"column_end":35},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":7629}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":153971,"byte_end":153979,"line_start":1203,"line_end":1203,"column_start":35,"column_end":43},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":7629}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":155617,"byte_end":155623,"line_start":1252,"line_end":1252,"column_start":6,"column_end":12},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":158497,"byte_end":158505,"line_start":1336,"line_end":1336,"column_start":22,"column_end":30},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":158530,"byte_end":158538,"line_start":1337,"line_end":1337,"column_start":22,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":158620,"byte_end":158628,"line_start":1345,"line_end":1345,"column_start":26,"column_end":34},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":158732,"byte_end":158740,"line_start":1351,"line_end":1351,"column_start":27,"column_end":35},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":159171,"byte_end":159179,"line_start":1369,"line_end":1369,"column_start":25,"column_end":33},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":159292,"byte_end":159300,"line_start":1375,"line_end":1375,"column_start":26,"column_end":34},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":159754,"byte_end":159762,"line_start":1393,"line_end":1393,"column_start":29,"column_end":37},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":159875,"byte_end":159883,"line_start":1399,"line_end":1399,"column_start":30,"column_end":38},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160035,"byte_end":160038,"line_start":1405,"line_end":1405,"column_start":30,"column_end":33},"kind":{"Impl":{"id":99}},"from":{"krate":4,"index":7080},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160153,"byte_end":160156,"line_start":1411,"line_end":1411,"column_start":31,"column_end":34},"kind":{"Impl":{"id":100}},"from":{"krate":4,"index":7080},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160302,"byte_end":160310,"line_start":1417,"line_end":1417,"column_start":28,"column_end":36},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160421,"byte_end":160429,"line_start":1423,"line_end":1423,"column_start":29,"column_end":37},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160586,"byte_end":160592,"line_start":1429,"line_end":1429,"column_start":30,"column_end":36},"kind":{"Impl":{"id":103}},"from":{"krate":4,"index":7617},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160703,"byte_end":160709,"line_start":1435,"line_end":1435,"column_start":31,"column_end":37},"kind":{"Impl":{"id":104}},"from":{"krate":4,"index":7617},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":160905,"byte_end":160913,"line_start":1441,"line_end":1441,"column_start":42,"column_end":50},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":161068,"byte_end":161076,"line_start":1450,"line_end":1450,"column_start":43,"column_end":51},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":161810,"byte_end":161815,"line_start":1483,"line_end":1483,"column_start":30,"column_end":35},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/bytes_mut.rs","byte_start":161930,"byte_end":161938,"line_start":1489,"line_end":1489,"column_start":27,"column_end":35},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/fmt/debug.rs","byte_start":165079,"byte_end":165087,"line_start":12,"line_end":12,"column_start":16,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1040},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/fmt/debug.rs","byte_start":165921,"byte_end":165926,"line_start":39,"line_end":39,"column_start":16,"column_end":21},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/fmt/debug.rs","byte_start":166055,"byte_end":166063,"line_start":45,"line_end":45,"column_start":16,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/fmt/hex.rs","byte_start":166304,"byte_end":166312,"line_start":6,"line_end":6,"column_start":19,"column_end":27},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1040},"to":{"krate":1,"index":9566}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/fmt/hex.rs","byte_start":166488,"byte_end":166496,"line_start":15,"line_end":15,"column_start":19,"column_end":27},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1040},"to":{"krate":1,"index":9568}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-1.1.0/src/loom.rs","byte_start":167367,"byte_end":167376,"line_start":12,"line_end":12,"column_start":34,"column_end":43},"kind":{"Impl":{"id":118}},"from":{"krate":1,"index":9090},"to":{"krate":0,"index":1060}}]}