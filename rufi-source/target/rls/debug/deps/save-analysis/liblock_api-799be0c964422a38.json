{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6","program":"/home/ozz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","lock_api","--edition=2018","/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=799be0c964422a38","-C","extra-filename=-799be0c964422a38","--out-dir","/home/ozz/Desktop/dev/rust/rufi/target/rls/debug/deps","-L","dependency=/home/ozz/Desktop/dev/rust/rufi/target/rls/debug/deps","--extern","scopeguard=/home/ozz/Desktop/dev/rust/rufi/target/rls/debug/deps/libscopeguard-c8990110111ba394.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/ozz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ozz/Desktop/dev/rust/rufi/target/rls/debug/deps/liblock_api-799be0c964422a38.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[13972940575092554509,0]},"crate_root":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src","external_crates":[{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[6845241270465700697,0]}}],"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":333,"byte_end":4297,"line_start":8,"line_end":116,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":4215,"byte_end":4216,"line_start":110,"line_end":110,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":4256,"byte_end":4257,"line_start":113,"line_end":113,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":4295,"byte_end":4296,"line_start":116,"line_end":116,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":333,"byte_end":4297,"line_start":8,"line_end":116,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":927}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"/ This library provides type-safe and fully-featured `Mutex` and `RwLock`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":333,"byte_end":408,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ types which wrap a simple raw mutex or rwlock type. This has several","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":409,"byte_end":481,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ benefits: not only does it eliminate a large portion of the work in","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":482,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ implementing custom lock types, it also allows users to write code which is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":554,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ generic with regards to different lock implementations.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":634,"byte_end":693,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":694,"byte_end":697,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Basic usage of this crate is very straightforward:","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":698,"byte_end":752,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":753,"byte_end":756,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ 1. Create a raw lock type. This should only contain the lock state, not any","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":757,"byte_end":836,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/    data protected by the lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":837,"byte_end":871,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/ 2. Implement the `RawMutex` trait for your custom lock type.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":872,"byte_end":936,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ 3. Export your mutex as a type alias for `lock_api::Mutex`, and","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":937,"byte_end":1004,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/    your mutex guard as a type alias for `lock_api::MutexGuard`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1005,"byte_end":1072,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/    See the [example](#example) below for details.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1073,"byte_end":1126,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1127,"byte_end":1130,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This process is similar for RwLocks, except that two guards need to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1131,"byte_end":1205,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ exported instead of one. (Or 3 guards if your type supports upgradable read","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1206,"byte_end":1285,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ locks, see [extension traits](#extension-traits) below for details)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1286,"byte_end":1357,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1358,"byte_end":1361,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1362,"byte_end":1375,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1376,"byte_end":1379,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1380,"byte_end":1387,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use lock_api::{RawMutex, Mutex, GuardSend};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1388,"byte_end":1435,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/ use std::sync::atomic::{AtomicBool, Ordering};","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1436,"byte_end":1486,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1487,"byte_end":1490,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // 1. Define our raw lock type","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1491,"byte_end":1525,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ pub struct RawSpinlock(AtomicBool);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1526,"byte_end":1565,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1566,"byte_end":1569,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // 2. Implement RawMutex for this type","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1570,"byte_end":1612,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/ unsafe impl RawMutex for RawSpinlock {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1613,"byte_end":1655,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/     const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1656,"byte_end":1726,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1727,"byte_end":1730,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/     // A spinlock guard can be sent to another thread and unlocked there","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1731,"byte_end":1807,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/     type GuardMarker = GuardSend;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1808,"byte_end":1845,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1846,"byte_end":1849,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/     fn lock(&self) {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1850,"byte_end":1874,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/         // Note: This isn't the best way of implementing a spinlock, but it","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1875,"byte_end":1954,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/         // suffices for the sake of this example.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":1955,"byte_end":2008,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/         while !self.try_lock() {}","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2009,"byte_end":2046,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2047,"byte_end":2056,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2057,"byte_end":2060,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn try_lock(&self) -> bool {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2061,"byte_end":2097,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"/         self.0","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2098,"byte_end":2116,"line_start":50,"line_end":50,"column_start":1,"column_end":19}},{"value":"/             .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2117,"byte_end":2201,"line_start":51,"line_end":51,"column_start":1,"column_end":85}},{"value":"/             .is_ok()","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2202,"byte_end":2226,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2227,"byte_end":2236,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2237,"byte_end":2240,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/     unsafe fn unlock(&self) {","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2241,"byte_end":2274,"line_start":55,"line_end":55,"column_start":1,"column_end":34}},{"value":"/         self.0.store(false, Ordering::Release);","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2275,"byte_end":2326,"line_start":56,"line_end":56,"column_start":1,"column_end":52}},{"value":"/     }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2327,"byte_end":2336,"line_start":57,"line_end":57,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2337,"byte_end":2342,"line_start":58,"line_end":58,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2343,"byte_end":2346,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // 3. Export the wrappers. This are the types that your users will actually use.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2347,"byte_end":2431,"line_start":60,"line_end":60,"column_start":1,"column_end":85}},{"value":"/ pub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2432,"byte_end":2491,"line_start":61,"line_end":61,"column_start":1,"column_end":60}},{"value":"/ pub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2492,"byte_end":2569,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2570,"byte_end":2577,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2578,"byte_end":2581,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # Extension traits","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2582,"byte_end":2604,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2605,"byte_end":2608,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ In addition to basic locking & unlocking functionality, you have the option","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2609,"byte_end":2688,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/ of exposing additional functionality in your lock types by implementing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2689,"byte_end":2764,"line_start":68,"line_end":68,"column_start":1,"column_end":76}},{"value":"/ additional traits for it. Examples of extension features include:","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2765,"byte_end":2834,"line_start":69,"line_end":69,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2835,"byte_end":2838,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ - Fair unlocking (`RawMutexFair`, `RawRwLockFair`)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2839,"byte_end":2893,"line_start":71,"line_end":71,"column_start":1,"column_end":55}},{"value":"/ - Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2894,"byte_end":2949,"line_start":72,"line_end":72,"column_start":1,"column_end":56}},{"value":"/ - Downgradable write locks (`RawRwLockDowngradable`)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":2950,"byte_end":3006,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ - Recursive read locks (`RawRwLockRecursive`)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3007,"byte_end":3056,"line_start":74,"line_end":74,"column_start":1,"column_end":50}},{"value":"/ - Upgradable read locks (`RawRwLockUpgrade`)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3057,"byte_end":3105,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3106,"byte_end":3109,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ The `Mutex` and `RwLock` wrappers will automatically expose this additional","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3110,"byte_end":3189,"line_start":77,"line_end":77,"column_start":1,"column_end":80}},{"value":"/ functionality if the raw lock type implements these extension traits.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3190,"byte_end":3263,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3264,"byte_end":3267,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ # Cargo features","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3268,"byte_end":3288,"line_start":80,"line_end":80,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3289,"byte_end":3292,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This crate supports three cargo features:","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3293,"byte_end":3338,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3339,"byte_end":3342,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ - `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3343,"byte_end":3425,"line_start":84,"line_end":84,"column_start":1,"column_end":83}},{"value":"/ - `arc_lock`: Enables locking from an `Arc`. This enables types such as `ArcMutexGuard`. Note that this","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3426,"byte_end":3533,"line_start":85,"line_end":85,"column_start":1,"column_end":108}},{"value":"/   requires the `alloc` crate to be present.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3534,"byte_end":3581,"line_start":86,"line_end":86,"column_start":1,"column_end":48}},{"value":"/ - `nightly`: Enables nightly-only features. At the moment the only such","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3582,"byte_end":3657,"line_start":87,"line_end":87,"column_start":1,"column_end":76}},{"value":"/   feature is `const fn` constructors for lock types.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3658,"byte_end":3714,"line_start":88,"line_end":88,"column_start":1,"column_end":57}},{"value":"no_std","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3716,"byte_end":3726,"line_start":90,"line_end":90,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3727,"byte_end":3749,"line_start":91,"line_end":91,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3750,"byte_end":3776,"line_start":92,"line_end":92,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":4017,"byte_end":4026,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is `Send`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":3932,"byte_end":4005,"line_start":101,"line_end":101,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":4122,"byte_end":4133,"line_start":105,"line_end":105,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is not `Send`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":4033,"byte_end":4110,"line_start":104,"line_end":104,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5397,"byte_end":5405,"line_start":36,"line_end":36,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[{"value":"/ Basic operations for a mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5063,"byte_end":5096,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5097,"byte_end":5100,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `Mutex` to form a safe and","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5101,"byte_end":5176,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ fully-functioning mutex type.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5177,"byte_end":5210,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5211,"byte_end":5214,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5215,"byte_end":5227,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5228,"byte_end":5231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the mutex is actually","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5232,"byte_end":5304,"line_start":34,"line_end":34,"column_start":1,"column_end":73}},{"value":"/ exclusive: a lock can't be acquired while the mutex is already locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5305,"byte_end":5379,"line_start":35,"line_end":35,"column_start":1,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":33},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5708,"byte_end":5712,"line_start":41,"line_end":41,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5412,"byte_end":5452,"line_start":37,"line_end":37,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5649,"byte_end":5697,"line_start":40,"line_end":40,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5877,"byte_end":5888,"line_start":45,"line_end":45,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5725,"byte_end":5800,"line_start":43,"line_end":43,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5805,"byte_end":5867,"line_start":44,"line_end":44,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5982,"byte_end":5986,"line_start":48,"line_end":48,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"pub fn lock(&Self)","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":5895,"byte_end":5974,"line_start":47,"line_end":47,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6144,"byte_end":6152,"line_start":52,"line_end":52,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking. Returns `true`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6000,"byte_end":6067,"line_start":50,"line_end":50,"column_start":5,"column_end":72}},{"value":"/ if the lock was successfully acquired and `false` otherwise.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6072,"byte_end":6136,"line_start":51,"line_end":51,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6682,"byte_end":6688,"line_start":65,"line_end":65,"column_start":15,"column_end":21},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"pub unsafe fn unlock(&Self)","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Unlocks this mutex.","sig":null,"attributes":[{"value":"/ Unlocks this mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6174,"byte_end":6197,"line_start":54,"line_end":54,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6202,"byte_end":6205,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6210,"byte_end":6222,"line_start":56,"line_end":56,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6227,"byte_end":6230,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, i.e. it must","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6235,"byte_end":6327,"line_start":58,"line_end":58,"column_start":5,"column_end":97}},{"value":"/ be paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6332,"byte_end":6435,"line_start":59,"line_end":59,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6440,"byte_end":6443,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ [`lock`]: #tymethod.lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6448,"byte_end":6476,"line_start":61,"line_end":61,"column_start":5,"column_end":33}},{"value":"/ [`try_lock`]: #tymethod.try_lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6481,"byte_end":6517,"line_start":62,"line_end":62,"column_start":5,"column_end":41}},{"value":"/ [`try_lock_for`]: trait.RawMutexTimed.html#tymethod.try_lock_for","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6522,"byte_end":6590,"line_start":63,"line_end":63,"column_start":5,"column_end":73}},{"value":"/ [`try_lock_until`]: trait.RawMutexTimed.html#tymethod.try_lock_until","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6595,"byte_end":6667,"line_start":64,"line_end":64,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6773,"byte_end":6782,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::mutex::RawMutex::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6702,"byte_end":6751,"line_start":67,"line_end":67,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":6756,"byte_end":6765,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":39},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7430,"byte_end":7442,"line_start":87,"line_end":87,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support fair unlocking.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7050,"byte_end":7114,"line_start":81,"line_end":81,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7115,"byte_end":7118,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7119,"byte_end":7199,"line_start":83,"line_end":83,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7200,"byte_end":7275,"line_start":84,"line_end":84,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7276,"byte_end":7350,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7351,"byte_end":7412,"line_start":86,"line_end":86,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7752,"byte_end":7763,"line_start":96,"line_end":96,"column_start":15,"column_end":26},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"pub unsafe fn unlock_fair(&Self)","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7459,"byte_end":7511,"line_start":88,"line_end":88,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7516,"byte_end":7519,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7524,"byte_end":7536,"line_start":90,"line_end":90,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7541,"byte_end":7544,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, see","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7549,"byte_end":7632,"line_start":92,"line_end":92,"column_start":5,"column_end":88}},{"value":"/ the documentation of [`unlock`].","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7637,"byte_end":7673,"line_start":93,"line_end":93,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7678,"byte_end":7681,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ [`unlock`]: trait.RawMutex.html#tymethod.unlock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7686,"byte_end":7737,"line_start":95,"line_end":95,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8289,"byte_end":8293,"line_start":110,"line_end":110,"column_start":15,"column_end":19},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"pub unsafe fn bump(&Self)","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7777,"byte_end":7846,"line_start":98,"line_end":98,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7851,"byte_end":7854,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7859,"byte_end":7935,"line_start":100,"line_end":100,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7940,"byte_end":8016,"line_start":101,"line_end":101,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8021,"byte_end":8048,"line_start":102,"line_end":102,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8053,"byte_end":8056,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8061,"byte_end":8073,"line_start":104,"line_end":104,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8078,"byte_end":8081,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, see","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8086,"byte_end":8169,"line_start":106,"line_end":106,"column_start":5,"column_end":88}},{"value":"/ the documentation of [`unlock`].","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8174,"byte_end":8210,"line_start":107,"line_end":107,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8215,"byte_end":8218,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ [`unlock`]: trait.RawMutex.html#tymethod.unlock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8223,"byte_end":8274,"line_start":109,"line_end":109,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":42},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8591,"byte_end":8604,"line_start":120,"line_end":120,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support locking with timeouts.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8361,"byte_end":8432,"line_start":116,"line_end":116,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8433,"byte_end":8436,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8437,"byte_end":8517,"line_start":118,"line_end":118,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8518,"byte_end":8573,"line_start":119,"line_end":119,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":43},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8673,"byte_end":8681,"line_start":122,"line_end":122,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8621,"byte_end":8663,"line_start":121,"line_end":121,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":44},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8741,"byte_end":8748,"line_start":125,"line_end":125,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8688,"byte_end":8731,"line_start":124,"line_end":124,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8824,"byte_end":8836,"line_start":128,"line_end":128,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"pub fn try_lock_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8755,"byte_end":8816,"line_start":127,"line_end":127,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8952,"byte_end":8966,"line_start":131,"line_end":131,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"pub fn try_lock_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8883,"byte_end":8944,"line_start":130,"line_end":130,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":47},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9520,"byte_end":9525,"line_start":142,"line_end":142,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9010,"byte_end":9076,"line_start":134,"line_end":134,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9077,"byte_end":9080,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9081,"byte_end":9160,"line_start":136,"line_end":136,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9161,"byte_end":9228,"line_start":137,"line_end":137,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9229,"byte_end":9308,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9309,"byte_end":9384,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9385,"byte_end":9464,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9465,"byte_end":9508,"line_start":141,"line_end":141,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10147,"byte_end":10150,"line_start":164,"line_end":164,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"pub fn new(T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10025,"byte_end":10084,"line_start":161,"line_end":161,"column_start":5,"column_end":64}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10089,"byte_end":10121,"line_start":162,"line_end":162,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10126,"byte_end":10135,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10360,"byte_end":10370,"line_start":173,"line_end":173,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10279,"byte_end":10334,"line_start":171,"line_end":171,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10339,"byte_end":10348,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10626,"byte_end":10635,"line_start":183,"line_end":183,"column_start":18,"column_end":27},"name":"const_new","qualname":"<Mutex<R, T>>::const_new","value":"pub const fn const_new(R, T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex based on a pre-existing raw mutex.","sig":null,"attributes":[{"value":"/ Creates a new mutex based on a pre-existing raw mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10453,"byte_end":10511,"line_start":179,"line_end":179,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10516,"byte_end":10519,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ This allows creating a mutex in a constant context on stable Rust.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10524,"byte_end":10594,"line_start":181,"line_end":181,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10599,"byte_end":10608,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11607,"byte_end":11611,"line_start":213,"line_end":213,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11069,"byte_end":11145,"line_start":203,"line_end":203,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11150,"byte_end":11153,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ This function will block the local thread until it is available to acquire","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11158,"byte_end":11236,"line_start":205,"line_end":205,"column_start":5,"column_end":83}},{"value":"/ the mutex. Upon returning, the thread is the only thread with the mutex","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11241,"byte_end":11316,"line_start":206,"line_end":206,"column_start":5,"column_end":80}},{"value":"/ held. An RAII guard is returned to allow scoped unlock of the lock. When","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11321,"byte_end":11397,"line_start":207,"line_end":207,"column_start":5,"column_end":81}},{"value":"/ the guard goes out of scope, the mutex will be unlocked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11402,"byte_end":11462,"line_start":208,"line_end":208,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11467,"byte_end":11470,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Attempts to lock a mutex in the thread which already holds the lock will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11475,"byte_end":11551,"line_start":210,"line_end":210,"column_start":5,"column_end":81}},{"value":"/ result in a deadlock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11556,"byte_end":11581,"line_start":211,"line_end":211,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11586,"byte_end":11595,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12065,"byte_end":12073,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11763,"byte_end":11797,"line_start":219,"line_end":219,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11802,"byte_end":11805,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11810,"byte_end":11886,"line_start":221,"line_end":221,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11891,"byte_end":11967,"line_start":222,"line_end":222,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11972,"byte_end":11993,"line_start":223,"line_end":223,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":11998,"byte_end":12001,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12006,"byte_end":12039,"line_start":225,"line_end":225,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12044,"byte_end":12053,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12546,"byte_end":12553,"line_start":241,"line_end":241,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12299,"byte_end":12354,"line_start":236,"line_end":236,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12359,"byte_end":12362,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12367,"byte_end":12442,"line_start":238,"line_end":238,"column_start":5,"column_end":80}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12447,"byte_end":12520,"line_start":239,"line_end":239,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12525,"byte_end":12534,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12704,"byte_end":12713,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<Mutex<R, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12629,"byte_end":12678,"line_start":245,"line_end":245,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12683,"byte_end":12692,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13279,"byte_end":13291,"line_start":263,"line_end":263,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12771,"byte_end":12802,"line_start":251,"line_end":251,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12807,"byte_end":12810,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12815,"byte_end":12889,"line_start":253,"line_end":253,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12894,"byte_end":12964,"line_start":254,"line_end":254,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12969,"byte_end":12990,"line_start":255,"line_end":255,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":12995,"byte_end":12998,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13003,"byte_end":13015,"line_start":257,"line_end":257,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13020,"byte_end":13023,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13028,"byte_end":13102,"line_start":259,"line_end":259,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13107,"byte_end":13176,"line_start":260,"line_end":260,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13181,"byte_end":13246,"line_start":261,"line_end":261,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13251,"byte_end":13260,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13728,"byte_end":13731,"line_start":277,"line_end":277,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13339,"byte_end":13383,"line_start":267,"line_end":267,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13388,"byte_end":13391,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13396,"byte_end":13471,"line_start":269,"line_end":269,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13476,"byte_end":13537,"line_start":270,"line_end":270,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13542,"byte_end":13545,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13550,"byte_end":13562,"line_start":272,"line_end":272,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13567,"byte_end":13570,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13575,"byte_end":13642,"line_start":274,"line_end":274,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `MutexGuard`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13647,"byte_end":13695,"line_start":275,"line_end":275,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13700,"byte_end":13709,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":14301,"byte_end":14309,"line_start":293,"line_end":293,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<Mutex<R, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13776,"byte_end":13825,"line_start":281,"line_end":281,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13830,"byte_end":13833,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13838,"byte_end":13912,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13917,"byte_end":13987,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":13992,"byte_end":14013,"line_start":285,"line_end":285,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":14018,"byte_end":14021,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":14026,"byte_end":14038,"line_start":287,"line_end":287,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":14043,"byte_end":14046,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":14051,"byte_end":14122,"line_start":289,"line_end":289,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":14127,"byte_end":14197,"line_start":290,"line_end":290,"column_start":5,"column_end":75}},{"value":"/ a `MutexGuard` but that guard has been discarded using `mem::forget`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":14202,"byte_end":14275,"line_start":291,"line_end":291,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":14280,"byte_end":14289,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16284,"byte_end":16301,"line_start":350,"line_end":350,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock procotol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":15747,"byte_end":15807,"line_start":338,"line_end":338,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":15812,"byte_end":15815,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":15820,"byte_end":15894,"line_start":340,"line_end":340,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":15899,"byte_end":15969,"line_start":341,"line_end":341,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":15974,"byte_end":15995,"line_start":342,"line_end":342,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16000,"byte_end":16003,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16008,"byte_end":16020,"line_start":344,"line_end":344,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16025,"byte_end":16028,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16033,"byte_end":16107,"line_start":346,"line_end":346,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16112,"byte_end":16181,"line_start":347,"line_end":347,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16186,"byte_end":16251,"line_start":348,"line_end":348,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16256,"byte_end":16265,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16701,"byte_end":16713,"line_start":362,"line_end":362,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16404,"byte_end":16465,"line_start":356,"line_end":356,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16470,"byte_end":16473,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16478,"byte_end":16548,"line_start":358,"line_end":358,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16553,"byte_end":16628,"line_start":359,"line_end":359,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16633,"byte_end":16675,"line_start":360,"line_end":360,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16680,"byte_end":16689,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":17269,"byte_end":17283,"line_start":377,"line_end":377,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16972,"byte_end":17033,"line_start":371,"line_end":371,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":17038,"byte_end":17041,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":17046,"byte_end":17116,"line_start":373,"line_end":373,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":17121,"byte_end":17196,"line_start":374,"line_end":374,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":17201,"byte_end":17243,"line_start":375,"line_end":375,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":17248,"byte_end":17257,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":103},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":20755,"byte_end":20765,"line_start":489,"line_end":489,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":20415,"byte_end":20495,"line_start":483,"line_end":483,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":20496,"byte_end":20556,"line_start":484,"line_end":484,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":20557,"byte_end":20560,"line_start":485,"line_end":485,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":20561,"byte_end":20639,"line_start":486,"line_end":486,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":20640,"byte_end":20683,"line_start":487,"line_end":487,"column_start":1,"column_end":44}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":20684,"byte_end":20743,"line_start":488,"line_end":488,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21116,"byte_end":21121,"line_start":498,"line_end":498,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"pub fn mutex(&Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `Mutex` object.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21049,"byte_end":21104,"line_start":497,"line_end":497,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21586,"byte_end":21589,"line_start":511,"line_end":511,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21180,"byte_end":21250,"line_start":502,"line_end":502,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21255,"byte_end":21258,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21263,"byte_end":21320,"line_start":504,"line_end":504,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21325,"byte_end":21357,"line_start":505,"line_end":505,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21362,"byte_end":21365,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21370,"byte_end":21421,"line_start":507,"line_end":507,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21426,"byte_end":21502,"line_start":508,"line_end":508,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21507,"byte_end":21560,"line_start":509,"line_end":509,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21565,"byte_end":21574,"line_start":510,"line_end":510,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":22424,"byte_end":22431,"line_start":535,"line_end":535,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21933,"byte_end":22001,"line_start":525,"line_end":525,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":22006,"byte_end":22084,"line_start":526,"line_end":526,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":22089,"byte_end":22092,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":22097,"byte_end":22154,"line_start":528,"line_end":528,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":22159,"byte_end":22191,"line_start":529,"line_end":529,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":22196,"byte_end":22199,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":22204,"byte_end":22255,"line_start":531,"line_end":531,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":22260,"byte_end":22340,"line_start":532,"line_end":532,"column_start":5,"column_end":85}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":22345,"byte_end":22398,"line_start":533,"line_end":533,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":22403,"byte_end":22412,"line_start":534,"line_end":534,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23112,"byte_end":23120,"line_start":557,"line_end":557,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":22886,"byte_end":22950,"line_start":552,"line_end":552,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":22955,"byte_end":22958,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":22963,"byte_end":23031,"line_start":554,"line_end":554,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23036,"byte_end":23086,"line_start":555,"line_end":555,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23091,"byte_end":23100,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":24222,"byte_end":24233,"line_start":584,"line_end":584,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23441,"byte_end":23492,"line_start":571,"line_end":571,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23497,"byte_end":23500,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23505,"byte_end":23579,"line_start":573,"line_end":573,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23584,"byte_end":23656,"line_start":574,"line_end":574,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23661,"byte_end":23735,"line_start":575,"line_end":575,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23740,"byte_end":23815,"line_start":576,"line_end":576,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23820,"byte_end":23891,"line_start":577,"line_end":577,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23896,"byte_end":23953,"line_start":578,"line_end":578,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23958,"byte_end":23961,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23966,"byte_end":24042,"line_start":580,"line_end":580,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":24047,"byte_end":24123,"line_start":581,"line_end":581,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":24128,"byte_end":24196,"line_start":582,"line_end":582,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":24201,"byte_end":24210,"line_start":583,"line_end":583,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":24695,"byte_end":24708,"line_start":599,"line_end":599,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":24401,"byte_end":24465,"line_start":592,"line_end":592,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":24470,"byte_end":24473,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":24478,"byte_end":24533,"line_start":594,"line_end":594,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":24538,"byte_end":24541,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":24546,"byte_end":24614,"line_start":596,"line_end":596,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":24619,"byte_end":24669,"line_start":597,"line_end":597,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":24674,"byte_end":24683,"line_start":598,"line_end":598,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":25259,"byte_end":25263,"line_start":617,"line_end":617,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":24962,"byte_end":25031,"line_start":611,"line_end":611,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":25036,"byte_end":25039,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":25044,"byte_end":25120,"line_start":613,"line_end":613,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":25125,"byte_end":25201,"line_start":614,"line_end":614,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":25206,"byte_end":25233,"line_start":615,"line_end":615,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":25238,"byte_end":25247,"line_start":616,"line_end":616,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":162},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30245,"byte_end":30261,"line_start":783,"line_end":783,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":29809,"byte_end":29884,"line_start":775,"line_end":775,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":29885,"byte_end":29920,"line_start":776,"line_end":776,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":29921,"byte_end":29924,"line_start":777,"line_end":777,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":29925,"byte_end":30004,"line_start":778,"line_end":778,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30005,"byte_end":30080,"line_start":779,"line_end":779,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30081,"byte_end":30161,"line_start":780,"line_end":780,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30162,"byte_end":30173,"line_start":781,"line_end":781,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30174,"byte_end":30233,"line_start":782,"line_end":782,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31096,"byte_end":31099,"line_start":808,"line_end":808,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30678,"byte_end":30748,"line_start":799,"line_end":799,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30753,"byte_end":30756,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30761,"byte_end":30824,"line_start":801,"line_end":801,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30829,"byte_end":30861,"line_start":802,"line_end":802,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30866,"byte_end":30869,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30874,"byte_end":30925,"line_start":804,"line_end":804,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30930,"byte_end":31012,"line_start":805,"line_end":805,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31017,"byte_end":31070,"line_start":806,"line_end":806,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31075,"byte_end":31084,"line_start":807,"line_end":807,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31927,"byte_end":31934,"line_start":832,"line_end":832,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31424,"byte_end":31492,"line_start":822,"line_end":822,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31497,"byte_end":31575,"line_start":823,"line_end":823,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31580,"byte_end":31583,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31588,"byte_end":31651,"line_start":825,"line_end":825,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31656,"byte_end":31688,"line_start":826,"line_end":826,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31693,"byte_end":31696,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31701,"byte_end":31752,"line_start":828,"line_end":828,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31757,"byte_end":31843,"line_start":829,"line_end":829,"column_start":5,"column_end":91}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31848,"byte_end":31901,"line_start":830,"line_end":830,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":31906,"byte_end":31915,"line_start":831,"line_end":831,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":33229,"byte_end":33240,"line_start":864,"line_end":864,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":32448,"byte_end":32499,"line_start":851,"line_end":851,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":32504,"byte_end":32507,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":32512,"byte_end":32586,"line_start":853,"line_end":853,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":32591,"byte_end":32663,"line_start":854,"line_end":854,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":32668,"byte_end":32742,"line_start":855,"line_end":855,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":32747,"byte_end":32822,"line_start":856,"line_end":856,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":32827,"byte_end":32898,"line_start":857,"line_end":857,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":32903,"byte_end":32960,"line_start":858,"line_end":858,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":32965,"byte_end":32968,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":32973,"byte_end":33049,"line_start":860,"line_end":860,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":33054,"byte_end":33130,"line_start":861,"line_end":861,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":33135,"byte_end":33203,"line_start":862,"line_end":862,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":33208,"byte_end":33217,"line_start":863,"line_end":863,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":264},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":35855,"byte_end":35866,"line_start":45,"line_end":45,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[{"value":"/ Helper trait which returns a non-zero thread ID.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":35454,"byte_end":35506,"line_start":35,"line_end":35,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":35507,"byte_end":35510,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The simplest way to implement this trait is to return the address of a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":35511,"byte_end":35585,"line_start":37,"line_end":37,"column_start":1,"column_end":75}},{"value":"/ thread-local variable.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":35586,"byte_end":35612,"line_start":38,"line_end":38,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":35613,"byte_end":35616,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":35617,"byte_end":35629,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":35630,"byte_end":35633,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that no two active threads share","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":35634,"byte_end":35712,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ the same thread ID. However the ID of a thread that has exited can be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":35713,"byte_end":35786,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ re-used since that thread is no longer active.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":35787,"byte_end":35837,"line_start":44,"line_end":44,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":265},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36147,"byte_end":36151,"line_start":50,"line_end":50,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":264},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"/ Initial value.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":35873,"byte_end":35891,"line_start":46,"line_end":46,"column_start":5,"column_end":23}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36088,"byte_end":36136,"line_start":49,"line_end":49,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36262,"byte_end":36279,"line_start":54,"line_end":54,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"pub fn nonzero_thread_id(&Self) -> NonZeroUsize","parent":{"krate":0,"index":264},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[{"value":"/ Returns a non-zero thread ID which identifies the current thread of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36164,"byte_end":36235,"line_start":52,"line_end":52,"column_start":5,"column_end":76}},{"value":"/ execution.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36240,"byte_end":36254,"line_start":53,"line_end":53,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":267},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36847,"byte_end":36864,"line_start":67,"line_end":67,"column_start":12,"column_end":29},"name":"RawReentrantMutex","qualname":"::remutex::RawReentrantMutex","value":"RawReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"decl_id":null,"docs":" A raw mutex type that wraps another raw mutex to provide reentrancy.","sig":null,"attributes":[{"value":"/ A raw mutex type that wraps another raw mutex to provide reentrancy.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36307,"byte_end":36379,"line_start":57,"line_end":57,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36380,"byte_end":36383,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Although this has the same methods as the [`RawMutex`] trait, it does","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36384,"byte_end":36457,"line_start":59,"line_end":59,"column_start":1,"column_end":74}},{"value":"/ not implement it, and should not be used in the same way, since this","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36458,"byte_end":36530,"line_start":60,"line_end":60,"column_start":1,"column_end":73}},{"value":"/ mutex can successfully acquire a lock multiple times in the same thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36531,"byte_end":36607,"line_start":61,"line_end":61,"column_start":1,"column_end":77}},{"value":"/ Only use this when you know you want a raw mutex that can be locked","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36608,"byte_end":36679,"line_start":62,"line_end":62,"column_start":1,"column_end":72}},{"value":"/ reentrantly; you probably want [`ReentrantMutex`] instead.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36680,"byte_end":36742,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36743,"byte_end":36746,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`RawMutex`]: trait.RawMutex.html","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36747,"byte_end":36784,"line_start":65,"line_end":65,"column_start":1,"column_end":38}},{"value":"/ [`ReentrantMutex`]: struct.ReentrantMutex.html","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":36785,"byte_end":36835,"line_start":66,"line_end":66,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":283},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":37320,"byte_end":37324,"line_start":80,"line_end":80,"column_start":15,"column_end":19},"name":"INIT","qualname":"::remutex::RawReentrantMutex::<R, G>::INIT","value":"Self","parent":{"krate":0,"index":280},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":37212,"byte_end":37252,"line_start":78,"line_end":78,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":37257,"byte_end":37305,"line_start":79,"line_end":79,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38260,"byte_end":38264,"line_start":110,"line_end":110,"column_start":12,"column_end":16},"name":"lock","qualname":"<RawReentrantMutex<R, G>>::lock","value":"pub fn lock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking if it's held by another thread.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking if it's held by another thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38169,"byte_end":38234,"line_start":108,"line_end":108,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38239,"byte_end":38248,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38539,"byte_end":38547,"line_start":120,"line_end":120,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<RawReentrantMutex<R, G>>::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking. Returns `true`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38377,"byte_end":38444,"line_start":117,"line_end":117,"column_start":5,"column_end":72}},{"value":"/ if the lock was successfully acquired and `false` otherwise.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38449,"byte_end":38513,"line_start":118,"line_end":118,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38518,"byte_end":38527,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38906,"byte_end":38912,"line_start":131,"line_end":131,"column_start":19,"column_end":25},"name":"unlock","qualname":"<RawReentrantMutex<R, G>>::unlock","value":"pub unsafe fn unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex. The inner mutex may not be unlocked if\n this mutex was acquired previously in the current thread.","sig":null,"attributes":[{"value":"/ Unlocks this mutex. The inner mutex may not be unlocked if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38629,"byte_end":38691,"line_start":124,"line_end":124,"column_start":5,"column_end":67}},{"value":"/ this mutex was acquired previously in the current thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38696,"byte_end":38757,"line_start":125,"line_end":125,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38762,"byte_end":38765,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38770,"byte_end":38782,"line_start":127,"line_end":127,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38787,"byte_end":38790,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38795,"byte_end":38873,"line_start":129,"line_end":129,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":38878,"byte_end":38887,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39225,"byte_end":39234,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RawReentrantMutex<R, G>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39150,"byte_end":39199,"line_start":140,"line_end":140,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39204,"byte_end":39213,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39389,"byte_end":39415,"line_start":148,"line_end":148,"column_start":12,"column_end":38},"name":"is_owned_by_current_thread","qualname":"<RawReentrantMutex<R, G>>::is_owned_by_current_thread","value":"pub fn is_owned_by_current_thread(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently held by the current thread.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently held by the current thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39294,"byte_end":39363,"line_start":146,"line_end":146,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39368,"byte_end":39377,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39936,"byte_end":39947,"line_start":163,"line_end":163,"column_start":19,"column_end":30},"name":"unlock_fair","qualname":"<RawReentrantMutex<R, G>>::unlock_fair","value":"pub unsafe fn unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol. The inner mutex\n may not be unlocked if this mutex was acquired previously in the\n current thread.","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol. The inner mutex","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39622,"byte_end":39690,"line_start":155,"line_end":155,"column_start":5,"column_end":73}},{"value":"/ may not be unlocked if this mutex was acquired previously in the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39695,"byte_end":39763,"line_start":156,"line_end":156,"column_start":5,"column_end":73}},{"value":"/ current thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39768,"byte_end":39787,"line_start":157,"line_end":157,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39792,"byte_end":39795,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39800,"byte_end":39812,"line_start":159,"line_end":159,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39817,"byte_end":39820,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39825,"byte_end":39903,"line_start":161,"line_end":161,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39908,"byte_end":39917,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40610,"byte_end":40614,"line_start":182,"line_end":182,"column_start":19,"column_end":23},"name":"bump","qualname":"<RawReentrantMutex<R, G>>::bump","value":"pub unsafe fn bump(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40190,"byte_end":40259,"line_start":172,"line_end":172,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40264,"byte_end":40267,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40272,"byte_end":40348,"line_start":174,"line_end":174,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40353,"byte_end":40429,"line_start":175,"line_end":175,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40434,"byte_end":40461,"line_start":176,"line_end":176,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40466,"byte_end":40469,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40474,"byte_end":40486,"line_start":178,"line_end":178,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40491,"byte_end":40494,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40499,"byte_end":40577,"line_start":180,"line_end":180,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40582,"byte_end":40591,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41032,"byte_end":41046,"line_start":195,"line_end":195,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<RawReentrantMutex<R, G>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40945,"byte_end":41006,"line_start":193,"line_end":193,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41011,"byte_end":41020,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41249,"byte_end":41261,"line_start":201,"line_end":201,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<RawReentrantMutex<R, G>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41162,"byte_end":41223,"line_start":199,"line_end":199,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41228,"byte_end":41237,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":305},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41849,"byte_end":41863,"line_start":217,"line_end":217,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":310}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41374,"byte_end":41437,"line_start":206,"line_end":206,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41438,"byte_end":41441,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41442,"byte_end":41512,"line_start":208,"line_end":208,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41513,"byte_end":41516,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41517,"byte_end":41597,"line_start":210,"line_end":210,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41598,"byte_end":41616,"line_start":211,"line_end":211,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41617,"byte_end":41697,"line_start":212,"line_end":212,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41698,"byte_end":41737,"line_start":213,"line_end":213,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41738,"byte_end":41741,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41742,"byte_end":41822,"line_start":215,"line_end":215,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":41823,"byte_end":41837,"line_start":216,"line_end":216,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":42843,"byte_end":42846,"line_start":250,"line_end":250,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"pub fn new(T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":42711,"byte_end":42780,"line_start":247,"line_end":247,"column_start":5,"column_end":74}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":42785,"byte_end":42817,"line_start":248,"line_end":248,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":42822,"byte_end":42831,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":43261,"byte_end":43271,"line_start":264,"line_end":264,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":43180,"byte_end":43235,"line_start":262,"line_end":262,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":43240,"byte_end":43249,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":43612,"byte_end":43621,"line_start":276,"line_end":276,"column_start":18,"column_end":27},"name":"const_new","qualname":"<ReentrantMutex<R, G, T>>::const_new","value":"pub const fn const_new(R, G, T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex based on a pre-existing raw mutex and a\n helper to get the thread ID.","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex based on a pre-existing raw mutex and a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":43369,"byte_end":43442,"line_start":270,"line_end":270,"column_start":5,"column_end":78}},{"value":"/ helper to get the thread ID.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":43447,"byte_end":43479,"line_start":271,"line_end":271,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":43484,"byte_end":43487,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This allows creating a reentrant mutex in a constant context on stable","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":43492,"byte_end":43566,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ Rust.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":43571,"byte_end":43580,"line_start":274,"line_end":274,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":43585,"byte_end":43594,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44960,"byte_end":44964,"line_start":312,"line_end":312,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"pub fn lock(&Self) -> ReentrantMutexGuard<, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"/ Acquires a reentrant mutex, blocking the current thread until it is able","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44321,"byte_end":44397,"line_start":301,"line_end":301,"column_start":5,"column_end":81}},{"value":"/ to do so.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44402,"byte_end":44415,"line_start":302,"line_end":302,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44420,"byte_end":44423,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ If the mutex is held by another thread then this function will block the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44428,"byte_end":44504,"line_start":304,"line_end":304,"column_start":5,"column_end":81}},{"value":"/ local thread until it is available to acquire the mutex. If the mutex is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44509,"byte_end":44585,"line_start":305,"line_end":305,"column_start":5,"column_end":81}},{"value":"/ already held by the current thread then this function will increment the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44590,"byte_end":44666,"line_start":306,"line_end":306,"column_start":5,"column_end":81}},{"value":"/ lock reference count and return immediately. Upon returning,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44671,"byte_end":44735,"line_start":307,"line_end":307,"column_start":5,"column_end":69}},{"value":"/ the thread is the only thread with the mutex held. An RAII guard is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44740,"byte_end":44811,"line_start":308,"line_end":308,"column_start":5,"column_end":76}},{"value":"/ returned to allow scoped unlock of the lock. When the guard goes out of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44816,"byte_end":44891,"line_start":309,"line_end":309,"column_start":5,"column_end":80}},{"value":"/ scope, the mutex will be unlocked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44896,"byte_end":44934,"line_start":310,"line_end":310,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44939,"byte_end":44948,"line_start":311,"line_end":311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45430,"byte_end":45438,"line_start":326,"line_end":326,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45128,"byte_end":45162,"line_start":318,"line_end":318,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45167,"byte_end":45170,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45175,"byte_end":45251,"line_start":320,"line_end":320,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45256,"byte_end":45332,"line_start":321,"line_end":321,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45337,"byte_end":45358,"line_start":322,"line_end":322,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45363,"byte_end":45366,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45371,"byte_end":45404,"line_start":324,"line_end":324,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45409,"byte_end":45418,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45932,"byte_end":45939,"line_start":340,"line_end":340,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45676,"byte_end":45731,"line_start":335,"line_end":335,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45736,"byte_end":45739,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `ReentrantMutex` mutably, no actual locking needs to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45744,"byte_end":45828,"line_start":337,"line_end":337,"column_start":5,"column_end":89}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45833,"byte_end":45906,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":45911,"byte_end":45920,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46090,"byte_end":46099,"line_start":346,"line_end":346,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<ReentrantMutex<R, G, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46015,"byte_end":46064,"line_start":344,"line_end":344,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46069,"byte_end":46078,"line_start":345,"line_end":345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46252,"byte_end":46278,"line_start":352,"line_end":352,"column_start":12,"column_end":38},"name":"is_owned_by_current_thread","qualname":"<ReentrantMutex<R, G, T>>::is_owned_by_current_thread","value":"pub fn is_owned_by_current_thread(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently held by the current thread.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently held by the current thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46157,"byte_end":46226,"line_start":350,"line_end":350,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46231,"byte_end":46240,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46879,"byte_end":46891,"line_start":368,"line_end":368,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46353,"byte_end":46384,"line_start":356,"line_end":356,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46389,"byte_end":46392,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46397,"byte_end":46471,"line_start":358,"line_end":358,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46476,"byte_end":46555,"line_start":359,"line_end":359,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46560,"byte_end":46581,"line_start":360,"line_end":360,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46586,"byte_end":46589,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46594,"byte_end":46606,"line_start":362,"line_end":362,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46611,"byte_end":46614,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46619,"byte_end":46693,"line_start":364,"line_end":364,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46698,"byte_end":46776,"line_start":365,"line_end":365,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46781,"byte_end":46846,"line_start":366,"line_end":366,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46851,"byte_end":46860,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47337,"byte_end":47340,"line_start":382,"line_end":382,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46939,"byte_end":46983,"line_start":372,"line_end":372,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46988,"byte_end":46991,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":46996,"byte_end":47071,"line_start":374,"line_end":374,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47076,"byte_end":47137,"line_start":375,"line_end":375,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47142,"byte_end":47145,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47150,"byte_end":47162,"line_start":377,"line_end":377,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47167,"byte_end":47170,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47175,"byte_end":47242,"line_start":379,"line_end":379,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `ReentrantMutexGuard`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47247,"byte_end":47304,"line_start":380,"line_end":380,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47309,"byte_end":47318,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47942,"byte_end":47950,"line_start":399,"line_end":399,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<ReentrantMutex<R, G, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47391,"byte_end":47440,"line_start":386,"line_end":386,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47445,"byte_end":47448,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47453,"byte_end":47527,"line_start":388,"line_end":388,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47532,"byte_end":47606,"line_start":389,"line_end":389,"column_start":5,"column_end":79}},{"value":"/ when dealing with FFI.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47611,"byte_end":47637,"line_start":390,"line_end":390,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47642,"byte_end":47645,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47650,"byte_end":47662,"line_start":392,"line_end":392,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47667,"byte_end":47670,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47675,"byte_end":47746,"line_start":394,"line_end":394,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47751,"byte_end":47823,"line_start":395,"line_end":395,"column_start":5,"column_end":77}},{"value":"/ `ReentrantMutexGuard` but that guard has been discarded using","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47828,"byte_end":47893,"line_start":396,"line_end":396,"column_start":5,"column_end":70}},{"value":"/ `mem::forget`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47898,"byte_end":47916,"line_start":397,"line_end":397,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":47921,"byte_end":47930,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50029,"byte_end":50046,"line_start":456,"line_end":456,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":49474,"byte_end":49534,"line_start":444,"line_end":444,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":49539,"byte_end":49542,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":49547,"byte_end":49621,"line_start":446,"line_end":446,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":49626,"byte_end":49705,"line_start":447,"line_end":447,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":49710,"byte_end":49731,"line_start":448,"line_end":448,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":49736,"byte_end":49739,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":49744,"byte_end":49756,"line_start":450,"line_end":450,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":49761,"byte_end":49764,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":49769,"byte_end":49843,"line_start":452,"line_end":452,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":49848,"byte_end":49926,"line_start":453,"line_end":453,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":49931,"byte_end":49996,"line_start":454,"line_end":454,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50001,"byte_end":50010,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50474,"byte_end":50486,"line_start":468,"line_end":468,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50177,"byte_end":50238,"line_start":462,"line_end":462,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50243,"byte_end":50246,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50251,"byte_end":50321,"line_start":464,"line_end":464,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50326,"byte_end":50401,"line_start":465,"line_end":465,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50406,"byte_end":50448,"line_start":466,"line_end":466,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50453,"byte_end":50462,"line_start":467,"line_end":467,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":51054,"byte_end":51068,"line_start":483,"line_end":483,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50757,"byte_end":50818,"line_start":477,"line_end":477,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50823,"byte_end":50826,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50831,"byte_end":50901,"line_start":479,"line_end":479,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50906,"byte_end":50981,"line_start":480,"line_end":480,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50986,"byte_end":51028,"line_start":481,"line_end":481,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":51033,"byte_end":51042,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":373},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":54896,"byte_end":54915,"line_start":603,"line_end":603,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":54553,"byte_end":54640,"line_start":597,"line_end":597,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":54641,"byte_end":54704,"line_start":598,"line_end":598,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":54705,"byte_end":54708,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":54709,"byte_end":54787,"line_start":600,"line_end":600,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":54788,"byte_end":54815,"line_start":601,"line_end":601,"column_start":1,"column_end":28}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":54816,"byte_end":54884,"line_start":602,"line_end":602,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55376,"byte_end":55383,"line_start":615,"line_end":615,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"pub fn remutex(&Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `ReentrantMutex` object.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55300,"byte_end":55364,"line_start":614,"line_end":614,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55889,"byte_end":55892,"line_start":628,"line_end":628,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55456,"byte_end":55535,"line_start":619,"line_end":619,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55540,"byte_end":55543,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55548,"byte_end":55614,"line_start":621,"line_end":621,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55619,"byte_end":55651,"line_start":622,"line_end":622,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55656,"byte_end":55659,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55664,"byte_end":55715,"line_start":624,"line_end":624,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55720,"byte_end":55805,"line_start":625,"line_end":625,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55810,"byte_end":55863,"line_start":626,"line_end":626,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55868,"byte_end":55877,"line_start":627,"line_end":627,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":56762,"byte_end":56769,"line_start":652,"line_end":652,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&mut T) ->\nOption<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":56249,"byte_end":56327,"line_start":642,"line_end":642,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":56332,"byte_end":56408,"line_start":643,"line_end":643,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":56413,"byte_end":56416,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":56421,"byte_end":56487,"line_start":645,"line_end":645,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":56492,"byte_end":56524,"line_start":646,"line_end":646,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":56529,"byte_end":56532,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":56537,"byte_end":56588,"line_start":648,"line_end":648,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":56593,"byte_end":56678,"line_start":649,"line_end":649,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":56683,"byte_end":56736,"line_start":650,"line_end":650,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":56741,"byte_end":56750,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":57498,"byte_end":57506,"line_start":677,"line_end":677,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":57272,"byte_end":57336,"line_start":672,"line_end":672,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":57341,"byte_end":57344,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":57349,"byte_end":57417,"line_start":674,"line_end":674,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":57422,"byte_end":57472,"line_start":675,"line_end":675,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":57477,"byte_end":57486,"line_start":676,"line_end":676,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58667,"byte_end":58678,"line_start":706,"line_end":706,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":57877,"byte_end":57928,"line_start":693,"line_end":693,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":57933,"byte_end":57936,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":57941,"byte_end":58015,"line_start":695,"line_end":695,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58020,"byte_end":58092,"line_start":696,"line_end":696,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58097,"byte_end":58171,"line_start":697,"line_end":697,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58176,"byte_end":58251,"line_start":698,"line_end":698,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58256,"byte_end":58327,"line_start":699,"line_end":699,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58332,"byte_end":58389,"line_start":700,"line_end":700,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58394,"byte_end":58397,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58402,"byte_end":58478,"line_start":702,"line_end":702,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58483,"byte_end":58559,"line_start":703,"line_end":703,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58564,"byte_end":58641,"line_start":704,"line_end":704,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58646,"byte_end":58655,"line_start":705,"line_end":705,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":59144,"byte_end":59157,"line_start":721,"line_end":721,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58856,"byte_end":58920,"line_start":714,"line_end":714,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58925,"byte_end":58928,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58933,"byte_end":58982,"line_start":716,"line_end":716,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58987,"byte_end":58990,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":58995,"byte_end":59063,"line_start":718,"line_end":718,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":59068,"byte_end":59118,"line_start":719,"line_end":719,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":59123,"byte_end":59132,"line_start":720,"line_end":720,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":59720,"byte_end":59724,"line_start":739,"line_end":739,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":59423,"byte_end":59492,"line_start":733,"line_end":733,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":59497,"byte_end":59500,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":59505,"byte_end":59581,"line_start":735,"line_end":735,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":59586,"byte_end":59662,"line_start":736,"line_end":736,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":59667,"byte_end":59694,"line_start":737,"line_end":737,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":59699,"byte_end":59708,"line_start":738,"line_end":738,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":435},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":64851,"byte_end":64876,"line_start":901,"line_end":901,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":64379,"byte_end":64463,"line_start":893,"line_end":893,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":64464,"byte_end":64499,"line_start":894,"line_end":894,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":64500,"byte_end":64503,"line_start":895,"line_end":895,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":64504,"byte_end":64601,"line_start":896,"line_end":896,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":64602,"byte_end":64677,"line_start":897,"line_end":897,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":64678,"byte_end":64758,"line_start":898,"line_end":898,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":64759,"byte_end":64770,"line_start":899,"line_end":899,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":64771,"byte_end":64839,"line_start":900,"line_end":900,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65723,"byte_end":65726,"line_start":924,"line_end":924,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65278,"byte_end":65357,"line_start":915,"line_end":915,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65362,"byte_end":65365,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65370,"byte_end":65442,"line_start":917,"line_end":917,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65447,"byte_end":65479,"line_start":918,"line_end":918,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65484,"byte_end":65487,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65492,"byte_end":65543,"line_start":920,"line_end":920,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65548,"byte_end":65639,"line_start":921,"line_end":921,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65644,"byte_end":65697,"line_start":922,"line_end":922,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65702,"byte_end":65711,"line_start":923,"line_end":923,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":66585,"byte_end":66592,"line_start":948,"line_end":948,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":66060,"byte_end":66138,"line_start":938,"line_end":938,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":66143,"byte_end":66219,"line_start":939,"line_end":939,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":66224,"byte_end":66227,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":66232,"byte_end":66304,"line_start":941,"line_end":941,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":66309,"byte_end":66341,"line_start":942,"line_end":942,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":66346,"byte_end":66349,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":66354,"byte_end":66405,"line_start":944,"line_end":944,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":66410,"byte_end":66501,"line_start":945,"line_end":945,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":66506,"byte_end":66559,"line_start":946,"line_end":946,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":66564,"byte_end":66573,"line_start":947,"line_end":947,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67965,"byte_end":67976,"line_start":985,"line_end":985,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67175,"byte_end":67226,"line_start":972,"line_end":972,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67231,"byte_end":67234,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67239,"byte_end":67313,"line_start":974,"line_end":974,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67318,"byte_end":67390,"line_start":975,"line_end":975,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67395,"byte_end":67469,"line_start":976,"line_end":976,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67474,"byte_end":67549,"line_start":977,"line_end":977,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67554,"byte_end":67625,"line_start":978,"line_end":978,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67630,"byte_end":67687,"line_start":979,"line_end":979,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67692,"byte_end":67695,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67700,"byte_end":67776,"line_start":981,"line_end":981,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67781,"byte_end":67857,"line_start":982,"line_end":982,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67862,"byte_end":67939,"line_start":983,"line_end":983,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67944,"byte_end":67953,"line_start":984,"line_end":984,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":511},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70527,"byte_end":70536,"line_start":38,"line_end":38,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[{"value":"/ Basic operations for a reader-writer lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70080,"byte_end":70126,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70127,"byte_end":70130,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `RwLock` to form a safe and","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70131,"byte_end":70207,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ fully-functioning `RwLock` type.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70208,"byte_end":70244,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70245,"byte_end":70248,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70249,"byte_end":70261,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70262,"byte_end":70265,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the `RwLock` is actually","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70266,"byte_end":70341,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ exclusive: an exclusive lock can't be acquired while an exclusive or shared","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70342,"byte_end":70421,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ lock exists, and a shared lock can't be acquire while an exclusive lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70422,"byte_end":70497,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ exists.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70498,"byte_end":70509,"line_start":37,"line_end":37,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":512},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70842,"byte_end":70846,"line_start":43,"line_end":43,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked `RwLock`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70543,"byte_end":70586,"line_start":39,"line_end":39,"column_start":5,"column_end":48}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70783,"byte_end":70831,"line_start":42,"line_end":42,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":513},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71011,"byte_end":71022,"line_start":47,"line_end":47,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70859,"byte_end":70934,"line_start":45,"line_end":45,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":70939,"byte_end":71001,"line_start":46,"line_end":46,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71119,"byte_end":71130,"line_start":50,"line_end":50,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"pub fn lock_shared(&Self)","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71029,"byte_end":71111,"line_start":49,"line_end":49,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71207,"byte_end":71222,"line_start":53,"line_end":53,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"pub fn try_lock_shared(&Self) -> bool","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without blocking.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71144,"byte_end":71199,"line_start":52,"line_end":52,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71407,"byte_end":71420,"line_start":60,"line_end":60,"column_start":15,"column_end":28},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"pub unsafe fn unlock_shared(&Self)","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Releases a shared lock.","sig":null,"attributes":[{"value":"/ Releases a shared lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71244,"byte_end":71271,"line_start":55,"line_end":55,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71276,"byte_end":71279,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71284,"byte_end":71296,"line_start":57,"line_end":57,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71301,"byte_end":71304,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71309,"byte_end":71392,"line_start":59,"line_end":59,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71528,"byte_end":71542,"line_start":63,"line_end":63,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"pub fn lock_exclusive(&Self)","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an exclusive lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71434,"byte_end":71520,"line_start":62,"line_end":62,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71623,"byte_end":71641,"line_start":66,"line_end":66,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"pub fn try_lock_exclusive(&Self) -> bool","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock without blocking.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71556,"byte_end":71615,"line_start":65,"line_end":65,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71834,"byte_end":71850,"line_start":73,"line_end":73,"column_start":15,"column_end":31},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"pub unsafe fn unlock_exclusive(&Self)","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.","sig":null,"attributes":[{"value":"/ Releases an exclusive lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71663,"byte_end":71694,"line_start":68,"line_end":68,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71699,"byte_end":71702,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71707,"byte_end":71719,"line_start":70,"line_end":70,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71724,"byte_end":71727,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71732,"byte_end":71819,"line_start":72,"line_end":72,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71945,"byte_end":71954,"line_start":77,"line_end":77,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::rwlock::RawRwLock::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Checks if this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"/ Checks if this `RwLock` is currently locked in any way.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71864,"byte_end":71923,"line_start":75,"line_end":75,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":71928,"byte_end":71937,"line_start":76,"line_end":76,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":72304,"byte_end":72323,"line_start":89,"line_end":89,"column_start":8,"column_end":27},"name":"is_locked_exclusive","qualname":"::rwlock::RawRwLock::is_locked_exclusive","value":"pub fn is_locked_exclusive(&Self) -> bool","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":" Check if this `RwLock` is currently exclusively locked.\n","sig":null,"attributes":[{"value":"/ Check if this `RwLock` is currently exclusively locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":72237,"byte_end":72296,"line_start":88,"line_end":88,"column_start":5,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":522},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":72985,"byte_end":72998,"line_start":107,"line_end":107,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support fair unlocking.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":72605,"byte_end":72669,"line_start":101,"line_end":101,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":72670,"byte_end":72673,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":72674,"byte_end":72754,"line_start":103,"line_end":103,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":72755,"byte_end":72830,"line_start":104,"line_end":104,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":72831,"byte_end":72905,"line_start":105,"line_end":105,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":72906,"byte_end":72967,"line_start":106,"line_end":106,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73208,"byte_end":73226,"line_start":113,"line_end":113,"column_start":15,"column_end":33},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"pub unsafe fn unlock_shared_fair(&Self)","parent":{"krate":0,"index":522},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases a shared lock using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73016,"byte_end":73072,"line_start":108,"line_end":108,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73077,"byte_end":73080,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73085,"byte_end":73097,"line_start":110,"line_end":110,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73102,"byte_end":73105,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73110,"byte_end":73193,"line_start":112,"line_end":112,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73440,"byte_end":73461,"line_start":120,"line_end":120,"column_start":15,"column_end":36},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"pub unsafe fn unlock_exclusive_fair(&Self)","parent":{"krate":0,"index":522},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases an exclusive lock using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73240,"byte_end":73300,"line_start":115,"line_end":115,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73305,"byte_end":73308,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73313,"byte_end":73325,"line_start":117,"line_end":117,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73330,"byte_end":73333,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73338,"byte_end":73425,"line_start":119,"line_end":119,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73900,"byte_end":73911,"line_start":131,"line_end":131,"column_start":15,"column_end":26},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"pub unsafe fn bump_shared(&Self)","parent":{"krate":0,"index":522},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields a shared lock to a waiting thread if there is one.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73475,"byte_end":73548,"line_start":122,"line_end":122,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73553,"byte_end":73556,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_shared_fair` followed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73561,"byte_end":73644,"line_start":124,"line_end":124,"column_start":5,"column_end":88}},{"value":"/ by `lock_shared`, however it can be much more efficient in the case where there","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73649,"byte_end":73732,"line_start":125,"line_end":125,"column_start":5,"column_end":88}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73737,"byte_end":73764,"line_start":126,"line_end":126,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73769,"byte_end":73772,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73777,"byte_end":73789,"line_start":128,"line_end":128,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73794,"byte_end":73797,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73802,"byte_end":73885,"line_start":130,"line_end":130,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74434,"byte_end":74448,"line_start":145,"line_end":145,"column_start":15,"column_end":29},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"pub unsafe fn bump_exclusive(&Self)","parent":{"krate":0,"index":522},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an exclusive lock to a waiting thread if there is one.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73995,"byte_end":74072,"line_start":136,"line_end":136,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74077,"byte_end":74080,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_exclusive_fair` followed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74085,"byte_end":74171,"line_start":138,"line_end":138,"column_start":5,"column_end":91}},{"value":"/ by `lock_exclusive`, however it can be much more efficient in the case where there","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74176,"byte_end":74262,"line_start":139,"line_end":139,"column_start":5,"column_end":91}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74267,"byte_end":74294,"line_start":140,"line_end":140,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74299,"byte_end":74302,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74307,"byte_end":74319,"line_start":142,"line_end":142,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74324,"byte_end":74327,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74332,"byte_end":74419,"line_start":144,"line_end":144,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":527},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74665,"byte_end":74683,"line_start":153,"line_end":153,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":528}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically downgrading an","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74536,"byte_end":74610,"line_start":151,"line_end":151,"column_start":1,"column_end":75}},{"value":"/ exclusive lock to a shared lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74611,"byte_end":74647,"line_start":152,"line_end":152,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74982,"byte_end":74991,"line_start":160,"line_end":160,"column_start":15,"column_end":24},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"pub unsafe fn downgrade(&Self)","parent":{"krate":0,"index":527},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an exclusive lock into a shared lock without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74701,"byte_end":74771,"line_start":154,"line_end":154,"column_start":5,"column_end":75}},{"value":"/ allowing any thread to take an exclusive lock in the meantime.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74776,"byte_end":74842,"line_start":155,"line_end":155,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74847,"byte_end":74850,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74855,"byte_end":74867,"line_start":157,"line_end":157,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74872,"byte_end":74875,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74880,"byte_end":74967,"line_start":159,"line_end":159,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":529},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75233,"byte_end":75247,"line_start":167,"line_end":167,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support locking with timeouts.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75003,"byte_end":75074,"line_start":163,"line_end":163,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75075,"byte_end":75078,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75079,"byte_end":75159,"line_start":165,"line_end":165,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75160,"byte_end":75215,"line_start":166,"line_end":166,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":530},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75317,"byte_end":75325,"line_start":169,"line_end":169,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":529},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75265,"byte_end":75307,"line_start":168,"line_end":168,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":531},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75385,"byte_end":75392,"line_start":172,"line_end":172,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":529},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75332,"byte_end":75375,"line_start":171,"line_end":171,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75472,"byte_end":75491,"line_start":175,"line_end":175,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"pub fn try_lock_shared_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":529},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75399,"byte_end":75464,"line_start":174,"line_end":174,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75611,"byte_end":75632,"line_start":178,"line_end":178,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"pub fn try_lock_shared_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":529},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75538,"byte_end":75603,"line_start":177,"line_end":177,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75755,"byte_end":75777,"line_start":181,"line_end":181,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"pub fn try_lock_exclusive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":529},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75678,"byte_end":75747,"line_start":180,"line_end":180,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75901,"byte_end":75925,"line_start":184,"line_end":184,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"pub fn try_lock_exclusive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":529},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75824,"byte_end":75893,"line_start":183,"line_end":183,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":536},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76358,"byte_end":76376,"line_start":194,"line_end":194,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75969,"byte_end":76039,"line_start":187,"line_end":187,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76040,"byte_end":76043,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ These are guaranteed to succeed without blocking if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76044,"byte_end":76099,"line_start":189,"line_end":189,"column_start":1,"column_end":56}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76100,"byte_end":76175,"line_start":190,"line_end":190,"column_start":1,"column_end":76}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76176,"byte_end":76247,"line_start":191,"line_end":191,"column_start":1,"column_end":72}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76248,"byte_end":76322,"line_start":192,"line_end":192,"column_start":1,"column_end":75}},{"value":"/ for the lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76323,"byte_end":76340,"line_start":193,"line_end":193,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76477,"byte_end":76498,"line_start":196,"line_end":196,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"pub fn lock_shared_recursive(&Self)","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76394,"byte_end":76469,"line_start":195,"line_end":195,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76606,"byte_end":76631,"line_start":199,"line_end":199,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"pub fn try_lock_shared_recursive(&Self) -> bool","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76512,"byte_end":76598,"line_start":198,"line_end":198,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":539},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76752,"byte_end":76775,"line_start":203,"line_end":203,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks and timeouts.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76651,"byte_end":76734,"line_start":202,"line_end":202,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76949,"byte_end":76978,"line_start":206,"line_end":206,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"pub fn try_lock_shared_recursive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":539},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76819,"byte_end":76892,"line_start":204,"line_end":204,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76897,"byte_end":76941,"line_start":205,"line_end":205,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77155,"byte_end":77186,"line_start":210,"line_end":210,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"pub fn try_lock_shared_recursive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":539},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77025,"byte_end":77098,"line_start":208,"line_end":208,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77103,"byte_end":77147,"line_start":209,"line_end":209,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":542},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77562,"byte_end":77578,"line_start":219,"line_end":219,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically upgrading a shared","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77230,"byte_end":77308,"line_start":213,"line_end":213,"column_start":1,"column_end":79}},{"value":"/ lock to an exclusive lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77309,"byte_end":77339,"line_start":214,"line_end":214,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77340,"byte_end":77343,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ This requires acquiring a special \"upgradable read lock\" instead of a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77344,"byte_end":77417,"line_start":216,"line_end":216,"column_start":1,"column_end":74}},{"value":"/ normal shared lock. There may only be one upgradable lock at any time,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77418,"byte_end":77492,"line_start":217,"line_end":217,"column_start":1,"column_end":75}},{"value":"/ otherwise deadlocks could occur when upgrading.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77493,"byte_end":77544,"line_start":218,"line_end":218,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77691,"byte_end":77706,"line_start":221,"line_end":221,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"pub fn lock_upgradable(&Self)","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an upgradable lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77596,"byte_end":77683,"line_start":220,"line_end":220,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77788,"byte_end":77807,"line_start":224,"line_end":224,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"pub fn try_lock_upgradable(&Self) -> bool","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock without blocking.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77720,"byte_end":77780,"line_start":223,"line_end":223,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78002,"byte_end":78019,"line_start":231,"line_end":231,"column_start":15,"column_end":32},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"pub unsafe fn unlock_upgradable(&Self)","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.","sig":null,"attributes":[{"value":"/ Releases an upgradable lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77829,"byte_end":77861,"line_start":226,"line_end":226,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77866,"byte_end":77869,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77874,"byte_end":77886,"line_start":228,"line_end":228,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77891,"byte_end":77894,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77899,"byte_end":77987,"line_start":230,"line_end":230,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78227,"byte_end":78234,"line_start":238,"line_end":238,"column_start":15,"column_end":22},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"pub unsafe fn upgrade(&Self)","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Upgrades an upgradable lock to an exclusive lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78033,"byte_end":78086,"line_start":233,"line_end":233,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78091,"byte_end":78094,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78099,"byte_end":78111,"line_start":235,"line_end":235,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78116,"byte_end":78119,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78124,"byte_end":78212,"line_start":237,"line_end":237,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78478,"byte_end":78489,"line_start":246,"line_end":246,"column_start":15,"column_end":26},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"pub unsafe fn try_upgrade(&Self) -> bool","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78248,"byte_end":78319,"line_start":240,"line_end":240,"column_start":5,"column_end":76}},{"value":"/ blocking.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78324,"byte_end":78337,"line_start":241,"line_end":241,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78342,"byte_end":78345,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78350,"byte_end":78362,"line_start":243,"line_end":243,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78367,"byte_end":78370,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78375,"byte_end":78463,"line_start":245,"line_end":245,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":548},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78616,"byte_end":78636,"line_start":251,"line_end":251,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and fair","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78509,"byte_end":78583,"line_start":249,"line_end":249,"column_start":1,"column_end":75}},{"value":"/ unlocking.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78584,"byte_end":78598,"line_start":250,"line_end":250,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78879,"byte_end":78901,"line_start":257,"line_end":257,"column_start":15,"column_end":37},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"pub unsafe fn unlock_upgradable_fair(&Self)","parent":{"krate":0,"index":548},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases an upgradable lock using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78677,"byte_end":78738,"line_start":252,"line_end":252,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78743,"byte_end":78746,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78751,"byte_end":78763,"line_start":254,"line_end":254,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78768,"byte_end":78771,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78776,"byte_end":78864,"line_start":256,"line_end":256,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79358,"byte_end":79373,"line_start":268,"line_end":268,"column_start":15,"column_end":30},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"pub unsafe fn bump_upgradable(&Self)","parent":{"krate":0,"index":548},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an upgradable lock to a waiting thread if there is one.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78915,"byte_end":78993,"line_start":259,"line_end":259,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78998,"byte_end":79001,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_upgradable_fair` followed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79006,"byte_end":79093,"line_start":261,"line_end":261,"column_start":5,"column_end":92}},{"value":"/ by `lock_upgradable`, however it can be much more efficient in the case where there","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79098,"byte_end":79185,"line_start":262,"line_end":262,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79190,"byte_end":79217,"line_start":263,"line_end":263,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79222,"byte_end":79225,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79230,"byte_end":79242,"line_start":265,"line_end":265,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79247,"byte_end":79250,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79255,"byte_end":79343,"line_start":267,"line_end":267,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":551},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79572,"byte_end":79597,"line_start":276,"line_end":276,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79463,"byte_end":79537,"line_start":274,"line_end":274,"column_start":1,"column_end":75}},{"value":"/ downgrading.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79538,"byte_end":79554,"line_start":275,"line_end":275,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79835,"byte_end":79855,"line_start":282,"line_end":282,"column_start":15,"column_end":35},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"pub unsafe fn downgrade_upgradable(&Self)","parent":{"krate":0,"index":551},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.","sig":null,"attributes":[{"value":"/ Downgrades an upgradable lock to a shared lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79643,"byte_end":79694,"line_start":277,"line_end":277,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79699,"byte_end":79702,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79707,"byte_end":79719,"line_start":279,"line_end":279,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79724,"byte_end":79727,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79732,"byte_end":79820,"line_start":281,"line_end":281,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80064,"byte_end":80087,"line_start":289,"line_end":289,"column_start":15,"column_end":38},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"pub unsafe fn downgrade_to_upgradable(&Self)","parent":{"krate":0,"index":551},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.","sig":null,"attributes":[{"value":"/ Downgrades an exclusive lock to an upgradable lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79869,"byte_end":79924,"line_start":284,"line_end":284,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79929,"byte_end":79932,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79937,"byte_end":79949,"line_start":286,"line_end":286,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79954,"byte_end":79957,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79962,"byte_end":80049,"line_start":288,"line_end":288,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":554},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80213,"byte_end":80234,"line_start":294,"line_end":294,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and locking","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80099,"byte_end":80176,"line_start":292,"line_end":292,"column_start":1,"column_end":78}},{"value":"/ with timeouts.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80177,"byte_end":80195,"line_start":293,"line_end":293,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80354,"byte_end":80377,"line_start":296,"line_end":296,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"pub fn try_lock_upgradable_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":554},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80276,"byte_end":80346,"line_start":295,"line_end":295,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80502,"byte_end":80527,"line_start":299,"line_end":299,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"pub fn try_lock_upgradable_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":554},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80424,"byte_end":80494,"line_start":298,"line_end":298,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80813,"byte_end":80828,"line_start":307,"line_end":307,"column_start":15,"column_end":30},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"pub unsafe fn try_upgrade_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":554},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80573,"byte_end":80644,"line_start":301,"line_end":301,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80649,"byte_end":80672,"line_start":302,"line_end":302,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80677,"byte_end":80680,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80685,"byte_end":80697,"line_start":304,"line_end":304,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80702,"byte_end":80705,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80710,"byte_end":80798,"line_start":306,"line_end":306,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81115,"byte_end":81132,"line_start":315,"line_end":315,"column_start":15,"column_end":32},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"pub unsafe fn try_upgrade_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":554},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80875,"byte_end":80946,"line_start":309,"line_end":309,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80951,"byte_end":80974,"line_start":310,"line_end":310,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80979,"byte_end":80982,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80987,"byte_end":80999,"line_start":312,"line_end":312,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81004,"byte_end":81007,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81012,"byte_end":81100,"line_start":314,"line_end":314,"column_start":5,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":559},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81884,"byte_end":81890,"line_start":330,"line_end":330,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81176,"byte_end":81200,"line_start":318,"line_end":318,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81201,"byte_end":81204,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81205,"byte_end":81282,"line_start":320,"line_end":320,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81283,"byte_end":81362,"line_start":321,"line_end":321,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81363,"byte_end":81442,"line_start":322,"line_end":322,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81443,"byte_end":81501,"line_start":323,"line_end":323,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81502,"byte_end":81505,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81506,"byte_end":81583,"line_start":325,"line_end":325,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81584,"byte_end":81664,"line_start":326,"line_end":326,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81665,"byte_end":81743,"line_start":327,"line_end":327,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81744,"byte_end":81822,"line_start":328,"line_end":328,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":81823,"byte_end":81872,"line_start":329,"line_end":329,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83165,"byte_end":83168,"line_start":381,"line_end":381,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"pub fn new(T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83039,"byte_end":83102,"line_start":378,"line_end":378,"column_start":5,"column_end":68}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83107,"byte_end":83139,"line_start":379,"line_end":379,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83144,"byte_end":83153,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83411,"byte_end":83421,"line_start":391,"line_end":391,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83299,"byte_end":83357,"line_start":388,"line_end":388,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83362,"byte_end":83371,"line_start":389,"line_end":389,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83376,"byte_end":83399,"line_start":390,"line_end":390,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83741,"byte_end":83750,"line_start":403,"line_end":403,"column_start":18,"column_end":27},"name":"const_new","qualname":"<RwLock<R, T>>::const_new","value":"pub const fn const_new(R, T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new new instance of an `RwLock<T>` based on a pre-existing\n `RawRwLock<T>`.","sig":null,"attributes":[{"value":"/ Creates a new new instance of an `RwLock<T>` based on a pre-existing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83516,"byte_end":83588,"line_start":397,"line_end":397,"column_start":5,"column_end":77}},{"value":"/ `RawRwLock<T>`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83593,"byte_end":83612,"line_start":398,"line_end":398,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83617,"byte_end":83620,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ This allows creating a `RwLock<T>` in a constant context on stable","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83625,"byte_end":83695,"line_start":400,"line_end":400,"column_start":5,"column_end":75}},{"value":"/ Rust.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83700,"byte_end":83709,"line_start":401,"line_end":401,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83714,"byte_end":83723,"line_start":402,"line_end":402,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85077,"byte_end":85081,"line_start":447,"line_end":447,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":84469,"byte_end":84545,"line_start":434,"line_end":434,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":84550,"byte_end":84579,"line_start":435,"line_end":435,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":84584,"byte_end":84587,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":84592,"byte_end":84668,"line_start":437,"line_end":437,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":84673,"byte_end":84749,"line_start":438,"line_end":438,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":84754,"byte_end":84778,"line_start":439,"line_end":439,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":84783,"byte_end":84786,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ Note that attempts to recursively acquire a read lock on a `RwLock` when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":84791,"byte_end":84867,"line_start":441,"line_end":441,"column_start":5,"column_end":81}},{"value":"/ the current thread already holds one may result in a deadlock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":84872,"byte_end":84938,"line_start":442,"line_end":442,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":84943,"byte_end":84946,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":84951,"byte_end":85023,"line_start":444,"line_end":444,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85028,"byte_end":85051,"line_start":445,"line_end":445,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85056,"byte_end":85065,"line_start":446,"line_end":446,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85584,"byte_end":85592,"line_start":461,"line_end":461,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85250,"byte_end":85312,"line_start":453,"line_end":453,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85317,"byte_end":85320,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85325,"byte_end":85402,"line_start":455,"line_end":455,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85407,"byte_end":85484,"line_start":456,"line_end":456,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85489,"byte_end":85512,"line_start":457,"line_end":457,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85517,"byte_end":85520,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85525,"byte_end":85558,"line_start":459,"line_end":459,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85563,"byte_end":85572,"line_start":460,"line_end":460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86211,"byte_end":86216,"line_start":479,"line_end":479,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with exclusive write access, blocking the current","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85835,"byte_end":85908,"line_start":470,"line_end":470,"column_start":5,"column_end":78}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85913,"byte_end":85949,"line_start":471,"line_end":471,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85954,"byte_end":85957,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":85962,"byte_end":86032,"line_start":473,"line_end":473,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86037,"byte_end":86075,"line_start":474,"line_end":474,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86080,"byte_end":86083,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this `RwLock`","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86088,"byte_end":86163,"line_start":476,"line_end":476,"column_start":5,"column_end":80}},{"value":"/ when dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86168,"byte_end":86185,"line_start":477,"line_end":477,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86190,"byte_end":86199,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86715,"byte_end":86724,"line_start":493,"line_end":493,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this `RwLock` with exclusive write access.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86390,"byte_end":86453,"line_start":485,"line_end":485,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86458,"byte_end":86461,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86466,"byte_end":86542,"line_start":487,"line_end":487,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned which will release the lock when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86547,"byte_end":86620,"line_start":488,"line_end":488,"column_start":5,"column_end":78}},{"value":"/ it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86625,"byte_end":86643,"line_start":489,"line_end":489,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86648,"byte_end":86651,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86656,"byte_end":86689,"line_start":491,"line_end":491,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86694,"byte_end":86703,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87220,"byte_end":87227,"line_start":507,"line_end":507,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":86972,"byte_end":87027,"line_start":502,"line_end":502,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87032,"byte_end":87035,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87040,"byte_end":87116,"line_start":504,"line_end":504,"column_start":5,"column_end":81}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87121,"byte_end":87194,"line_start":505,"line_end":505,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87199,"byte_end":87208,"line_start":506,"line_end":506,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87393,"byte_end":87402,"line_start":513,"line_end":513,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RwLock<R, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"/ Checks whether this `RwLock` is currently locked in any way.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87303,"byte_end":87367,"line_start":511,"line_end":511,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87372,"byte_end":87381,"line_start":512,"line_end":512,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87545,"byte_end":87564,"line_start":519,"line_end":519,"column_start":12,"column_end":31},"name":"is_locked_exclusive","qualname":"<RwLock<R, T>>::is_locked_exclusive","value":"pub fn is_locked_exclusive(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this `RwLock` is currently exclusively locked.\n","sig":null,"attributes":[{"value":"/ Check if this `RwLock` is currently exclusively locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87460,"byte_end":87519,"line_start":517,"line_end":517,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87524,"byte_end":87533,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88163,"byte_end":88180,"line_start":535,"line_end":535,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"pub unsafe fn force_unlock_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87632,"byte_end":87665,"line_start":523,"line_end":523,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87670,"byte_end":87673,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87678,"byte_end":87752,"line_start":525,"line_end":525,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87757,"byte_end":87832,"line_start":526,"line_end":526,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87837,"byte_end":87858,"line_start":527,"line_end":527,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87863,"byte_end":87866,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87871,"byte_end":87883,"line_start":529,"line_end":529,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87888,"byte_end":87891,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87896,"byte_end":87970,"line_start":531,"line_end":531,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":87975,"byte_end":88049,"line_start":532,"line_end":532,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88054,"byte_end":88130,"line_start":533,"line_end":533,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88135,"byte_end":88144,"line_start":534,"line_end":534,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88771,"byte_end":88789,"line_start":551,"line_end":551,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"pub unsafe fn force_unlock_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88235,"byte_end":88269,"line_start":539,"line_end":539,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88274,"byte_end":88277,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88282,"byte_end":88356,"line_start":541,"line_end":541,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88361,"byte_end":88437,"line_start":542,"line_end":542,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88442,"byte_end":88463,"line_start":543,"line_end":543,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88468,"byte_end":88471,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88476,"byte_end":88488,"line_start":545,"line_end":545,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88493,"byte_end":88496,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88501,"byte_end":88575,"line_start":547,"line_end":547,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88580,"byte_end":88655,"line_start":548,"line_end":548,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88660,"byte_end":88738,"line_start":549,"line_end":549,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88743,"byte_end":88752,"line_start":550,"line_end":550,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89255,"byte_end":89258,"line_start":565,"line_end":565,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw reader-writer lock object.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88847,"byte_end":88904,"line_start":555,"line_end":555,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88909,"byte_end":88912,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawRwLock` trait from","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88917,"byte_end":88993,"line_start":557,"line_end":557,"column_start":5,"column_end":81}},{"value":"/ `lock_api` to be able to call functions on the raw","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":88998,"byte_end":89052,"line_start":558,"line_end":558,"column_start":5,"column_end":59}},{"value":"/ reader-writer lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89057,"byte_end":89080,"line_start":559,"line_end":559,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89085,"byte_end":89088,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89093,"byte_end":89105,"line_start":561,"line_end":561,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89110,"byte_end":89113,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89118,"byte_end":89185,"line_start":563,"line_end":563,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a lock guard.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89190,"byte_end":89236,"line_start":564,"line_end":564,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89890,"byte_end":89898,"line_start":582,"line_end":582,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<RwLock<R, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89303,"byte_end":89352,"line_start":569,"line_end":569,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89357,"byte_end":89360,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89365,"byte_end":89439,"line_start":571,"line_end":571,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` or `RwLockWriteGuard` object","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89444,"byte_end":89517,"line_start":572,"line_end":572,"column_start":5,"column_end":78}},{"value":"/ alive, for example when dealing with FFI.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89522,"byte_end":89567,"line_start":573,"line_end":573,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89572,"byte_end":89575,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89580,"byte_end":89592,"line_start":575,"line_end":575,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89597,"byte_end":89600,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89605,"byte_end":89676,"line_start":577,"line_end":577,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89681,"byte_end":89753,"line_start":578,"line_end":578,"column_start":5,"column_end":77}},{"value":"/ `RwLockReadGuard` or `RwLockWriteGuard` but that guard has been discarded","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89758,"byte_end":89835,"line_start":579,"line_end":579,"column_start":5,"column_end":82}},{"value":"/ using `mem::forget`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89840,"byte_end":89864,"line_start":580,"line_end":580,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":89869,"byte_end":89878,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93378,"byte_end":93400,"line_start":678,"line_end":678,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"pub unsafe fn force_unlock_read_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock using a fair unlock procotol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":92818,"byte_end":92880,"line_start":666,"line_end":666,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":92885,"byte_end":92888,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":92893,"byte_end":92967,"line_start":668,"line_end":668,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":92972,"byte_end":93047,"line_start":669,"line_end":669,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93052,"byte_end":93073,"line_start":670,"line_end":670,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93078,"byte_end":93081,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93086,"byte_end":93098,"line_start":672,"line_end":672,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93103,"byte_end":93106,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93111,"byte_end":93185,"line_start":674,"line_end":674,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93190,"byte_end":93264,"line_start":675,"line_end":675,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93269,"byte_end":93345,"line_start":676,"line_end":676,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93350,"byte_end":93359,"line_start":677,"line_end":677,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94025,"byte_end":94048,"line_start":694,"line_end":694,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"pub unsafe fn force_unlock_write_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock using a fair unlock procotol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93460,"byte_end":93523,"line_start":682,"line_end":682,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93528,"byte_end":93531,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93536,"byte_end":93610,"line_start":684,"line_end":684,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93615,"byte_end":93691,"line_start":685,"line_end":685,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93696,"byte_end":93717,"line_start":686,"line_end":686,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93722,"byte_end":93725,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93730,"byte_end":93742,"line_start":688,"line_end":688,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93747,"byte_end":93750,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93755,"byte_end":93829,"line_start":690,"line_end":690,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93834,"byte_end":93909,"line_start":691,"line_end":691,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93914,"byte_end":93992,"line_start":692,"line_end":692,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":93997,"byte_end":94006,"line_start":693,"line_end":693,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94500,"byte_end":94512,"line_start":707,"line_end":707,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"pub fn try_read_for(&Self, R::Duration) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94163,"byte_end":94240,"line_start":700,"line_end":700,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94245,"byte_end":94260,"line_start":701,"line_end":701,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94265,"byte_end":94268,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94273,"byte_end":94344,"line_start":703,"line_end":703,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94349,"byte_end":94420,"line_start":704,"line_end":704,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94425,"byte_end":94474,"line_start":705,"line_end":705,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94479,"byte_end":94488,"line_start":706,"line_end":706,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":95125,"byte_end":95139,"line_start":723,"line_end":723,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"pub fn try_read_until(&Self, R::Instant) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94788,"byte_end":94865,"line_start":716,"line_end":716,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94870,"byte_end":94885,"line_start":717,"line_end":717,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94890,"byte_end":94893,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94898,"byte_end":94969,"line_start":719,"line_end":719,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94974,"byte_end":95045,"line_start":720,"line_end":720,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":95050,"byte_end":95099,"line_start":721,"line_end":721,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":95104,"byte_end":95113,"line_start":722,"line_end":722,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":95760,"byte_end":95773,"line_start":739,"line_end":739,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"pub fn try_write_for(&Self, R::Duration) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":95416,"byte_end":95489,"line_start":732,"line_end":732,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":95494,"byte_end":95517,"line_start":733,"line_end":733,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":95522,"byte_end":95525,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":95530,"byte_end":95601,"line_start":735,"line_end":735,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":95606,"byte_end":95677,"line_start":736,"line_end":736,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":95682,"byte_end":95734,"line_start":737,"line_end":737,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":95739,"byte_end":95748,"line_start":738,"line_end":738,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":96398,"byte_end":96413,"line_start":755,"line_end":755,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"pub fn try_write_until(&Self, R::Instant) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":96054,"byte_end":96127,"line_start":748,"line_end":748,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":96132,"byte_end":96155,"line_start":749,"line_end":749,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":96160,"byte_end":96163,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":96168,"byte_end":96239,"line_start":751,"line_end":751,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":96244,"byte_end":96315,"line_start":752,"line_end":752,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":96320,"byte_end":96372,"line_start":753,"line_end":753,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":96377,"byte_end":96386,"line_start":754,"line_end":754,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100290,"byte_end":100304,"line_start":854,"line_end":854,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"pub fn read_recursive(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":99497,"byte_end":99573,"line_start":838,"line_end":838,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":99578,"byte_end":99607,"line_start":839,"line_end":839,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":99612,"byte_end":99615,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":99620,"byte_end":99696,"line_start":841,"line_end":841,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":99701,"byte_end":99777,"line_start":842,"line_end":842,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":99782,"byte_end":99806,"line_start":843,"line_end":843,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":99811,"byte_end":99814,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ Unlike `read`, this method is guaranteed to succeed without blocking if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":99819,"byte_end":99894,"line_start":845,"line_end":845,"column_start":5,"column_end":80}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":99899,"byte_end":99974,"line_start":846,"line_end":846,"column_start":5,"column_end":80}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":99979,"byte_end":100050,"line_start":847,"line_end":847,"column_start":5,"column_end":76}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100055,"byte_end":100129,"line_start":848,"line_end":848,"column_start":5,"column_end":79}},{"value":"/ for the lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100134,"byte_end":100151,"line_start":849,"line_end":849,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100156,"byte_end":100159,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100164,"byte_end":100236,"line_start":851,"line_end":851,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100241,"byte_end":100264,"line_start":852,"line_end":852,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100269,"byte_end":100278,"line_start":853,"line_end":853,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100988,"byte_end":101006,"line_start":871,"line_end":871,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"pub fn try_read_recursive(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100483,"byte_end":100545,"line_start":860,"line_end":860,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100550,"byte_end":100553,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100558,"byte_end":100635,"line_start":862,"line_end":862,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100640,"byte_end":100717,"line_start":863,"line_end":863,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100722,"byte_end":100745,"line_start":864,"line_end":864,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100750,"byte_end":100753,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed if another read lock is held at the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100758,"byte_end":100834,"line_start":866,"line_end":866,"column_start":5,"column_end":81}},{"value":"/ time of the call. See the documentation for `read_recursive` for details.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100839,"byte_end":100916,"line_start":867,"line_end":867,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100921,"byte_end":100924,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100929,"byte_end":100962,"line_start":869,"line_end":869,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":100967,"byte_end":100976,"line_start":870,"line_end":870,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":103009,"byte_end":103031,"line_start":920,"line_end":920,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"pub fn try_read_recursive_for(&Self, R::Duration)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":102476,"byte_end":102553,"line_start":909,"line_end":909,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":102558,"byte_end":102573,"line_start":910,"line_end":910,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":102578,"byte_end":102581,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":102586,"byte_end":102657,"line_start":912,"line_end":912,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":102662,"byte_end":102733,"line_start":913,"line_end":913,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":102738,"byte_end":102787,"line_start":914,"line_end":914,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":102792,"byte_end":102795,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed without blocking if another read","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":102800,"byte_end":102873,"line_start":916,"line_end":916,"column_start":5,"column_end":78}},{"value":"/ lock is held at the time of the call. See the documentation for","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":102878,"byte_end":102945,"line_start":917,"line_end":917,"column_start":5,"column_end":72}},{"value":"/ `read_recursive` for details.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":102950,"byte_end":102983,"line_start":918,"line_end":918,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":102988,"byte_end":102997,"line_start":919,"line_end":919,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":103677,"byte_end":103701,"line_start":939,"line_end":939,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"pub fn try_read_recursive_until(&Self, R::Instant)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":103340,"byte_end":103417,"line_start":932,"line_end":932,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":103422,"byte_end":103437,"line_start":933,"line_end":933,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":103442,"byte_end":103445,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":103450,"byte_end":103521,"line_start":935,"line_end":935,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":103526,"byte_end":103597,"line_start":936,"line_end":936,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":103602,"byte_end":103651,"line_start":937,"line_end":937,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":103656,"byte_end":103665,"line_start":938,"line_end":938,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106248,"byte_end":106263,"line_start":1010,"line_end":1010,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"pub fn upgradable_read(&Self) -> RwLockUpgradableReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with upgradable read access, blocking the current thread","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":105770,"byte_end":105850,"line_start":1000,"line_end":1000,"column_start":5,"column_end":85}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":105855,"byte_end":105884,"line_start":1001,"line_end":1001,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":105889,"byte_end":105892,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers or other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":105897,"byte_end":105976,"line_start":1003,"line_end":1003,"column_start":5,"column_end":84}},{"value":"/ upgradable reads which hold the lock. There may be other readers currently","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":105981,"byte_end":106059,"line_start":1004,"line_end":1004,"column_start":5,"column_end":83}},{"value":"/ inside the lock when this method returns.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106064,"byte_end":106109,"line_start":1005,"line_end":1005,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106114,"byte_end":106117,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106122,"byte_end":106194,"line_start":1007,"line_end":1007,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106199,"byte_end":106222,"line_start":1008,"line_end":1008,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106227,"byte_end":106236,"line_start":1009,"line_end":1009,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106790,"byte_end":106809,"line_start":1024,"line_end":1024,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"pub fn try_upgradable_read(&Self) -> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106452,"byte_end":106518,"line_start":1016,"line_end":1016,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106523,"byte_end":106526,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106531,"byte_end":106608,"line_start":1018,"line_end":1018,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106613,"byte_end":106690,"line_start":1019,"line_end":1019,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106695,"byte_end":106718,"line_start":1020,"line_end":1020,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106723,"byte_end":106726,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106731,"byte_end":106764,"line_start":1022,"line_end":1022,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":106769,"byte_end":106778,"line_start":1023,"line_end":1023,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":109001,"byte_end":109024,"line_start":1081,"line_end":1081,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"pub fn try_upgradable_read_for(&Self, R::Duration)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":108660,"byte_end":108741,"line_start":1074,"line_end":1074,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":108746,"byte_end":108761,"line_start":1075,"line_end":1075,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":108766,"byte_end":108769,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":108774,"byte_end":108845,"line_start":1077,"line_end":1077,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":108850,"byte_end":108921,"line_start":1078,"line_end":1078,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":108926,"byte_end":108975,"line_start":1079,"line_end":1079,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":108980,"byte_end":108989,"line_start":1080,"line_end":1080,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":109684,"byte_end":109709,"line_start":1100,"line_end":1100,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"pub fn try_upgradable_read_until(&Self, R::Instant)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":109343,"byte_end":109424,"line_start":1093,"line_end":1093,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":109429,"byte_end":109444,"line_start":1094,"line_end":1094,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":109449,"byte_end":109452,"line_start":1095,"line_end":1095,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":109457,"byte_end":109528,"line_start":1096,"line_end":1096,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":109533,"byte_end":109604,"line_start":1097,"line_end":1097,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":109609,"byte_end":109658,"line_start":1098,"line_end":1098,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":109663,"byte_end":109672,"line_start":1099,"line_end":1099,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":644},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":112637,"byte_end":112652,"line_start":1186,"line_end":1186,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":112479,"byte_end":112551,"line_start":1183,"line_end":1183,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":112552,"byte_end":112564,"line_start":1184,"line_end":1184,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":112565,"byte_end":112625,"line_start":1185,"line_end":1185,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":112921,"byte_end":112927,"line_start":1193,"line_end":1193,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":112843,"byte_end":112909,"line_start":1192,"line_end":1192,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113407,"byte_end":113410,"line_start":1206,"line_end":1206,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":112988,"byte_end":113062,"line_start":1197,"line_end":1197,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113067,"byte_end":113070,"line_start":1198,"line_end":1198,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113075,"byte_end":113137,"line_start":1199,"line_end":1199,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113142,"byte_end":113173,"line_start":1200,"line_end":1200,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113178,"byte_end":113181,"line_start":1201,"line_end":1201,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113186,"byte_end":113237,"line_start":1202,"line_end":1202,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113242,"byte_end":113323,"line_start":1203,"line_end":1203,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113328,"byte_end":113381,"line_start":1204,"line_end":1204,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113386,"byte_end":113395,"line_start":1205,"line_end":1205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":114254,"byte_end":114261,"line_start":1230,"line_end":1230,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113754,"byte_end":113828,"line_start":1220,"line_end":1220,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113833,"byte_end":113909,"line_start":1221,"line_end":1221,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113914,"byte_end":113917,"line_start":1222,"line_end":1222,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113922,"byte_end":113984,"line_start":1223,"line_end":1223,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":113989,"byte_end":114020,"line_start":1224,"line_end":1224,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":114025,"byte_end":114028,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":114033,"byte_end":114084,"line_start":1226,"line_end":1226,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":114089,"byte_end":114170,"line_start":1227,"line_end":1227,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":114175,"byte_end":114228,"line_start":1228,"line_end":1228,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":114233,"byte_end":114242,"line_start":1229,"line_end":1229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115013,"byte_end":115021,"line_start":1254,"line_end":1254,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":114716,"byte_end":114783,"line_start":1247,"line_end":1247,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":114788,"byte_end":114791,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":114796,"byte_end":114848,"line_start":1249,"line_end":1249,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":114853,"byte_end":114856,"line_start":1250,"line_end":1250,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":114861,"byte_end":114929,"line_start":1251,"line_end":1251,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":114934,"byte_end":114987,"line_start":1252,"line_end":1252,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":114992,"byte_end":115001,"line_start":1253,"line_end":1253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":116176,"byte_end":116187,"line_start":1281,"line_end":1281,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115375,"byte_end":115429,"line_start":1268,"line_end":1268,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115434,"byte_end":115437,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115442,"byte_end":115516,"line_start":1270,"line_end":1270,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115521,"byte_end":115596,"line_start":1271,"line_end":1271,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115601,"byte_end":115674,"line_start":1272,"line_end":1272,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115679,"byte_end":115748,"line_start":1273,"line_end":1273,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115753,"byte_end":115830,"line_start":1274,"line_end":1274,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115835,"byte_end":115902,"line_start":1275,"line_end":1275,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115907,"byte_end":115910,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115915,"byte_end":115991,"line_start":1277,"line_end":1277,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115996,"byte_end":116072,"line_start":1278,"line_end":1278,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockReadGuard` normally.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":116077,"byte_end":116150,"line_start":1279,"line_end":1279,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":116155,"byte_end":116164,"line_start":1280,"line_end":1280,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":116671,"byte_end":116684,"line_start":1296,"line_end":1296,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":116374,"byte_end":116441,"line_start":1289,"line_end":1289,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":116446,"byte_end":116449,"line_start":1290,"line_end":1290,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":116454,"byte_end":116506,"line_start":1291,"line_end":1291,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":116511,"byte_end":116514,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":116519,"byte_end":116587,"line_start":1293,"line_end":1293,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":116592,"byte_end":116645,"line_start":1294,"line_end":1294,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":116650,"byte_end":116659,"line_start":1295,"line_end":1295,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":117265,"byte_end":117269,"line_start":1314,"line_end":1314,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":116965,"byte_end":117037,"line_start":1308,"line_end":1308,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":117042,"byte_end":117045,"line_start":1309,"line_end":1309,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":117050,"byte_end":117126,"line_start":1310,"line_end":1310,"column_start":5,"column_end":81}},{"value":"/ by `read`, however it can be much more efficient in the case where there","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":117131,"byte_end":117207,"line_start":1311,"line_end":1311,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":117212,"byte_end":117239,"line_start":1312,"line_end":1312,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":117244,"byte_end":117253,"line_start":1313,"line_end":1313,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":694},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122203,"byte_end":122219,"line_start":1474,"line_end":1474,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":699}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122041,"byte_end":122117,"line_start":1471,"line_end":1471,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122118,"byte_end":122130,"line_start":1472,"line_end":1472,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122131,"byte_end":122191,"line_start":1473,"line_end":1473,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122493,"byte_end":122499,"line_start":1481,"line_end":1481,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122415,"byte_end":122481,"line_start":1480,"line_end":1480,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122982,"byte_end":122985,"line_start":1494,"line_end":1494,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122560,"byte_end":122635,"line_start":1485,"line_end":1485,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122640,"byte_end":122643,"line_start":1486,"line_end":1486,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122648,"byte_end":122711,"line_start":1487,"line_end":1487,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122716,"byte_end":122747,"line_start":1488,"line_end":1488,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122752,"byte_end":122755,"line_start":1489,"line_end":1489,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122760,"byte_end":122811,"line_start":1490,"line_end":1490,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122816,"byte_end":122898,"line_start":1491,"line_end":1491,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122903,"byte_end":122956,"line_start":1492,"line_end":1492,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122961,"byte_end":122970,"line_start":1493,"line_end":1493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":123846,"byte_end":123853,"line_start":1518,"line_end":1518,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":123343,"byte_end":123418,"line_start":1508,"line_end":1508,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":123423,"byte_end":123499,"line_start":1509,"line_end":1509,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":123504,"byte_end":123507,"line_start":1510,"line_end":1510,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":123512,"byte_end":123575,"line_start":1511,"line_end":1511,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":123580,"byte_end":123611,"line_start":1512,"line_end":1512,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":123616,"byte_end":123619,"line_start":1513,"line_end":1513,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":123624,"byte_end":123675,"line_start":1514,"line_end":1514,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":123680,"byte_end":123762,"line_start":1515,"line_end":1515,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":123767,"byte_end":123820,"line_start":1516,"line_end":1516,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":123825,"byte_end":123834,"line_start":1517,"line_end":1517,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":124554,"byte_end":124562,"line_start":1540,"line_end":1540,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":124322,"byte_end":124389,"line_start":1535,"line_end":1535,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":124394,"byte_end":124397,"line_start":1536,"line_end":1536,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":124402,"byte_end":124470,"line_start":1537,"line_end":1537,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":124475,"byte_end":124528,"line_start":1538,"line_end":1538,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":124533,"byte_end":124542,"line_start":1539,"line_end":1539,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":125270,"byte_end":125279,"line_start":1560,"line_end":1560,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":124928,"byte_end":125004,"line_start":1554,"line_end":1554,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":125009,"byte_end":125074,"line_start":1555,"line_end":1555,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":125079,"byte_end":125082,"line_start":1556,"line_end":1556,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":125087,"byte_end":125160,"line_start":1557,"line_end":1557,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":125165,"byte_end":125238,"line_start":1558,"line_end":1558,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":125243,"byte_end":125258,"line_start":1559,"line_end":1559,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":126056,"byte_end":126079,"line_start":1581,"line_end":1581,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(Self) -> RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into an upgradable read lock without allowing any","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":125702,"byte_end":125790,"line_start":1575,"line_end":1575,"column_start":5,"column_end":93}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":125795,"byte_end":125860,"line_start":1576,"line_end":1576,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":125865,"byte_end":125868,"line_start":1577,"line_end":1577,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":125873,"byte_end":125946,"line_start":1578,"line_end":1578,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":125951,"byte_end":126024,"line_start":1579,"line_end":1579,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":126029,"byte_end":126044,"line_start":1580,"line_end":1580,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127326,"byte_end":127337,"line_start":1609,"line_end":1609,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":126524,"byte_end":126578,"line_start":1596,"line_end":1596,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":126583,"byte_end":126586,"line_start":1597,"line_end":1597,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":126591,"byte_end":126665,"line_start":1598,"line_end":1598,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":126670,"byte_end":126745,"line_start":1599,"line_end":1599,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":126750,"byte_end":126823,"line_start":1600,"line_end":1600,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":126828,"byte_end":126897,"line_start":1601,"line_end":1601,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":126902,"byte_end":126979,"line_start":1602,"line_end":1602,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":126984,"byte_end":127051,"line_start":1603,"line_end":1603,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127056,"byte_end":127059,"line_start":1604,"line_end":1604,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127064,"byte_end":127140,"line_start":1605,"line_end":1605,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127145,"byte_end":127221,"line_start":1606,"line_end":1606,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockWriteGuard` normally.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127226,"byte_end":127300,"line_start":1607,"line_end":1607,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127305,"byte_end":127314,"line_start":1608,"line_end":1608,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127829,"byte_end":127842,"line_start":1624,"line_end":1624,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127532,"byte_end":127599,"line_start":1617,"line_end":1617,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127604,"byte_end":127607,"line_start":1618,"line_end":1618,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127612,"byte_end":127664,"line_start":1619,"line_end":1619,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127669,"byte_end":127672,"line_start":1620,"line_end":1620,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127677,"byte_end":127745,"line_start":1621,"line_end":1621,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127750,"byte_end":127803,"line_start":1622,"line_end":1622,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":127808,"byte_end":127817,"line_start":1623,"line_end":1623,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":128435,"byte_end":128439,"line_start":1642,"line_end":1642,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":128134,"byte_end":128206,"line_start":1636,"line_end":1636,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":128211,"byte_end":128214,"line_start":1637,"line_end":1637,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":128219,"byte_end":128295,"line_start":1638,"line_end":1638,"column_start":5,"column_end":81}},{"value":"/ by `write`, however it can be much more efficient in the case where there","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":128300,"byte_end":128377,"line_start":1639,"line_end":1639,"column_start":5,"column_end":82}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":128382,"byte_end":128409,"line_start":1640,"line_end":1640,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":128414,"byte_end":128423,"line_start":1641,"line_end":1641,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":759},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":135535,"byte_end":135560,"line_start":1862,"line_end":1862,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":764}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":135373,"byte_end":135449,"line_start":1859,"line_end":1859,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":135450,"byte_end":135462,"line_start":1860,"line_end":1860,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":135463,"byte_end":135523,"line_start":1861,"line_end":1861,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":135972,"byte_end":135978,"line_start":1874,"line_end":1874,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":135894,"byte_end":135960,"line_start":1873,"line_end":1873,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":136271,"byte_end":136279,"line_start":1883,"line_end":1883,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":136039,"byte_end":136106,"line_start":1878,"line_end":1878,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":136111,"byte_end":136114,"line_start":1879,"line_end":1879,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":136119,"byte_end":136187,"line_start":1880,"line_end":1880,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":136192,"byte_end":136245,"line_start":1881,"line_end":1881,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":136250,"byte_end":136259,"line_start":1882,"line_end":1882,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":136733,"byte_end":136740,"line_start":1897,"line_end":1897,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[{"value":"/ Atomically upgrades an upgradable read lock lock into a exclusive write lock,","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":136578,"byte_end":136659,"line_start":1895,"line_end":1895,"column_start":5,"column_end":86}},{"value":"/ blocking the current thread until it can be acquired.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":136664,"byte_end":136721,"line_start":1896,"line_end":1896,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":137279,"byte_end":137290,"line_start":1913,"line_end":1913,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":137082,"byte_end":137166,"line_start":1910,"line_end":1910,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":137171,"byte_end":137174,"line_start":1911,"line_end":1911,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then the current guard is returned.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":137179,"byte_end":137267,"line_start":1912,"line_end":1912,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138614,"byte_end":138625,"line_start":1942,"line_end":1942,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":137803,"byte_end":137857,"line_start":1929,"line_end":1929,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":137862,"byte_end":137865,"line_start":1930,"line_end":1930,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":137870,"byte_end":137944,"line_start":1931,"line_end":1931,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":137949,"byte_end":138024,"line_start":1932,"line_end":1932,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138029,"byte_end":138102,"line_start":1933,"line_end":1933,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138107,"byte_end":138176,"line_start":1934,"line_end":1934,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138181,"byte_end":138258,"line_start":1935,"line_end":1935,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138263,"byte_end":138330,"line_start":1936,"line_end":1936,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138335,"byte_end":138338,"line_start":1937,"line_end":1937,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138343,"byte_end":138419,"line_start":1938,"line_end":1938,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138424,"byte_end":138500,"line_start":1939,"line_end":1939,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockUpgradableReadGuard` normally.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138505,"byte_end":138588,"line_start":1940,"line_end":1940,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138593,"byte_end":138602,"line_start":1941,"line_end":1941,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":139128,"byte_end":139141,"line_start":1957,"line_end":1957,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138831,"byte_end":138898,"line_start":1950,"line_end":1950,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138903,"byte_end":138906,"line_start":1951,"line_end":1951,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138911,"byte_end":138963,"line_start":1952,"line_end":1952,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138968,"byte_end":138971,"line_start":1953,"line_end":1953,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":138976,"byte_end":139044,"line_start":1954,"line_end":1954,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":139049,"byte_end":139102,"line_start":1955,"line_end":1955,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":139107,"byte_end":139116,"line_start":1956,"line_end":1956,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":139756,"byte_end":139760,"line_start":1975,"line_end":1975,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":139445,"byte_end":139517,"line_start":1969,"line_end":1969,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":139522,"byte_end":139525,"line_start":1970,"line_end":1970,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":139530,"byte_end":139606,"line_start":1971,"line_end":1971,"column_start":5,"column_end":81}},{"value":"/ by `upgradable_read`, however it can be much more efficient in the case where there","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":139611,"byte_end":139698,"line_start":1972,"line_end":1972,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":139703,"byte_end":139730,"line_start":1973,"line_end":1973,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":139735,"byte_end":139744,"line_start":1974,"line_end":1974,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":140413,"byte_end":140422,"line_start":1991,"line_end":1991,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock lock into a shared read lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":140040,"byte_end":140118,"line_start":1984,"line_end":1984,"column_start":5,"column_end":83}},{"value":"/ without allowing any writers to take exclusive access of the lock in the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":140123,"byte_end":140199,"line_start":1985,"line_end":1985,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":140204,"byte_end":140217,"line_start":1986,"line_end":1986,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":140222,"byte_end":140225,"line_start":1987,"line_end":1987,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":140230,"byte_end":140303,"line_start":1988,"line_end":1988,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":140308,"byte_end":140381,"line_start":1989,"line_end":1989,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":140386,"byte_end":140401,"line_start":1990,"line_end":1990,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":141126,"byte_end":141141,"line_start":2011,"line_end":2011,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"pub fn try_upgrade_for(Self, R::Duration) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":140871,"byte_end":140943,"line_start":2006,"line_end":2006,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":140948,"byte_end":140991,"line_start":2007,"line_end":2007,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":140996,"byte_end":140999,"line_start":2008,"line_end":2008,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":141004,"byte_end":141075,"line_start":2009,"line_end":2009,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":141080,"byte_end":141114,"line_start":2010,"line_end":2010,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":141884,"byte_end":141901,"line_start":2034,"line_end":2034,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"pub fn try_upgrade_until(Self, R::Instant) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":141615,"byte_end":141687,"line_start":2028,"line_end":2028,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":141692,"byte_end":141735,"line_start":2029,"line_end":2029,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":141740,"byte_end":141743,"line_start":2030,"line_end":2030,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":141748,"byte_end":141819,"line_start":2031,"line_end":2031,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":141824,"byte_end":141858,"line_start":2032,"line_end":2032,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":141863,"byte_end":141872,"line_start":2033,"line_end":2033,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":820},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":151990,"byte_end":152011,"line_start":2334,"line_end":2334,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":151534,"byte_end":151618,"line_start":2326,"line_end":2326,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":151619,"byte_end":151654,"line_start":2327,"line_end":2327,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":151655,"byte_end":151658,"line_start":2328,"line_end":2328,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":151659,"byte_end":151748,"line_start":2329,"line_end":2329,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":151749,"byte_end":151824,"line_start":2330,"line_end":2330,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":151825,"byte_end":151905,"line_start":2331,"line_end":2331,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":151906,"byte_end":151917,"line_start":2332,"line_end":2332,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":151918,"byte_end":151978,"line_start":2333,"line_end":2333,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152864,"byte_end":152867,"line_start":2356,"line_end":2356,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152433,"byte_end":152507,"line_start":2347,"line_end":2347,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152512,"byte_end":152515,"line_start":2348,"line_end":2348,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152520,"byte_end":152588,"line_start":2349,"line_end":2349,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152593,"byte_end":152624,"line_start":2350,"line_end":2350,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152629,"byte_end":152632,"line_start":2351,"line_end":2351,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152637,"byte_end":152688,"line_start":2352,"line_end":2352,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152693,"byte_end":152780,"line_start":2353,"line_end":2353,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152785,"byte_end":152838,"line_start":2354,"line_end":2354,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152843,"byte_end":152852,"line_start":2355,"line_end":2355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":153702,"byte_end":153709,"line_start":2380,"line_end":2380,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":153190,"byte_end":153264,"line_start":2370,"line_end":2370,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":153269,"byte_end":153345,"line_start":2371,"line_end":2371,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":153350,"byte_end":153353,"line_start":2372,"line_end":2372,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":153358,"byte_end":153426,"line_start":2373,"line_end":2373,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":153431,"byte_end":153462,"line_start":2374,"line_end":2374,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":153467,"byte_end":153470,"line_start":2375,"line_end":2375,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":153475,"byte_end":153526,"line_start":2376,"line_end":2376,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":153531,"byte_end":153618,"line_start":2377,"line_end":2377,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":153623,"byte_end":153676,"line_start":2378,"line_end":2378,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":153681,"byte_end":153690,"line_start":2379,"line_end":2379,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":155034,"byte_end":155045,"line_start":2412,"line_end":2412,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154227,"byte_end":154281,"line_start":2399,"line_end":2399,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154286,"byte_end":154289,"line_start":2400,"line_end":2400,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154294,"byte_end":154368,"line_start":2401,"line_end":2401,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154373,"byte_end":154448,"line_start":2402,"line_end":2402,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154453,"byte_end":154526,"line_start":2403,"line_end":2403,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154531,"byte_end":154600,"line_start":2404,"line_end":2404,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154605,"byte_end":154682,"line_start":2405,"line_end":2405,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154687,"byte_end":154754,"line_start":2406,"line_end":2406,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154759,"byte_end":154762,"line_start":2407,"line_end":2407,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154767,"byte_end":154843,"line_start":2408,"line_end":2408,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154848,"byte_end":154924,"line_start":2409,"line_end":2409,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockReadGuard` normally.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154929,"byte_end":155008,"line_start":2410,"line_end":2410,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":155013,"byte_end":155022,"line_start":2411,"line_end":2411,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":871},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":156719,"byte_end":156741,"line_start":2469,"line_end":2469,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":156259,"byte_end":156345,"line_start":2461,"line_end":2461,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":156346,"byte_end":156381,"line_start":2462,"line_end":2462,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":156382,"byte_end":156385,"line_start":2463,"line_end":2463,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":156386,"byte_end":156477,"line_start":2464,"line_end":2464,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":156478,"byte_end":156553,"line_start":2465,"line_end":2465,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":156554,"byte_end":156634,"line_start":2466,"line_end":2466,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":156635,"byte_end":156646,"line_start":2467,"line_end":2467,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":156647,"byte_end":156707,"line_start":2468,"line_end":2468,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157607,"byte_end":157610,"line_start":2494,"line_end":2494,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157173,"byte_end":157248,"line_start":2485,"line_end":2485,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157253,"byte_end":157256,"line_start":2486,"line_end":2486,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157261,"byte_end":157330,"line_start":2487,"line_end":2487,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157335,"byte_end":157366,"line_start":2488,"line_end":2488,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157371,"byte_end":157374,"line_start":2489,"line_end":2489,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157379,"byte_end":157430,"line_start":2490,"line_end":2490,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157435,"byte_end":157523,"line_start":2491,"line_end":2491,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157528,"byte_end":157581,"line_start":2492,"line_end":2492,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157586,"byte_end":157595,"line_start":2493,"line_end":2493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":158462,"byte_end":158469,"line_start":2518,"line_end":2518,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157947,"byte_end":158022,"line_start":2508,"line_end":2508,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":158027,"byte_end":158103,"line_start":2509,"line_end":2509,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":158108,"byte_end":158111,"line_start":2510,"line_end":2510,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":158116,"byte_end":158185,"line_start":2511,"line_end":2511,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":158190,"byte_end":158221,"line_start":2512,"line_end":2512,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":158226,"byte_end":158229,"line_start":2513,"line_end":2513,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":158234,"byte_end":158285,"line_start":2514,"line_end":2514,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":158290,"byte_end":158378,"line_start":2515,"line_end":2515,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":158383,"byte_end":158436,"line_start":2516,"line_end":2516,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":158441,"byte_end":158450,"line_start":2517,"line_end":2517,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159810,"byte_end":159821,"line_start":2550,"line_end":2550,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159002,"byte_end":159056,"line_start":2537,"line_end":2537,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159061,"byte_end":159064,"line_start":2538,"line_end":2538,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159069,"byte_end":159143,"line_start":2539,"line_end":2539,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159148,"byte_end":159223,"line_start":2540,"line_end":2540,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159228,"byte_end":159301,"line_start":2541,"line_end":2541,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159306,"byte_end":159375,"line_start":2542,"line_end":2542,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159380,"byte_end":159457,"line_start":2543,"line_end":2543,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159462,"byte_end":159529,"line_start":2544,"line_end":2544,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159534,"byte_end":159537,"line_start":2545,"line_end":2545,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159542,"byte_end":159618,"line_start":2546,"line_end":2546,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159623,"byte_end":159699,"line_start":2547,"line_end":2547,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockWriteGuard` normally.","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159704,"byte_end":159784,"line_start":2548,"line_end":2548,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":159789,"byte_end":159798,"line_start":2549,"line_end":2549,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":4166,"byte_end":4177,"line_start":107,"line_end":107,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9641,"byte_end":9646,"line_start":147,"line_end":147,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9715,"byte_end":9720,"line_start":148,"line_end":148,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9752,"byte_end":9757,"line_start":150,"line_end":150,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10435,"byte_end":10440,"line_start":178,"line_end":178,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10807,"byte_end":10812,"line_start":191,"line_end":191,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":15729,"byte_end":15734,"line_start":337,"line_end":337,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16386,"byte_end":16391,"line_start":355,"line_end":355,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":18856,"byte_end":18861,"line_start":420,"line_end":420,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":18999,"byte_end":19004,"line_start":427,"line_end":427,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":19150,"byte_end":19155,"line_start":434,"line_end":434,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":19444,"byte_end":19461,"line_start":440,"line_end":440,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":20954,"byte_end":20964,"line_start":494,"line_end":494,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21022,"byte_end":21032,"line_start":496,"line_end":496,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23414,"byte_end":23424,"line_start":570,"line_end":570,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":25456,"byte_end":25466,"line_start":625,"line_end":625,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":25650,"byte_end":25660,"line_start":633,"line_end":633,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":25835,"byte_end":25845,"line_start":640,"line_end":640,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":26096,"byte_end":26106,"line_start":650,"line_end":650,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":26302,"byte_end":26312,"line_start":656,"line_end":656,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30442,"byte_end":30458,"line_start":790,"line_end":790,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30539,"byte_end":30555,"line_start":793,"line_end":793,"column_start":67,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30645,"byte_end":30661,"line_start":798,"line_end":798,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":32415,"byte_end":32431,"line_start":850,"line_end":850,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":33453,"byte_end":33469,"line_start":873,"line_end":873,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":33641,"byte_end":33657,"line_start":881,"line_end":881,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":33820,"byte_end":33836,"line_start":888,"line_end":888,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":34087,"byte_end":34103,"line_start":898,"line_end":898,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":34303,"byte_end":34319,"line_start":905,"line_end":905,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":37029,"byte_end":37046,"line_start":74,"line_end":74,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":37120,"byte_end":37137,"line_start":75,"line_end":75,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":37182,"byte_end":37199,"line_start":77,"line_end":77,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39592,"byte_end":39609,"line_start":154,"line_end":154,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40915,"byte_end":40932,"line_start":192,"line_end":192,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":42031,"byte_end":42045,"line_start":223,"line_end":223,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":42145,"byte_end":42159,"line_start":227,"line_end":227,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":42211,"byte_end":42225,"line_start":231,"line_end":231,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":43339,"byte_end":43353,"line_start":269,"line_end":269,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44023,"byte_end":44037,"line_start":289,"line_end":289,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":49444,"byte_end":49458,"line_start":443,"line_end":443,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50147,"byte_end":50161,"line_start":461,"line_end":461,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":52736,"byte_end":52750,"line_start":529,"line_end":529,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":52928,"byte_end":52942,"line_start":536,"line_end":536,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":53128,"byte_end":53142,"line_start":543,"line_end":543,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":53494,"byte_end":53511,"line_start":552,"line_end":552,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55159,"byte_end":55178,"line_start":609,"line_end":609,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55261,"byte_end":55280,"line_start":613,"line_end":613,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":394},{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":57838,"byte_end":57857,"line_start":691,"line_end":691,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":59952,"byte_end":59971,"line_start":748,"line_end":748,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":60181,"byte_end":60200,"line_start":758,"line_end":758,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":60490,"byte_end":60509,"line_start":770,"line_end":770,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":60733,"byte_end":60752,"line_start":778,"line_end":778,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65121,"byte_end":65146,"line_start":908,"line_end":908,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65233,"byte_end":65258,"line_start":913,"line_end":913,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67130,"byte_end":67155,"line_start":970,"line_end":970,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":68228,"byte_end":68253,"line_start":995,"line_end":995,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":68449,"byte_end":68474,"line_start":1005,"line_end":1005,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":68762,"byte_end":68787,"line_start":1017,"line_end":1017,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":69011,"byte_end":69036,"line_start":1025,"line_end":1025,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":82637,"byte_end":82643,"line_start":364,"line_end":364,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":82720,"byte_end":82726,"line_start":365,"line_end":365,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":82759,"byte_end":82765,"line_start":367,"line_end":367,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83497,"byte_end":83503,"line_start":396,"line_end":396,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83927,"byte_end":83933,"line_start":411,"line_end":411,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":92799,"byte_end":92805,"line_start":665,"line_end":665,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94144,"byte_end":94150,"line_start":699,"line_end":699,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":99478,"byte_end":99484,"line_start":837,"line_end":837,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":102457,"byte_end":102463,"line_start":908,"line_end":908,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":105465,"byte_end":105471,"line_start":988,"line_end":988,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":108641,"byte_end":108647,"line_start":1073,"line_end":1073,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":111534,"byte_end":111540,"line_start":1149,"line_end":1149,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":111681,"byte_end":111687,"line_start":1156,"line_end":1156,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":111836,"byte_end":111842,"line_start":1163,"line_end":1163,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":112132,"byte_end":112149,"line_start":1169,"line_end":1169,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":112811,"byte_end":112826,"line_start":1191,"line_end":1191,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":658},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115343,"byte_end":115358,"line_start":1267,"line_end":1267,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":117482,"byte_end":117497,"line_start":1322,"line_end":1322,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":117679,"byte_end":117694,"line_start":1330,"line_end":1330,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":117965,"byte_end":117980,"line_start":1340,"line_end":1340,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":118181,"byte_end":118196,"line_start":1347,"line_end":1347,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122382,"byte_end":122398,"line_start":1479,"line_end":1479,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":124895,"byte_end":124911,"line_start":1553,"line_end":1553,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":125669,"byte_end":125685,"line_start":1574,"line_end":1574,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":126491,"byte_end":126507,"line_start":1595,"line_end":1595,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":732}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":128660,"byte_end":128676,"line_start":1650,"line_end":1650,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":737},{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":128862,"byte_end":128878,"line_start":1658,"line_end":1658,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":129055,"byte_end":129071,"line_start":1665,"line_end":1665,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":129350,"byte_end":129366,"line_start":1675,"line_end":1675,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":753}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":129567,"byte_end":129583,"line_start":1682,"line_end":1682,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":135760,"byte_end":135785,"line_start":1868,"line_end":1868,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":135852,"byte_end":135877,"line_start":1872,"line_end":1872,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":777},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":137761,"byte_end":137786,"line_start":1928,"line_end":1928,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":139998,"byte_end":140023,"line_start":1983,"line_end":1983,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":140829,"byte_end":140854,"line_start":2005,"line_end":2005,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":142435,"byte_end":142460,"line_start":2052,"line_end":2052,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":803},{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":142649,"byte_end":142674,"line_start":2060,"line_end":2060,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":142975,"byte_end":143000,"line_start":2071,"line_end":2071,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":143208,"byte_end":143233,"line_start":2079,"line_end":2079,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152181,"byte_end":152202,"line_start":2340,"line_end":2340,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152283,"byte_end":152304,"line_start":2341,"line_end":2341,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152395,"byte_end":152416,"line_start":2346,"line_end":2346,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":839},{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154189,"byte_end":154210,"line_start":2398,"line_end":2398,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":155282,"byte_end":155303,"line_start":2421,"line_end":2421,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":854},{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":155472,"byte_end":155493,"line_start":2429,"line_end":2429,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":155766,"byte_end":155787,"line_start":2440,"line_end":2440,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":155988,"byte_end":156009,"line_start":2448,"line_end":2448,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":156917,"byte_end":156939,"line_start":2476,"line_end":2476,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157021,"byte_end":157043,"line_start":2479,"line_end":2479,"column_start":68,"column_end":90},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157134,"byte_end":157156,"line_start":2484,"line_end":2484,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":158963,"byte_end":158985,"line_start":2536,"line_end":2536,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":160066,"byte_end":160088,"line_start":2559,"line_end":2559,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":905},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":160261,"byte_end":160283,"line_start":2567,"line_end":2567,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":160447,"byte_end":160469,"line_start":2574,"line_end":2574,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":160750,"byte_end":160772,"line_start":2585,"line_end":2585,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":160973,"byte_end":160995,"line_start":2593,"line_end":2593,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/lib.rs","byte_start":4166,"byte_end":4177,"line_start":107,"line_end":107,"column_start":22,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":8},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":7444,"byte_end":7452,"line_start":87,"line_end":87,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":32},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":8606,"byte_end":8614,"line_start":120,"line_end":120,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":32},"to":{"krate":0,"index":42}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9641,"byte_end":9646,"line_start":147,"line_end":147,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9715,"byte_end":9720,"line_start":148,"line_end":148,"column_start":60,"column_end":65},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":9752,"byte_end":9757,"line_start":150,"line_end":150,"column_start":22,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10435,"byte_end":10440,"line_start":178,"line_end":178,"column_start":12,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":10807,"byte_end":10812,"line_start":191,"line_end":191,"column_start":30,"column_end":35},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":15729,"byte_end":15734,"line_start":337,"line_end":337,"column_start":34,"column_end":39},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":16386,"byte_end":16391,"line_start":355,"line_end":355,"column_start":35,"column_end":40},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":18856,"byte_end":18861,"line_start":420,"line_end":420,"column_start":52,"column_end":57},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":18999,"byte_end":19004,"line_start":427,"line_end":427,"column_start":34,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":19150,"byte_end":19155,"line_start":434,"line_end":434,"column_start":58,"column_end":63},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":19444,"byte_end":19461,"line_start":440,"line_end":440,"column_start":37,"column_end":54},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":99},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":20954,"byte_end":20964,"line_start":494,"line_end":494,"column_start":74,"column_end":84},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":21022,"byte_end":21032,"line_start":496,"line_end":496,"column_start":44,"column_end":54},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":23414,"byte_end":23424,"line_start":570,"line_end":570,"column_start":48,"column_end":58},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":25456,"byte_end":25466,"line_start":625,"line_end":625,"column_start":54,"column_end":64},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":25650,"byte_end":25660,"line_start":633,"line_end":633,"column_start":57,"column_end":67},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":25835,"byte_end":25845,"line_start":640,"line_end":640,"column_start":53,"column_end":63},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":26096,"byte_end":26106,"line_start":650,"line_end":650,"column_start":72,"column_end":82},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":26302,"byte_end":26312,"line_start":656,"line_end":656,"column_start":76,"column_end":86},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30442,"byte_end":30458,"line_start":790,"line_end":790,"column_start":9,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30539,"byte_end":30555,"line_start":793,"line_end":793,"column_start":67,"column_end":83},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":30645,"byte_end":30661,"line_start":798,"line_end":798,"column_start":44,"column_end":60},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":32415,"byte_end":32431,"line_start":850,"line_end":850,"column_start":48,"column_end":64},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":33453,"byte_end":33469,"line_start":873,"line_end":873,"column_start":54,"column_end":70},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":33641,"byte_end":33657,"line_start":881,"line_end":881,"column_start":57,"column_end":73},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":33820,"byte_end":33836,"line_start":888,"line_end":888,"column_start":53,"column_end":69},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":34087,"byte_end":34103,"line_start":898,"line_end":898,"column_start":72,"column_end":88},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/mutex.rs","byte_start":34303,"byte_end":34319,"line_start":905,"line_end":905,"column_start":9,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":162},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":37029,"byte_end":37046,"line_start":74,"line_end":74,"column_start":65,"column_end":82},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":267},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":37120,"byte_end":37137,"line_start":75,"line_end":75,"column_start":65,"column_end":82},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":267},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":37182,"byte_end":37199,"line_start":77,"line_end":77,"column_start":35,"column_end":52},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":39592,"byte_end":39609,"line_start":154,"line_end":154,"column_start":39,"column_end":56},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":40915,"byte_end":40932,"line_start":192,"line_end":192,"column_start":40,"column_end":57},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":42031,"byte_end":42045,"line_start":223,"line_end":223,"column_start":9,"column_end":23},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":305},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":42145,"byte_end":42159,"line_start":227,"line_end":227,"column_start":9,"column_end":23},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":305},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":42211,"byte_end":42225,"line_start":231,"line_end":231,"column_start":38,"column_end":52},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":43339,"byte_end":43353,"line_start":269,"line_end":269,"column_start":15,"column_end":29},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":44023,"byte_end":44037,"line_start":289,"line_end":289,"column_start":46,"column_end":60},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":49444,"byte_end":49458,"line_start":443,"line_end":443,"column_start":50,"column_end":64},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":50147,"byte_end":50161,"line_start":461,"line_end":461,"column_start":51,"column_end":65},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":52736,"byte_end":52750,"line_start":529,"line_end":529,"column_start":68,"column_end":82},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":305},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":52928,"byte_end":52942,"line_start":536,"line_end":536,"column_start":50,"column_end":64},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":305},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":53128,"byte_end":53142,"line_start":543,"line_end":543,"column_start":74,"column_end":88},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":305},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":53494,"byte_end":53511,"line_start":552,"line_end":552,"column_start":37,"column_end":54},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":369},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55159,"byte_end":55178,"line_start":609,"line_end":609,"column_start":9,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":55261,"byte_end":55280,"line_start":613,"line_end":613,"column_start":65,"column_end":84},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":57838,"byte_end":57857,"line_start":691,"line_end":691,"column_start":5,"column_end":24},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":59952,"byte_end":59971,"line_start":748,"line_end":748,"column_start":9,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":60181,"byte_end":60200,"line_start":758,"line_end":758,"column_start":9,"column_end":28},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":60490,"byte_end":60509,"line_start":770,"line_end":770,"column_start":9,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":60733,"byte_end":60752,"line_start":778,"line_end":778,"column_start":9,"column_end":28},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65121,"byte_end":65146,"line_start":908,"line_end":908,"column_start":9,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":435},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":65233,"byte_end":65258,"line_start":913,"line_end":913,"column_start":5,"column_end":30},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":67130,"byte_end":67155,"line_start":970,"line_end":970,"column_start":5,"column_end":30},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":68228,"byte_end":68253,"line_start":995,"line_end":995,"column_start":9,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":435},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":68449,"byte_end":68474,"line_start":1005,"line_end":1005,"column_start":9,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":435},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":68762,"byte_end":68787,"line_start":1017,"line_end":1017,"column_start":9,"column_end":34},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":435},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/remutex.rs","byte_start":69011,"byte_end":69036,"line_start":1025,"line_end":1025,"column_start":9,"column_end":34},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":435},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":73000,"byte_end":73009,"line_start":107,"line_end":107,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":511},"to":{"krate":0,"index":522}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":74685,"byte_end":74694,"line_start":153,"line_end":153,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":511},"to":{"krate":0,"index":527}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":75249,"byte_end":75258,"line_start":167,"line_end":167,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":511},"to":{"krate":0,"index":529}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76378,"byte_end":76387,"line_start":194,"line_end":194,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":511},"to":{"krate":0,"index":536}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76777,"byte_end":76795,"line_start":203,"line_end":203,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":536},"to":{"krate":0,"index":539}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":76798,"byte_end":76812,"line_start":203,"line_end":203,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":529},"to":{"krate":0,"index":539}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":77580,"byte_end":77589,"line_start":219,"line_end":219,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":511},"to":{"krate":0,"index":542}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78638,"byte_end":78654,"line_start":251,"line_end":251,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":542},"to":{"krate":0,"index":548}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":78657,"byte_end":78670,"line_start":251,"line_end":251,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":522},"to":{"krate":0,"index":548}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79599,"byte_end":79615,"line_start":276,"line_end":276,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":542},"to":{"krate":0,"index":551}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":79618,"byte_end":79636,"line_start":276,"line_end":276,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":527},"to":{"krate":0,"index":551}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80236,"byte_end":80252,"line_start":294,"line_end":294,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":542},"to":{"krate":0,"index":554}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":80255,"byte_end":80269,"line_start":294,"line_end":294,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":529},"to":{"krate":0,"index":554}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":82637,"byte_end":82643,"line_start":364,"line_end":364,"column_start":61,"column_end":67},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":559},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":82720,"byte_end":82726,"line_start":365,"line_end":365,"column_start":68,"column_end":74},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":559},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":82759,"byte_end":82765,"line_start":367,"line_end":367,"column_start":23,"column_end":29},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83497,"byte_end":83503,"line_start":396,"line_end":396,"column_start":12,"column_end":18},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":83927,"byte_end":83933,"line_start":411,"line_end":411,"column_start":31,"column_end":37},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":92799,"byte_end":92805,"line_start":665,"line_end":665,"column_start":35,"column_end":41},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":94144,"byte_end":94150,"line_start":699,"line_end":699,"column_start":36,"column_end":42},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":99478,"byte_end":99484,"line_start":837,"line_end":837,"column_start":40,"column_end":46},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":102457,"byte_end":102463,"line_start":908,"line_end":908,"column_start":45,"column_end":51},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":105465,"byte_end":105471,"line_start":988,"line_end":988,"column_start":38,"column_end":44},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":108641,"byte_end":108647,"line_start":1073,"line_end":1073,"column_start":43,"column_end":49},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":111534,"byte_end":111540,"line_start":1149,"line_end":1149,"column_start":53,"column_end":59},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":559},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":111681,"byte_end":111687,"line_start":1156,"line_end":1156,"column_start":35,"column_end":41},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":559},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":111836,"byte_end":111842,"line_start":1163,"line_end":1163,"column_start":59,"column_end":65},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":559},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":112132,"byte_end":112149,"line_start":1169,"line_end":1169,"column_start":37,"column_end":54},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":640},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":112811,"byte_end":112826,"line_start":1191,"line_end":1191,"column_start":45,"column_end":60},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":115343,"byte_end":115358,"line_start":1267,"line_end":1267,"column_start":49,"column_end":64},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":117482,"byte_end":117497,"line_start":1322,"line_end":1322,"column_start":55,"column_end":70},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":644},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":117679,"byte_end":117694,"line_start":1330,"line_end":1330,"column_start":54,"column_end":69},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":644},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":117965,"byte_end":117980,"line_start":1340,"line_end":1340,"column_start":73,"column_end":88},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":644},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":118181,"byte_end":118196,"line_start":1347,"line_end":1347,"column_start":9,"column_end":24},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":644},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":122382,"byte_end":122398,"line_start":1479,"line_end":1479,"column_start":45,"column_end":61},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":124895,"byte_end":124911,"line_start":1553,"line_end":1553,"column_start":54,"column_end":70},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":125669,"byte_end":125685,"line_start":1574,"line_end":1574,"column_start":61,"column_end":77},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":126491,"byte_end":126507,"line_start":1595,"line_end":1595,"column_start":49,"column_end":65},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":128660,"byte_end":128676,"line_start":1650,"line_end":1650,"column_start":55,"column_end":71},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":694},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":128862,"byte_end":128878,"line_start":1658,"line_end":1658,"column_start":58,"column_end":74},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":694},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":129055,"byte_end":129071,"line_start":1665,"line_end":1665,"column_start":54,"column_end":70},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":694},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":129350,"byte_end":129366,"line_start":1675,"line_end":1675,"column_start":73,"column_end":89},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":694},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":129567,"byte_end":129583,"line_start":1682,"line_end":1682,"column_start":9,"column_end":25},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":694},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":135760,"byte_end":135785,"line_start":1868,"line_end":1868,"column_start":9,"column_end":34},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":759},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":135852,"byte_end":135877,"line_start":1872,"line_end":1872,"column_start":52,"column_end":77},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":759},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":137761,"byte_end":137786,"line_start":1928,"line_end":1928,"column_start":56,"column_end":81},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":759},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":139998,"byte_end":140023,"line_start":1983,"line_end":1983,"column_start":61,"column_end":86},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":759},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":140829,"byte_end":140854,"line_start":2005,"line_end":2005,"column_start":57,"column_end":82},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":759},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":142435,"byte_end":142460,"line_start":2052,"line_end":2052,"column_start":62,"column_end":87},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":759},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":142649,"byte_end":142674,"line_start":2060,"line_end":2060,"column_start":61,"column_end":86},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":759},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":142975,"byte_end":143000,"line_start":2071,"line_end":2071,"column_start":9,"column_end":34},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":759},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":143208,"byte_end":143233,"line_start":2079,"line_end":2079,"column_start":9,"column_end":34},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":759},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152181,"byte_end":152202,"line_start":2340,"line_end":2340,"column_start":68,"column_end":89},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":820},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152283,"byte_end":152304,"line_start":2341,"line_end":2341,"column_start":68,"column_end":89},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":820},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":152395,"byte_end":152416,"line_start":2346,"line_end":2346,"column_start":45,"column_end":66},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":154189,"byte_end":154210,"line_start":2398,"line_end":2398,"column_start":49,"column_end":70},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":155282,"byte_end":155303,"line_start":2421,"line_end":2421,"column_start":55,"column_end":76},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":820},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":155472,"byte_end":155493,"line_start":2429,"line_end":2429,"column_start":54,"column_end":75},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":820},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":155766,"byte_end":155787,"line_start":2440,"line_end":2440,"column_start":9,"column_end":30},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":820},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":155988,"byte_end":156009,"line_start":2448,"line_end":2448,"column_start":9,"column_end":30},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":820},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":156917,"byte_end":156939,"line_start":2476,"line_end":2476,"column_start":9,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":871},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157021,"byte_end":157043,"line_start":2479,"line_end":2479,"column_start":68,"column_end":90},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":871},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":157134,"byte_end":157156,"line_start":2484,"line_end":2484,"column_start":45,"column_end":67},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":871},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":158963,"byte_end":158985,"line_start":2536,"line_end":2536,"column_start":49,"column_end":71},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":871},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":160066,"byte_end":160088,"line_start":2559,"line_end":2559,"column_start":55,"column_end":77},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":871},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":160261,"byte_end":160283,"line_start":2567,"line_end":2567,"column_start":58,"column_end":80},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":871},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":160447,"byte_end":160469,"line_start":2574,"line_end":2574,"column_start":54,"column_end":76},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":871},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":160750,"byte_end":160772,"line_start":2585,"line_end":2585,"column_start":9,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":871},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ozz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.4.6/src/rwlock.rs","byte_start":160973,"byte_end":160995,"line_start":2593,"line_end":2593,"column_start":9,"column_end":31},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":871},"to":{"krate":1,"index":9560}}]}